{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/Kubernetes_logo.svg","path":"images/Kubernetes_logo.svg","modified":1,"renderable":0},{"_id":"source/images/cmake-logo.png","path":"images/cmake-logo.png","modified":1,"renderable":0},{"_id":"source/images/git-goodness.gif","path":"images/git-goodness.gif","modified":1,"renderable":0},{"_id":"source/images/myself.png","path":"images/myself.png","modified":1,"renderable":0},{"_id":"source/images/tabs-or-spaces.png","path":"images/tabs-or-spaces.png","modified":1,"renderable":0},{"_id":"source/images/源计划.jpg","path":"images/源计划.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/LEO-logo.jpg","path":"images/LEO-logo.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar-leosocy.jpg","path":"images/avatar-leosocy.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/markdown-syntax-language.png","path":"images/markdown-syntax-language.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/post-bg-black-series-9.jpg","path":"images/post-bg-black-series-9.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/design-pattern.jpg","path":"images/design-pattern.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/images/contact-bg.jpg","path":"images/contact-bg.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/home-bk.jpg","path":"images/home-bk.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/blog-header.jpg","path":"images/blog-header.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"b60175e7069a9bbec909d9dacc994c998f402df1","modified":1536586663742},{"_id":"source/CNAME","hash":"04f071f97484a702afb9c36feb7629bdbaa5e84c","modified":1536583252213},{"_id":"themes/next/.DS_Store","hash":"fddd150b01057c9a2804861f4f34cfcdfcc847c3","modified":1536585267304},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1536584080693},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1536584080693},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1536584080694},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1536584080695},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1536584080701},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1536584080700},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1536584080702},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1536584080702},{"_id":"themes/next/README.md","hash":"c1d6d1c6b75736b892e179865833ea58da5ca9d2","modified":1536584080703},{"_id":"themes/next/bower.json","hash":"5391684ba84fe633bc7877ab711a7d8a0072ceda","modified":1536584080706},{"_id":"themes/next/_config.yml","hash":"4aee7ff96d3e79112f838c54b1c82dfd35593797","modified":1536590709867},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1536584080706},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1536584080717},{"_id":"themes/next/package.json","hash":"9acf6b8c8194f8a366025c8aab64d236908e62a1","modified":1536584080743},{"_id":"source/_posts/CMake进阶学习.md","hash":"ac3e2d56b970b19119a02d6077d0f3990692f872","modified":1536585487880},{"_id":"source/_posts/EDCC Algorithm.md","hash":"a1e8098e77c3fa2d562e591a001edb72033eadca","modified":1536585489476},{"_id":"source/_posts/Git指令整理.md","hash":"fe506c89c1c2aceeb689cdc1de26a92bc3178a52","modified":1536585490437},{"_id":"source/_posts/Google Python风格指南.md","hash":"12095f526aef2f8979738a95bec339a3e2ffd0ac","modified":1536585492236},{"_id":"source/_posts/Markdown入门.md","hash":"08a780f0439ad5d729861af1d787e360d600bf4b","modified":1536585493171},{"_id":"source/_posts/源计划——重启博客.md","hash":"6e50b7776840ffe1e7233da5fef4b32cf9871936","modified":1536587050878},{"_id":"source/_posts/设计模式Python实现.md","hash":"1602c5da04a1810370eba46280bc29a393736ec9","modified":1536585495396},{"_id":"source/categories/index.md","hash":"7bdc73999db7a25777264e22943080aac5b76ba3","modified":1536583252216},{"_id":"source/images/Kubernetes_logo.svg","hash":"9cefa9f3d8ba6b783577d05eb3f682ca59a26773","modified":1536585447479},{"_id":"source/images/.DS_Store","hash":"fe505df6a6882a89843b4f14662f3df0846a1a2b","modified":1536587119849},{"_id":"source/images/cmake-logo.png","hash":"3ba8d5534c2f38627b169237e2c4662950f127a1","modified":1536585447479},{"_id":"source/images/git-goodness.gif","hash":"eac13660ce70f0fbc8dcafbd2d31a76d2dc54980","modified":1536585447479},{"_id":"source/images/myself.png","hash":"ad16ee286d092403413f2b38c68b6917e6517e5a","modified":1536587098278},{"_id":"source/images/tabs-or-spaces.png","hash":"f1f40e7a5c30e4c81b6fda0a070ce3b6de01c16f","modified":1536585447479},{"_id":"source/tags/index.md","hash":"9729258c3729513d14628d621c1b9911486f1536","modified":1536583252216},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1536584080696},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1536584080697},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1536584080697},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1536584080698},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1536584080699},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1536584080699},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1536584080707},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1536584080708},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1536584080708},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1536584080709},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1536584080709},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1536584080710},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1536584080710},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1536584080711},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1536584080711},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1536584080718},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1536584080718},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1536584080718},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1536584080719},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1536584080719},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1536584080719},{"_id":"themes/next/languages/ja.yml","hash":"e331b15b1fda0f2285d25853f834682ab8dc3c39","modified":1536584080720},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1536584080720},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1536584080720},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1536584080721},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1536584080721},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1536584080721},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1536584080722},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1536584080722},{"_id":"themes/next/languages/zh-CN.yml","hash":"b68df8144dc7ada9c274ddd258cf35da5f956a96","modified":1536584080722},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1536584080723},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1536584080723},{"_id":"themes/next/layout/_layout.swig","hash":"67f8b308310597c8253ce055c542b114317d7a0f","modified":1536584080724},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1536584080742},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1536584080742},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1536584080743},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1536584080743},{"_id":"themes/next/layout/post.swig","hash":"318249db246a57e9422875a2457c6acfce974ba5","modified":1536584080743},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1536584080743},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1536584080743},{"_id":"themes/next/scripts/helpers.js","hash":"a70bfad3efda76738dab12e28e8b75e3989ee3da","modified":1536584080744},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1536584080744},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1536584080744},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1536584080796},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1536584080796},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1536584080796},{"_id":"themes/next/source/.DS_Store","hash":"c56e7e0672bd07002ecbf85e7e25f7b3bf82b047","modified":1536585273492},{"_id":"source/_posts/Google C++ Code Style.md","hash":"549ed4420cc433e34f4ad1d2567dd196755a898e","modified":1536585491333},{"_id":"source/images/源计划.jpg","hash":"63bec03e3c39df632d25d772923c976d38958f55","modified":1536585447479},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536584080765},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1536584080712},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1536584080712},{"_id":"themes/next/docs/ru/README.md","hash":"edfe0cfb8b2c9f0effd3beb868af9bfd0fabb3a6","modified":1536584080713},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1536584080713},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1536584080714},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1536584080714},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1536584080715},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1536584080715},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1536584080716},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1536584080716},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1536584080716},{"_id":"themes/next/docs/zh-CN/README.md","hash":"46b264623af21211a0a9c4ba0cf1318a80eeb9fb","modified":1536584080717},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1536584080717},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1536584080723},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1536584080724},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1536584080724},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"2867a9d5d59def629f24bbc7b0473662b3422d81","modified":1536584080725},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"a7164a8b69eaa6034631b0e111ddba88fbe702cd","modified":1536584080725},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1536584080726},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1536584080726},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1536584080726},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1536584080727},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1536584080727},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1536584080728},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1536584080727},{"_id":"themes/next/layout/_partials/comments.swig","hash":"eafff2d623af8991844f34819a60e37ac11ef245","modified":1536584080728},{"_id":"themes/next/layout/_partials/footer.swig","hash":"05cdaf9b6cb32afd442b228cd247aaf9468a31ed","modified":1536584080728},{"_id":"themes/next/layout/_macro/post.swig","hash":"a0a45cf54e603cb61e6c990f4e71b8aa3fc3e026","modified":1536584080727},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1536584080730},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1536584080730},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1536584080732},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1536584080733},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1536584080733},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1536584080735},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1536584080737},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1536584080739},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1536584080739},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1536584080739},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1536584080740},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1536584080740},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1536584080740},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1536584080741},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1536584080741},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1536584080744},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1536584080745},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1536584080745},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1536584080745},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1d59b968af4b8d147f8bc9bc295d596e41be8348","modified":1536584080745},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1536584080745},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1536584080745},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1536584080746},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1536584080746},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1536584080764},{"_id":"themes/next/source/images/LEO-logo.jpg","hash":"2db7d3f716cbab89579cd2d298cfa0c9f929f3ec","modified":1536584080765},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1536584080765},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1536584080765},{"_id":"themes/next/source/images/avatar-leosocy.jpg","hash":"dce06b7e2c90f742cadb89919b1d9844f6804156","modified":1536584080766},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1536584080766},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1536584080766},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1536584080766},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1536584080766},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1536584080767},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1536584080767},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1536584080767},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1536584080767},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1536584080770},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1536584080770},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536584080773},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1536584080773},{"_id":"themes/next/source/images/markdown-syntax-language.png","hash":"08d9a1ade68de7c678cff7972573eabaf8231333","modified":1536584080774},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536584080774},{"_id":"themes/next/source/images/post-bg-black-series-9.jpg","hash":"d3a398a044c915c2a8a82b806c6f8b0fd037641f","modified":1536584080774},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1536584080774},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1536584080774},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1536584080775},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536584080734},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536584080734},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536584080759},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536584080759},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536584080760},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536584080764},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536584080764},{"_id":"source/images/design-pattern.jpg","hash":"a5454ceec96af1ce92f748960193d30f17c3d9bd","modified":1536585426528},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"c492009b9b57b8232648c1477a74be8319b56857","modified":1536584080725},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1536584080725},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1536584080728},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1536584080729},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1536584080729},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1536584080729},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1536584080729},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"f702fb0deddc96437e49e3538daa9ed8590d3c3e","modified":1536584080730},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1536584080730},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1536584080731},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1536584080731},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1536584080731},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1536584080731},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1536584080732},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1536584080732},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1536584080732},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1536584080733},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1536584080733},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1536584080734},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1536584080735},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1536584080735},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1536584080735},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1536584080735},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1536584080736},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1536584080736},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1536584080736},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1536584080736},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1536584080736},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1536584080737},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1536584080737},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1536584080737},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1536584080737},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1536584080738},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1536584080738},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1536584080738},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"03e83f1311faafb7dddc2899042ed1cacd5c995e","modified":1536584080738},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"2c74a96dd314e804d801f8773ac1b2e0a970fce3","modified":1536584080739},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"34421679cae6581697cd3ab7c3729eb220e3e3f5","modified":1536584080739},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1536584080740},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1536584080740},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1536584080740},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1536584080741},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1536584080742},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1536584080742},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1536584080742},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1536584080759},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"84a1c6d312d528f705d7322c1492546821d0341d","modified":1536584080759},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1536584080759},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"51c2907e5c50c2614419b670fbdec183ae7f7f5d","modified":1536584080760},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1536584080764},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1536584080764},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1536584080764},{"_id":"themes/next/source/css/_variables/base.styl","hash":"559ff701f12140d7d8dbdecfda8d9562889b3fbe","modified":1536584080764},{"_id":"themes/next/source/images/contact-bg.jpg","hash":"b1ce8dc037b1a2679dc45eac2d74d9d430fcd97a","modified":1536584080769},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1536584080791},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1536584080791},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1536584080791},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1536584080791},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1536584080791},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1536584080791},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1536584080792},{"_id":"themes/next/source/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1536584080792},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1536584080792},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1536584080792},{"_id":"themes/next/source/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1536584080792},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1536584165861},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1536584165861},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1536584165861},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1536584165862},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1536584165887},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1536584165935},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1536584165890},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1536584165862},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1536584165887},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1536584165890},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1536584165935},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1536584165937},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1536584165861},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1536584165872},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1536584165890},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1536584165924},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1536584165939},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1536584165937},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1536584165878},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1536584165861},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1536584165890},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1536584165862},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1536584165878},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1536584165890},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1536584165934},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1536584165939},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1536584165937},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1536584165993},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1536584165962},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1536584165994},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1536584165996},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1536584165998},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1536584166019},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1536584166021},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1536584166022},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1536584165862},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1536584165878},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1536584165890},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1536584080795},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1536584080796},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1536584080795},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1536584080793},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1536584080758},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1536584080758},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1536584080758},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1536584080758},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1536584080758},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1536584080759},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1536584080759},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1536584080746},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1536584080746},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1536584080746},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1536584080747},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1536584080747},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1536584080750},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1536584080754},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1536584080741},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1536584080741},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fca5320e2644edcd663888863899d1b80352439b","modified":1536584080760},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1536584080760},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1536584080760},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1536584080760},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1536584080760},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1536584080761},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1536584080761},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1536584080761},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1536584080762},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1536584080762},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1536584080762},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1536584080762},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1536584080762},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1536584080763},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1536584080763},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1536584080763},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1536584080763},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1536584080763},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1536584080763},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1536584080764},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1536584080792},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1536584165997},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1536584165864},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1536584165889},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1536584165892},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1536584165936},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1536584165938},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1536584165955},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1536584166023},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1536584166043},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1536584166045},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1536584165938},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1536584165955},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1536584165955},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1536584165974},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1536584165994},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1536584165865},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1536584165889},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1536584165963},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1536584165993},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1536584165995},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1536584166046},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1536584166067},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1536584080794},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1536584080747},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1536584080747},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"84c52b770260b1caefb36d63633f6e8503147f6a","modified":1536584080747},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1536584080747},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"574900cf640d912dd17077acfcc189c14ac26257","modified":1536588823159},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"ab65b67a21d5b626d3fc6b8d3e868d8d28c6771e","modified":1536584080748},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"e77a3475888f9618d0493f822f06c3a1aae015e9","modified":1536584080748},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1536584080748},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1536584080748},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1536584080748},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1536584080749},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1536584080749},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1536584080749},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1536584080749},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1536584080749},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1536584080749},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"1a510f995e665b28d85ba4d169b824276c40e4f3","modified":1536584080750},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"83683acfcc8157af7fb5168cf90106208da73043","modified":1536584080750},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1536584080750},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1536584080750},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"ae8d17ed5dca2d26215b2732e487dbd86939a812","modified":1536584080750},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1536584080750},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1536584080751},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1536584080751},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1536584080751},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1536584080751},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"549a8a0b5301d32acd86a97f17340cdfcd46fb63","modified":1536584080751},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1536584080751},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1536584080751},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1536584080752},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1536584080752},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1536584080752},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"beabdd85dcb6535ccd425c1abd8e6bf2c753fbdb","modified":1536584080752},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1536584080752},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"e18b90c97aaff027e795f5a0cb10476a71bf1c3a","modified":1536584080752},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1536584080753},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1536584080753},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1536584080753},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1536584080753},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1536584080753},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1536584080754},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"300a043497893710b0317d7848d78185ca3c74df","modified":1536590036540},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1536584080754},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1536584080754},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"cf2185a0ea170fd8450f592e859a6c941141e5ee","modified":1536584080755},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1536584080755},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1536584080755},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1536584080755},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1536584080755},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1536584080755},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1536584080756},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1536584080756},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1536584080756},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1536584080756},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1536584080756},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1536584080757},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1536584080757},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1536584080757},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1536584080757},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c18c91ab3c60169ebe654c80c968fd8458786a3","modified":1536584080757},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1536584080761},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1536584080761},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1536584080763},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1536584165887},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1536584165890},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1536584165935},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1536584165937},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1536584165939},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1536584165993},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1536584165994},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1536584165996},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1536584165998},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1536584166020},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1536584166021},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1536584165997},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1536584166043},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1536584166019},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1536584165890},{"_id":"themes/next/source/images/home-bk.jpg","hash":"5d5232dad22f57ff2739170fcca077e7d73424ce","modified":1536584080773},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1536584165937},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1536584166023},{"_id":"source/images/blog-header.jpg","hash":"efd918e7c1371855a67c81fe153efe31ed494904","modified":1536585532101}],"Category":[{"name":"基础知识/技能","_id":"cjlwefucn0004qbrt538j6bf5"},{"name":"杂记","_id":"cjlwefuct000bqbrtmajo2tm5"},{"name":"编码技能","_id":"cjlwefucu000fqbrtjal3oypf"},{"name":"我的开源项目","_id":"cjlwefuik000pqbrtook74o7s"}],"Data":[],"Page":[{"title":"categories","type":"categories","date":"2018-09-08T11:58:09.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: categories\ndate: 2018-09-08 19:58:09\n---\n","updated":"2018-09-10T12:40:52.216Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjlwefucj0001qbrtmhl2zqud","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","date":"2018-09-08T11:28:45.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\ndate: 2018-09-08 19:28:45\n---\n","updated":"2018-09-10T12:40:52.216Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjlwefucl0003qbrtbtr5mlgu","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"Git指令整理","description":"整理一些常用的 Git 指令","date":"2017-07-20T16:00:00.000Z","copyright":true,"photos":["images/git-goodness.gif"],"_content":"\n# GitHub创建仓库提示代码\n\n\techo \"# 项目名\" >> README.md\n\tgit init\n\tgit add README.md\n\tgit commit -m \"first commit\"\n\tgit remote add origin git@github.com:Leosocy/项目名.git\n\tgit push -u origin master\n\n若仓库存在直接push\n\n\tgit remote add origin git@github.com:Leosocy/test.git\n\tgit push -u origin master\n\n\n# 常用操作\n\n#### 创建仓库（初始化）\n\t在当前指定目录下创建\n\tgit init\n\t\n\t新建一个仓库目录\n\tgit init [project-name]\n\t\n\t克隆一个远程项目\n\tgit clone [url]\n\t\n#### 添加文件到缓存区\n\n\t添加所有变化的文件\n \tgit add .\n\n\t添加名称指定文件\n\tgit add text.txt\n\n#### 配置\n\n\t设置提交代码时的用户信息\n\tgit config [--global] user.name \"[name]\"\n\tgit config [--global] user.email \"[email address]\"\n\t\n\t\n#### 提交\n\t提交暂存区到仓库区\n\tgit commit -m \"msg\"\n\t\n\t# 提交暂存区的指定文件到仓库区\n\t$ git commit [file1] [file2] ... -m [message]\n\t\n\t# 提交工作区自上次commit之后的变化，直接到仓库区\n\t$ git commit -a\n\t\n\t# 提交时显示所有diff信息\n\t$ git commit -v\n\t\n\t# 使用一次新的commit，替代上一次提交\n\t# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\t$ git commit --amend -m [message]\n\t\n    # 重做上一次commit，并包括指定文件的新变化\n\t$ git commit --amend [file1] [file2] ...\n\t\n#### 远程同步\n\n\t# 下载远程仓库的所有变动\n\t$ git fetch [remote]\n\t\n\t# 显示所有远程仓库\n\t$ git remote -v\n\t\n\t# 显示某个远程仓库的信息\n\t$ git remote show [remote]\n\t\n\t# 增加一个新的远程仓库，并命名\n\t$ git remote add [shortname] [url]\n\t\n\t# 取回远程仓库的变化，并与本地分支合并\n\t$ git pull [remote] [branch]\n\t\n\t# 上传本地指定分支到远程仓库\n\t$ git push [remote] [branch]\n\t\n\t# 强行推送当前分支到远程仓库，即使有冲突\n\t$ git push [remote] --force\n\t\n\t# 推送所有分支到远程仓库\n\t$ git push [remote] --all\n\n\n\t\n#### 分支\n\n\t# 列出所有本地分支\n\t$ git branch\n\t\n\t# 列出所有远程分支\n\t$ git branch -r\n\t\n\t# 列出所有本地分支和远程分支\n\t$ git branch -a\n\t\n\t# 新建一个分支，但依然停留在当前分支\n\t$ git branch [branch-name]\n\t\n\t# 新建一个分支，并切换到该分支\n\t$ git checkout -b [branch]\n\t\n\t# 新建一个分支，指向指定commit\n\t$ git branch [branch] [commit]\n\t\n\t# 新建一个分支，与指定的远程分支建立追踪关系\n\t$ git branch --track [branch] [remote-branch]\n\t\n\t# 切换到指定分支，并更新工作区\n\t$ git checkout [branch-name]\n\t\n\t# 切换到上一个分支\n\t$ git checkout -\n\t\n\t# 建立追踪关系，在现有分支与指定的远程分支之间\n\t$ git branch --set-upstream [branch] [remote-branch]\n\t\n\t# 合并指定分支到当前分支\n\t$ git merge [branch]\n\t\n\t# 选择一个commit，合并进当前分支\n\t$ git cherry-pick [commit]\n\t\n\t# 删除分支\n\t$ git branch -d [branch-name]\n\t\n\t# 删除远程分支\n\t$ git push origin --delete [branch-name]\n\t$ git branch -dr [remote/branch]\n\t\n#### 标签Tags\n\n\t添加标签 在当前commit\n\tgit tag -a v1.0 -m 'xxx' \n\t\n\t添加标签 在指定commit\n\tgit tag v1.0 [commit]\n\t\n\t查看\n\tgit tag\n\t\n\t删除\n\tgit tag -d V1.0\n\t\n\t删除远程tag\n\tgit push origin :refs/tags/[tagName]\n\t\n\t推送\n\tgit push origin --tags\n\t\n\t拉取\n\tgit fetch origin tag V1.0\n\n\t新建一个分支，指向某个tag\n\tgit checkout -b [branch] [tag]\n\n#### 查看信息\n\n\t# 显示有变更的文件\n\t$ git status\n\t\n\t# 显示当前分支的版本历史\n\t$ git log\n\t\n\t# 显示commit历史，以及每次commit发生变更的文件\n\t$ git log --stat\n\t\n\t# 搜索提交历史，根据关键词\n\t$ git log -S [keyword]\n\t\n\t# 显示某个commit之后的所有变动，每个commit占据一行\n\t$ git log [tag] HEAD --pretty=format:%s\n\t\n\t# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n\t$ git log [tag] HEAD --grep feature\n\t\n\t# 显示某个文件的版本历史，包括文件改名\n\t$ git log --follow [file]\n\t$ git whatchanged [file]\n\t\n\t# 显示指定文件相关的每一次diff\n\t$ git log -p [file]\n\t\n\t# 显示过去5次提交\n\t$ git log -5 --pretty --oneline\n\t\n\t# 显示所有提交过的用户，按提交次数排序\n\t$ git shortlog -sn\n\t\n\t# 显示指定文件是什么人在什么时间修改过\n\t$ git blame [file]\n\t\n\t# 显示暂存区和工作区的差异\n\t$ git diff\n\t\n\t# 显示暂存区和上一个commit的差异\n\t$ git diff --cached [file]\n\t\n\t# 显示工作区与当前分支最新commit之间的差异\n\t$ git diff HEAD\n\t\n\t# 显示两次提交之间的差异\n\t$ git diff [first-branch]...[second-branch]\n\t\n\t# 显示今天你写了多少行代码\n\t$ git diff --shortstat \"@{0 day ago}\"\n\t\n\t# 显示某次提交的元数据和内容变化\n\t$ git show [commit]\n\t\n\t# 显示某次提交发生变化的文件\n\t$ git show --name-only [commit]\n\t\n\t# 显示某次提交时，某个文件的内容\n\t$ git show [commit]:[filename]\n\t\n\t# 显示当前分支的最近几次提交\n\t$ git reflog\n\t\n#### 撤销\n\t\n\t# 恢复暂存区的指定文件到工作区\n\t$ git checkout [file]\n\t\n\t# 恢复某个commit的指定文件到暂存区和工作区\n\t$ git checkout [commit] [file]\n\t\n\t# 恢复暂存区的所有文件到工作区\n\t$ git checkout .\n\t\n\t# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n\t$ git reset [file]\n\t\n\t# 重置暂存区与工作区，与上一次commit保持一致\n\t$ git reset --hard\n\t\n\t# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n\t$ git reset [commit]\n\t\n\t# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n\t$ git reset --hard [commit]\n\t\n\t# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n\t$ git reset --keep [commit]\n\t\n\t# 新建一个commit，用来撤销指定commit\n\t# 后者的所有变化都将被前者抵消，并且应用到当前分支\n\t$ git revert [commit]\n\t\n\t# 暂时将未提交的变化移除，稍后再移入\n\t$ git stash\n\t$ git stash pop\n\t\n#### 其他\n\n\t# 生成一个可供发布的压缩包\n\t$ git archives","source":"_posts/Git指令整理.md","raw":"---\nlayout: post\ntitle: Git指令整理\ndescription: 整理一些常用的 Git 指令\ndate: 2017-07-21\ncopyright: true\nphotos:\n  - images/git-goodness.gif\ntags:\n  - Git\ncategories:\n  - 基础知识/技能\n---\n\n# GitHub创建仓库提示代码\n\n\techo \"# 项目名\" >> README.md\n\tgit init\n\tgit add README.md\n\tgit commit -m \"first commit\"\n\tgit remote add origin git@github.com:Leosocy/项目名.git\n\tgit push -u origin master\n\n若仓库存在直接push\n\n\tgit remote add origin git@github.com:Leosocy/test.git\n\tgit push -u origin master\n\n\n# 常用操作\n\n#### 创建仓库（初始化）\n\t在当前指定目录下创建\n\tgit init\n\t\n\t新建一个仓库目录\n\tgit init [project-name]\n\t\n\t克隆一个远程项目\n\tgit clone [url]\n\t\n#### 添加文件到缓存区\n\n\t添加所有变化的文件\n \tgit add .\n\n\t添加名称指定文件\n\tgit add text.txt\n\n#### 配置\n\n\t设置提交代码时的用户信息\n\tgit config [--global] user.name \"[name]\"\n\tgit config [--global] user.email \"[email address]\"\n\t\n\t\n#### 提交\n\t提交暂存区到仓库区\n\tgit commit -m \"msg\"\n\t\n\t# 提交暂存区的指定文件到仓库区\n\t$ git commit [file1] [file2] ... -m [message]\n\t\n\t# 提交工作区自上次commit之后的变化，直接到仓库区\n\t$ git commit -a\n\t\n\t# 提交时显示所有diff信息\n\t$ git commit -v\n\t\n\t# 使用一次新的commit，替代上一次提交\n\t# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\t$ git commit --amend -m [message]\n\t\n    # 重做上一次commit，并包括指定文件的新变化\n\t$ git commit --amend [file1] [file2] ...\n\t\n#### 远程同步\n\n\t# 下载远程仓库的所有变动\n\t$ git fetch [remote]\n\t\n\t# 显示所有远程仓库\n\t$ git remote -v\n\t\n\t# 显示某个远程仓库的信息\n\t$ git remote show [remote]\n\t\n\t# 增加一个新的远程仓库，并命名\n\t$ git remote add [shortname] [url]\n\t\n\t# 取回远程仓库的变化，并与本地分支合并\n\t$ git pull [remote] [branch]\n\t\n\t# 上传本地指定分支到远程仓库\n\t$ git push [remote] [branch]\n\t\n\t# 强行推送当前分支到远程仓库，即使有冲突\n\t$ git push [remote] --force\n\t\n\t# 推送所有分支到远程仓库\n\t$ git push [remote] --all\n\n\n\t\n#### 分支\n\n\t# 列出所有本地分支\n\t$ git branch\n\t\n\t# 列出所有远程分支\n\t$ git branch -r\n\t\n\t# 列出所有本地分支和远程分支\n\t$ git branch -a\n\t\n\t# 新建一个分支，但依然停留在当前分支\n\t$ git branch [branch-name]\n\t\n\t# 新建一个分支，并切换到该分支\n\t$ git checkout -b [branch]\n\t\n\t# 新建一个分支，指向指定commit\n\t$ git branch [branch] [commit]\n\t\n\t# 新建一个分支，与指定的远程分支建立追踪关系\n\t$ git branch --track [branch] [remote-branch]\n\t\n\t# 切换到指定分支，并更新工作区\n\t$ git checkout [branch-name]\n\t\n\t# 切换到上一个分支\n\t$ git checkout -\n\t\n\t# 建立追踪关系，在现有分支与指定的远程分支之间\n\t$ git branch --set-upstream [branch] [remote-branch]\n\t\n\t# 合并指定分支到当前分支\n\t$ git merge [branch]\n\t\n\t# 选择一个commit，合并进当前分支\n\t$ git cherry-pick [commit]\n\t\n\t# 删除分支\n\t$ git branch -d [branch-name]\n\t\n\t# 删除远程分支\n\t$ git push origin --delete [branch-name]\n\t$ git branch -dr [remote/branch]\n\t\n#### 标签Tags\n\n\t添加标签 在当前commit\n\tgit tag -a v1.0 -m 'xxx' \n\t\n\t添加标签 在指定commit\n\tgit tag v1.0 [commit]\n\t\n\t查看\n\tgit tag\n\t\n\t删除\n\tgit tag -d V1.0\n\t\n\t删除远程tag\n\tgit push origin :refs/tags/[tagName]\n\t\n\t推送\n\tgit push origin --tags\n\t\n\t拉取\n\tgit fetch origin tag V1.0\n\n\t新建一个分支，指向某个tag\n\tgit checkout -b [branch] [tag]\n\n#### 查看信息\n\n\t# 显示有变更的文件\n\t$ git status\n\t\n\t# 显示当前分支的版本历史\n\t$ git log\n\t\n\t# 显示commit历史，以及每次commit发生变更的文件\n\t$ git log --stat\n\t\n\t# 搜索提交历史，根据关键词\n\t$ git log -S [keyword]\n\t\n\t# 显示某个commit之后的所有变动，每个commit占据一行\n\t$ git log [tag] HEAD --pretty=format:%s\n\t\n\t# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n\t$ git log [tag] HEAD --grep feature\n\t\n\t# 显示某个文件的版本历史，包括文件改名\n\t$ git log --follow [file]\n\t$ git whatchanged [file]\n\t\n\t# 显示指定文件相关的每一次diff\n\t$ git log -p [file]\n\t\n\t# 显示过去5次提交\n\t$ git log -5 --pretty --oneline\n\t\n\t# 显示所有提交过的用户，按提交次数排序\n\t$ git shortlog -sn\n\t\n\t# 显示指定文件是什么人在什么时间修改过\n\t$ git blame [file]\n\t\n\t# 显示暂存区和工作区的差异\n\t$ git diff\n\t\n\t# 显示暂存区和上一个commit的差异\n\t$ git diff --cached [file]\n\t\n\t# 显示工作区与当前分支最新commit之间的差异\n\t$ git diff HEAD\n\t\n\t# 显示两次提交之间的差异\n\t$ git diff [first-branch]...[second-branch]\n\t\n\t# 显示今天你写了多少行代码\n\t$ git diff --shortstat \"@{0 day ago}\"\n\t\n\t# 显示某次提交的元数据和内容变化\n\t$ git show [commit]\n\t\n\t# 显示某次提交发生变化的文件\n\t$ git show --name-only [commit]\n\t\n\t# 显示某次提交时，某个文件的内容\n\t$ git show [commit]:[filename]\n\t\n\t# 显示当前分支的最近几次提交\n\t$ git reflog\n\t\n#### 撤销\n\t\n\t# 恢复暂存区的指定文件到工作区\n\t$ git checkout [file]\n\t\n\t# 恢复某个commit的指定文件到暂存区和工作区\n\t$ git checkout [commit] [file]\n\t\n\t# 恢复暂存区的所有文件到工作区\n\t$ git checkout .\n\t\n\t# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n\t$ git reset [file]\n\t\n\t# 重置暂存区与工作区，与上一次commit保持一致\n\t$ git reset --hard\n\t\n\t# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n\t$ git reset [commit]\n\t\n\t# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n\t$ git reset --hard [commit]\n\t\n\t# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n\t$ git reset --keep [commit]\n\t\n\t# 新建一个commit，用来撤销指定commit\n\t# 后者的所有变化都将被前者抵消，并且应用到当前分支\n\t$ git revert [commit]\n\t\n\t# 暂时将未提交的变化移除，稍后再移入\n\t$ git stash\n\t$ git stash pop\n\t\n#### 其他\n\n\t# 生成一个可供发布的压缩包\n\t$ git archives","slug":"Git指令整理","published":1,"updated":"2018-09-10T13:18:10.437Z","comments":1,"link":"","_id":"cjlwefucg0000qbrtvrsnycih","content":"<h1 id=\"GitHub创建仓库提示代码\"><a href=\"#GitHub创建仓库提示代码\" class=\"headerlink\" title=\"GitHub创建仓库提示代码\"></a>GitHub创建仓库提示代码</h1><pre><code>echo &quot;# 项目名&quot; &gt;&gt; README.md\ngit init\ngit add README.md\ngit commit -m &quot;first commit&quot;\ngit remote add origin git@github.com:Leosocy/项目名.git\ngit push -u origin master\n</code></pre><p>若仓库存在直接push</p>\n<pre><code>git remote add origin git@github.com:Leosocy/test.git\ngit push -u origin master\n</code></pre><h1 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h1><h4 id=\"创建仓库（初始化）\"><a href=\"#创建仓库（初始化）\" class=\"headerlink\" title=\"创建仓库（初始化）\"></a>创建仓库（初始化）</h4><pre><code>在当前指定目录下创建\ngit init\n\n新建一个仓库目录\ngit init [project-name]\n\n克隆一个远程项目\ngit clone [url]\n</code></pre><h4 id=\"添加文件到缓存区\"><a href=\"#添加文件到缓存区\" class=\"headerlink\" title=\"添加文件到缓存区\"></a>添加文件到缓存区</h4><pre><code>添加所有变化的文件\n git add .\n\n添加名称指定文件\ngit add text.txt\n</code></pre><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><pre><code>设置提交代码时的用户信息\ngit config [--global] user.name &quot;[name]&quot;\ngit config [--global] user.email &quot;[email address]&quot;\n</code></pre><h4 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h4><pre><code>提交暂存区到仓库区\ngit commit -m &quot;msg&quot;\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n</code></pre><h4 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h4><pre><code># 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n</code></pre><h4 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h4><pre><code># 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n</code></pre><h4 id=\"标签Tags\"><a href=\"#标签Tags\" class=\"headerlink\" title=\"标签Tags\"></a>标签Tags</h4><pre><code>添加标签 在当前commit\ngit tag -a v1.0 -m &apos;xxx&apos; \n\n添加标签 在指定commit\ngit tag v1.0 [commit]\n\n查看\ngit tag\n\n删除\ngit tag -d V1.0\n\n删除远程tag\ngit push origin :refs/tags/[tagName]\n\n推送\ngit push origin --tags\n\n拉取\ngit fetch origin tag V1.0\n\n新建一个分支，指向某个tag\ngit checkout -b [branch] [tag]\n</code></pre><h4 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h4><pre><code># 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat &quot;@{0 day ago}&quot;\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n</code></pre><h4 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h4><pre><code># 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n</code></pre><h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><pre><code># 生成一个可供发布的压缩包\n$ git archives\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"GitHub创建仓库提示代码\"><a href=\"#GitHub创建仓库提示代码\" class=\"headerlink\" title=\"GitHub创建仓库提示代码\"></a>GitHub创建仓库提示代码</h1><pre><code>echo &quot;# 项目名&quot; &gt;&gt; README.md\ngit init\ngit add README.md\ngit commit -m &quot;first commit&quot;\ngit remote add origin git@github.com:Leosocy/项目名.git\ngit push -u origin master\n</code></pre><p>若仓库存在直接push</p>\n<pre><code>git remote add origin git@github.com:Leosocy/test.git\ngit push -u origin master\n</code></pre><h1 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h1><h4 id=\"创建仓库（初始化）\"><a href=\"#创建仓库（初始化）\" class=\"headerlink\" title=\"创建仓库（初始化）\"></a>创建仓库（初始化）</h4><pre><code>在当前指定目录下创建\ngit init\n\n新建一个仓库目录\ngit init [project-name]\n\n克隆一个远程项目\ngit clone [url]\n</code></pre><h4 id=\"添加文件到缓存区\"><a href=\"#添加文件到缓存区\" class=\"headerlink\" title=\"添加文件到缓存区\"></a>添加文件到缓存区</h4><pre><code>添加所有变化的文件\n git add .\n\n添加名称指定文件\ngit add text.txt\n</code></pre><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><pre><code>设置提交代码时的用户信息\ngit config [--global] user.name &quot;[name]&quot;\ngit config [--global] user.email &quot;[email address]&quot;\n</code></pre><h4 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h4><pre><code>提交暂存区到仓库区\ngit commit -m &quot;msg&quot;\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n</code></pre><h4 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h4><pre><code># 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n</code></pre><h4 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h4><pre><code># 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n</code></pre><h4 id=\"标签Tags\"><a href=\"#标签Tags\" class=\"headerlink\" title=\"标签Tags\"></a>标签Tags</h4><pre><code>添加标签 在当前commit\ngit tag -a v1.0 -m &apos;xxx&apos; \n\n添加标签 在指定commit\ngit tag v1.0 [commit]\n\n查看\ngit tag\n\n删除\ngit tag -d V1.0\n\n删除远程tag\ngit push origin :refs/tags/[tagName]\n\n推送\ngit push origin --tags\n\n拉取\ngit fetch origin tag V1.0\n\n新建一个分支，指向某个tag\ngit checkout -b [branch] [tag]\n</code></pre><h4 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h4><pre><code># 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat &quot;@{0 day ago}&quot;\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n</code></pre><h4 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h4><pre><code># 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n</code></pre><h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><pre><code># 生成一个可供发布的压缩包\n$ git archives\n</code></pre>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Sep 10 2018 21:18:10 GMT+0800 (中国标准时间)","title":"Git指令整理","path":"Git指令整理/","eyeCatchImage":null,"excerpt":"整理一些常用的 Git 指令","date":"2017-07-20T16:00:00.000Z","pv":0,"totalPV":0,"categories":"基础知识/技能","tags":["Git"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"layout":"post","title":"Markdown认识与入门","date":"2017-07-10T16:00:00.000Z","copyright":true,"photos":["images/markdown-syntax-language.png"],"_content":"\n# <hw id=\"1\">一、认识Markdown</h2>\n\nMarkdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了。\n\n<!-- more -->\n\nMarkdown优点。\n\n- 不用关心排版，让你更注重文字。\n- 语法简单，易读写。\n- 纯文本，兼容所有的文本编辑器。\n\n# 二、Markdown语法\n\n### 1.标题\n\n- 用#表示  \n\n#可以表示最高6级标题，#的数量对应标题的级数。  \n# 一级标题\n## 二级标题\n\n### 2.引用  \n在要引用块的句首添加>符号\n\n> 这是引用  \n\n引用是可以嵌套的  \n\n> 这是外层\n  >>这是内层\n  \n### 3.列表\n#### 3.1无序列表  \n\n无序列表使用*、+或者-作为列表的标记（注意要在这些符号后面加上空格）\n+ 一\n* 二\n- 三\n\n#### 3.2 有序列表\n\n有序列表使用 数字+.+空格作为列表的标记，而且数字并不决定列表的顺序\n\n1. 一\n2. 二\n8. 三\n\n\n####3.3 无序列表中插入有序列表\n\n* 菜单一\n  1. 子菜单1\n  5. 子菜单2\n* 菜单二\n\n#### 3.3 列表中插入其他元素\n\n列表中有引用\n1. 列表中的引用\n    > 这是列表中的引用\n\n列表中有代码块\n1. 列表中的代码块\n    ```C\n\tprintf( \"%s\", \"This is code inside list. \" );\n\t```\n\n列表中有列表\n1. 列表1\n    - 列表2\n\t\n### 4.代码块\n\n用一个反引号`加载一行代码  \n\n`printf( \"%s\", \"Use single load one line code. \" )`\n\n用三个反引号包含一段代码\n\n```C\nprintf( \"%s\", \"Code line one.\" );\nprintf( \"%s\", \"Code line two.\" );\n```\n\n\n### 5.链接\n#### 5.1图片链接\n\n使用`![图片解释文字](图片地址)`加载一幅图片\n\n![图片解释](https://i.loli.net/2017/07/12/5966274890d20.png)\n\n改变图片的大小并居中\n\n```html\n<img src=\"url\" width=\"x\" height=\"y\" align=center>\n```\n\n#### 5.2网页链接\n\n使用`[链接文字](网页地址)`创建一个网页链接\n\n[Github](https://github.com)\n\n### 6.强调\n\n斜体`*斜体*`\n\n*我是斜体*\n\n粗体`**粗体**`\n\n**我是粗体**\n\n粗提+斜体`***粗体+斜体***`\n\n***我是粗体+斜体***`\n\n删除线`~~删除我~~`\n\n~~删除我~~\n\n### 7.表格\n\n在第二列中，冒号在左面表明左对齐，在右面表明右对齐，两边都有表明居中。默认左居中。\n\n```\n|姓名|部门|\n|:--:|:--:|\n|张三|无线|\n```\n\n|姓名|部门|\n|:--:|:--:|\n|张三|无线|\n\n### 8.Some Tips\n\n#### 结束先前的格式状态\n\n在改变格式时，添加一个空行。\n\n### 9.页内跳转\n\n1. 设置跳转点 `[标签](#地址)`\n1. 设置锚点 `<h2 id=\"地址\">内容</h2>`\n\ne.g.\n\n[跳转到示例](#9.1)\n\n<h2 id=\"9.1\">跳转到这</h2>\n\n> 跳转点和锚点均支持Markdown的其他语法\n\n#### [跳转到 ***认识Markdown***](#1)\n","source":"_posts/Markdown入门.md","raw":"---\nlayout: post\ntitle: Markdown认识与入门\ndate: 2017-07-11\ncopyright: true\nphotos:\n  - images/markdown-syntax-language.png\ntags:\n  - Markdown\n  - 入门\ncategories:\n  - 基础知识/技能\n---\n\n# <hw id=\"1\">一、认识Markdown</h2>\n\nMarkdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了。\n\n<!-- more -->\n\nMarkdown优点。\n\n- 不用关心排版，让你更注重文字。\n- 语法简单，易读写。\n- 纯文本，兼容所有的文本编辑器。\n\n# 二、Markdown语法\n\n### 1.标题\n\n- 用#表示  \n\n#可以表示最高6级标题，#的数量对应标题的级数。  \n# 一级标题\n## 二级标题\n\n### 2.引用  \n在要引用块的句首添加>符号\n\n> 这是引用  \n\n引用是可以嵌套的  \n\n> 这是外层\n  >>这是内层\n  \n### 3.列表\n#### 3.1无序列表  \n\n无序列表使用*、+或者-作为列表的标记（注意要在这些符号后面加上空格）\n+ 一\n* 二\n- 三\n\n#### 3.2 有序列表\n\n有序列表使用 数字+.+空格作为列表的标记，而且数字并不决定列表的顺序\n\n1. 一\n2. 二\n8. 三\n\n\n####3.3 无序列表中插入有序列表\n\n* 菜单一\n  1. 子菜单1\n  5. 子菜单2\n* 菜单二\n\n#### 3.3 列表中插入其他元素\n\n列表中有引用\n1. 列表中的引用\n    > 这是列表中的引用\n\n列表中有代码块\n1. 列表中的代码块\n    ```C\n\tprintf( \"%s\", \"This is code inside list. \" );\n\t```\n\n列表中有列表\n1. 列表1\n    - 列表2\n\t\n### 4.代码块\n\n用一个反引号`加载一行代码  \n\n`printf( \"%s\", \"Use single load one line code. \" )`\n\n用三个反引号包含一段代码\n\n```C\nprintf( \"%s\", \"Code line one.\" );\nprintf( \"%s\", \"Code line two.\" );\n```\n\n\n### 5.链接\n#### 5.1图片链接\n\n使用`![图片解释文字](图片地址)`加载一幅图片\n\n![图片解释](https://i.loli.net/2017/07/12/5966274890d20.png)\n\n改变图片的大小并居中\n\n```html\n<img src=\"url\" width=\"x\" height=\"y\" align=center>\n```\n\n#### 5.2网页链接\n\n使用`[链接文字](网页地址)`创建一个网页链接\n\n[Github](https://github.com)\n\n### 6.强调\n\n斜体`*斜体*`\n\n*我是斜体*\n\n粗体`**粗体**`\n\n**我是粗体**\n\n粗提+斜体`***粗体+斜体***`\n\n***我是粗体+斜体***`\n\n删除线`~~删除我~~`\n\n~~删除我~~\n\n### 7.表格\n\n在第二列中，冒号在左面表明左对齐，在右面表明右对齐，两边都有表明居中。默认左居中。\n\n```\n|姓名|部门|\n|:--:|:--:|\n|张三|无线|\n```\n\n|姓名|部门|\n|:--:|:--:|\n|张三|无线|\n\n### 8.Some Tips\n\n#### 结束先前的格式状态\n\n在改变格式时，添加一个空行。\n\n### 9.页内跳转\n\n1. 设置跳转点 `[标签](#地址)`\n1. 设置锚点 `<h2 id=\"地址\">内容</h2>`\n\ne.g.\n\n[跳转到示例](#9.1)\n\n<h2 id=\"9.1\">跳转到这</h2>\n\n> 跳转点和锚点均支持Markdown的其他语法\n\n#### [跳转到 ***认识Markdown***](#1)\n","slug":"Markdown入门","published":1,"updated":"2018-09-10T13:18:13.171Z","comments":1,"link":"","_id":"cjlwefuck0002qbrto8fghd3x","content":"<h1 id=\"一、认识Markdown\"><a href=\"#一、认识Markdown\" class=\"headerlink\" title=\"一、认识Markdown\"></a><hw id=\"1\">一、认识Markdown</hw></h1><p>Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了。</p>\n<a id=\"more\"></a>\n<p>Markdown优点。</p>\n<ul>\n<li>不用关心排版，让你更注重文字。</li>\n<li>语法简单，易读写。</li>\n<li>纯文本，兼容所有的文本编辑器。</li>\n</ul>\n<h1 id=\"二、Markdown语法\"><a href=\"#二、Markdown语法\" class=\"headerlink\" title=\"二、Markdown语法\"></a>二、Markdown语法</h1><h3 id=\"1-标题\"><a href=\"#1-标题\" class=\"headerlink\" title=\"1.标题\"></a>1.标题</h3><ul>\n<li>用#表示  </li>\n</ul>\n<p>#可以表示最高6级标题，#的数量对应标题的级数。  </p>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"2-引用\"><a href=\"#2-引用\" class=\"headerlink\" title=\"2.引用\"></a>2.引用</h3><p>在要引用块的句首添加&gt;符号</p>\n<blockquote>\n<p>这是引用  </p>\n</blockquote>\n<p>引用是可以嵌套的  </p>\n<blockquote>\n<p>这是外层</p>\n<blockquote>\n<p>这是内层</p>\n</blockquote>\n</blockquote>\n<h3 id=\"3-列表\"><a href=\"#3-列表\" class=\"headerlink\" title=\"3.列表\"></a>3.列表</h3><h4 id=\"3-1无序列表\"><a href=\"#3-1无序列表\" class=\"headerlink\" title=\"3.1无序列表\"></a>3.1无序列表</h4><p>无序列表使用*、+或者-作为列表的标记（注意要在这些符号后面加上空格）</p>\n<ul>\n<li>一</li>\n</ul>\n<ul>\n<li>二</li>\n</ul>\n<ul>\n<li>三</li>\n</ul>\n<h4 id=\"3-2-有序列表\"><a href=\"#3-2-有序列表\" class=\"headerlink\" title=\"3.2 有序列表\"></a>3.2 有序列表</h4><p>有序列表使用 数字+.+空格作为列表的标记，而且数字并不决定列表的顺序</p>\n<ol>\n<li>一</li>\n<li>二</li>\n<li>三</li>\n</ol>\n<p>####3.3 无序列表中插入有序列表</p>\n<ul>\n<li>菜单一<ol>\n<li>子菜单1</li>\n<li>子菜单2</li>\n</ol>\n</li>\n<li>菜单二</li>\n</ul>\n<h4 id=\"3-3-列表中插入其他元素\"><a href=\"#3-3-列表中插入其他元素\" class=\"headerlink\" title=\"3.3 列表中插入其他元素\"></a>3.3 列表中插入其他元素</h4><p>列表中有引用</p>\n<ol>\n<li>列表中的引用<blockquote>\n<p>这是列表中的引用</p>\n</blockquote>\n</li>\n</ol>\n<p>列表中有代码块</p>\n<ol>\n<li>列表中的代码块 <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>( <span class=\"string\">\"%s\"</span>, <span class=\"string\">\"This is code inside list. \"</span> );</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>列表中有列表</p>\n<ol>\n<li>列表1<ul>\n<li>列表2</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4-代码块\"><a href=\"#4-代码块\" class=\"headerlink\" title=\"4.代码块\"></a>4.代码块</h3><p>用一个反引号`加载一行代码  </p>\n<p><code>printf( &quot;%s&quot;, &quot;Use single load one line code. &quot; )</code></p>\n<p>用三个反引号包含一段代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>( <span class=\"string\">\"%s\"</span>, <span class=\"string\">\"Code line one.\"</span> );</span><br><span class=\"line\"><span class=\"built_in\">printf</span>( <span class=\"string\">\"%s\"</span>, <span class=\"string\">\"Code line two.\"</span> );</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-链接\"><a href=\"#5-链接\" class=\"headerlink\" title=\"5.链接\"></a>5.链接</h3><h4 id=\"5-1图片链接\"><a href=\"#5-1图片链接\" class=\"headerlink\" title=\"5.1图片链接\"></a>5.1图片链接</h4><p>使用<code>![图片解释文字](图片地址)</code>加载一幅图片</p>\n<p><img src=\"https://i.loli.net/2017/07/12/5966274890d20.png\" alt=\"图片解释\"></p>\n<p>改变图片的大小并居中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"x\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"y\"</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-2网页链接\"><a href=\"#5-2网页链接\" class=\"headerlink\" title=\"5.2网页链接\"></a>5.2网页链接</h4><p>使用<code>[链接文字](网页地址)</code>创建一个网页链接</p>\n<p><a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<h3 id=\"6-强调\"><a href=\"#6-强调\" class=\"headerlink\" title=\"6.强调\"></a>6.强调</h3><p>斜体<code>*斜体*</code></p>\n<p><em>我是斜体</em></p>\n<p>粗体<code>**粗体**</code></p>\n<p><strong>我是粗体</strong></p>\n<p>粗提+斜体<code>***粗体+斜体***</code></p>\n<p><strong><em>我是粗体+斜体</em></strong>`</p>\n<p>删除线<code>~~删除我~~</code></p>\n<p><del>删除我</del></p>\n<h3 id=\"7-表格\"><a href=\"#7-表格\" class=\"headerlink\" title=\"7.表格\"></a>7.表格</h3><p>在第二列中，冒号在左面表明左对齐，在右面表明右对齐，两边都有表明居中。默认左居中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|姓名|部门|</span><br><span class=\"line\">|:--:|:--:|</span><br><span class=\"line\">|张三|无线|</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">姓名</th>\n<th style=\"text-align:center\">部门</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">张三</td>\n<td style=\"text-align:center\">无线</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"8-Some-Tips\"><a href=\"#8-Some-Tips\" class=\"headerlink\" title=\"8.Some Tips\"></a>8.Some Tips</h3><h4 id=\"结束先前的格式状态\"><a href=\"#结束先前的格式状态\" class=\"headerlink\" title=\"结束先前的格式状态\"></a>结束先前的格式状态</h4><p>在改变格式时，添加一个空行。</p>\n<h3 id=\"9-页内跳转\"><a href=\"#9-页内跳转\" class=\"headerlink\" title=\"9.页内跳转\"></a>9.页内跳转</h3><ol>\n<li>设置跳转点 <code>[标签](#地址)</code></li>\n<li>设置锚点 <code>&lt;h2 id=&quot;地址&quot;&gt;内容&lt;/h2&gt;</code></li>\n</ol>\n<p>e.g.</p>\n<p><a href=\"#9.1\">跳转到示例</a></p>\n<h2 id=\"9.1\">跳转到这</h2>\n\n<blockquote>\n<p>跳转点和锚点均支持Markdown的其他语法</p>\n</blockquote>\n<h4 id=\"跳转到-认识Markdown\"><a href=\"#跳转到-认识Markdown\" class=\"headerlink\" title=\"跳转到 认识Markdown\"></a><a href=\"#1\">跳转到 <strong><em>认识Markdown</em></strong></a></h4>","site":{"data":{}},"excerpt":"<h1 id=\"一、认识Markdown\"><a href=\"#一、认识Markdown\" class=\"headerlink\" title=\"一、认识Markdown\"></a><hw id=\"1\">一、认识Markdown</hw></h1><p>Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了。</p>","more":"<p>Markdown优点。</p>\n<ul>\n<li>不用关心排版，让你更注重文字。</li>\n<li>语法简单，易读写。</li>\n<li>纯文本，兼容所有的文本编辑器。</li>\n</ul>\n<h1 id=\"二、Markdown语法\"><a href=\"#二、Markdown语法\" class=\"headerlink\" title=\"二、Markdown语法\"></a>二、Markdown语法</h1><h3 id=\"1-标题\"><a href=\"#1-标题\" class=\"headerlink\" title=\"1.标题\"></a>1.标题</h3><ul>\n<li>用#表示  </li>\n</ul>\n<p>#可以表示最高6级标题，#的数量对应标题的级数。  </p>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"2-引用\"><a href=\"#2-引用\" class=\"headerlink\" title=\"2.引用\"></a>2.引用</h3><p>在要引用块的句首添加&gt;符号</p>\n<blockquote>\n<p>这是引用  </p>\n</blockquote>\n<p>引用是可以嵌套的  </p>\n<blockquote>\n<p>这是外层</p>\n<blockquote>\n<p>这是内层</p>\n</blockquote>\n</blockquote>\n<h3 id=\"3-列表\"><a href=\"#3-列表\" class=\"headerlink\" title=\"3.列表\"></a>3.列表</h3><h4 id=\"3-1无序列表\"><a href=\"#3-1无序列表\" class=\"headerlink\" title=\"3.1无序列表\"></a>3.1无序列表</h4><p>无序列表使用*、+或者-作为列表的标记（注意要在这些符号后面加上空格）</p>\n<ul>\n<li>一</li>\n</ul>\n<ul>\n<li>二</li>\n</ul>\n<ul>\n<li>三</li>\n</ul>\n<h4 id=\"3-2-有序列表\"><a href=\"#3-2-有序列表\" class=\"headerlink\" title=\"3.2 有序列表\"></a>3.2 有序列表</h4><p>有序列表使用 数字+.+空格作为列表的标记，而且数字并不决定列表的顺序</p>\n<ol>\n<li>一</li>\n<li>二</li>\n<li>三</li>\n</ol>\n<p>####3.3 无序列表中插入有序列表</p>\n<ul>\n<li>菜单一<ol>\n<li>子菜单1</li>\n<li>子菜单2</li>\n</ol>\n</li>\n<li>菜单二</li>\n</ul>\n<h4 id=\"3-3-列表中插入其他元素\"><a href=\"#3-3-列表中插入其他元素\" class=\"headerlink\" title=\"3.3 列表中插入其他元素\"></a>3.3 列表中插入其他元素</h4><p>列表中有引用</p>\n<ol>\n<li>列表中的引用<blockquote>\n<p>这是列表中的引用</p>\n</blockquote>\n</li>\n</ol>\n<p>列表中有代码块</p>\n<ol>\n<li>列表中的代码块 <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>( <span class=\"string\">\"%s\"</span>, <span class=\"string\">\"This is code inside list. \"</span> );</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>列表中有列表</p>\n<ol>\n<li>列表1<ul>\n<li>列表2</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4-代码块\"><a href=\"#4-代码块\" class=\"headerlink\" title=\"4.代码块\"></a>4.代码块</h3><p>用一个反引号`加载一行代码  </p>\n<p><code>printf( &quot;%s&quot;, &quot;Use single load one line code. &quot; )</code></p>\n<p>用三个反引号包含一段代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>( <span class=\"string\">\"%s\"</span>, <span class=\"string\">\"Code line one.\"</span> );</span><br><span class=\"line\"><span class=\"built_in\">printf</span>( <span class=\"string\">\"%s\"</span>, <span class=\"string\">\"Code line two.\"</span> );</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-链接\"><a href=\"#5-链接\" class=\"headerlink\" title=\"5.链接\"></a>5.链接</h3><h4 id=\"5-1图片链接\"><a href=\"#5-1图片链接\" class=\"headerlink\" title=\"5.1图片链接\"></a>5.1图片链接</h4><p>使用<code>![图片解释文字](图片地址)</code>加载一幅图片</p>\n<p><img src=\"https://i.loli.net/2017/07/12/5966274890d20.png\" alt=\"图片解释\"></p>\n<p>改变图片的大小并居中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"x\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"y\"</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-2网页链接\"><a href=\"#5-2网页链接\" class=\"headerlink\" title=\"5.2网页链接\"></a>5.2网页链接</h4><p>使用<code>[链接文字](网页地址)</code>创建一个网页链接</p>\n<p><a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<h3 id=\"6-强调\"><a href=\"#6-强调\" class=\"headerlink\" title=\"6.强调\"></a>6.强调</h3><p>斜体<code>*斜体*</code></p>\n<p><em>我是斜体</em></p>\n<p>粗体<code>**粗体**</code></p>\n<p><strong>我是粗体</strong></p>\n<p>粗提+斜体<code>***粗体+斜体***</code></p>\n<p><strong><em>我是粗体+斜体</em></strong>`</p>\n<p>删除线<code>~~删除我~~</code></p>\n<p><del>删除我</del></p>\n<h3 id=\"7-表格\"><a href=\"#7-表格\" class=\"headerlink\" title=\"7.表格\"></a>7.表格</h3><p>在第二列中，冒号在左面表明左对齐，在右面表明右对齐，两边都有表明居中。默认左居中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|姓名|部门|</span><br><span class=\"line\">|:--:|:--:|</span><br><span class=\"line\">|张三|无线|</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">姓名</th>\n<th style=\"text-align:center\">部门</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">张三</td>\n<td style=\"text-align:center\">无线</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"8-Some-Tips\"><a href=\"#8-Some-Tips\" class=\"headerlink\" title=\"8.Some Tips\"></a>8.Some Tips</h3><h4 id=\"结束先前的格式状态\"><a href=\"#结束先前的格式状态\" class=\"headerlink\" title=\"结束先前的格式状态\"></a>结束先前的格式状态</h4><p>在改变格式时，添加一个空行。</p>\n<h3 id=\"9-页内跳转\"><a href=\"#9-页内跳转\" class=\"headerlink\" title=\"9.页内跳转\"></a>9.页内跳转</h3><ol>\n<li>设置跳转点 <code>[标签](#地址)</code></li>\n<li>设置锚点 <code>&lt;h2 id=&quot;地址&quot;&gt;内容&lt;/h2&gt;</code></li>\n</ol>\n<p>e.g.</p>\n<p><a href=\"#9.1\">跳转到示例</a></p>\n<h2 id=\"9.1\">跳转到这</h2>\n\n<blockquote>\n<p>跳转点和锚点均支持Markdown的其他语法</p>\n</blockquote>\n<h4 id=\"跳转到-认识Markdown\"><a href=\"#跳转到-认识Markdown\" class=\"headerlink\" title=\"跳转到 认识Markdown\"></a><a href=\"#1\">跳转到 <strong><em>认识Markdown</em></strong></a></h4>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Sep 10 2018 21:18:13 GMT+0800 (中国标准时间)","title":"Markdown认识与入门","path":"Markdown入门/","eyeCatchImage":null,"excerpt":"<h1 id=\"一、认识Markdown\"><a href=\"#一、认识Markdown\" class=\"headerlink\" title=\"一、认识Markdown\"></a><hw id=\"1\">一、认识Markdown</hw></h1><p>Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了。</p>","date":"2017-07-10T16:00:00.000Z","pv":0,"totalPV":0,"categories":"基础知识/技能","tags":["Markdown","入门"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"layout":"post","title":"源计划——重启博客","date":"2018-09-10T13:10:48.000Z","photos":["images/blog-header.jpg"],"_content":"\n# 博客的新家\n\n折腾了一个周末，终于把原来博客的老窝翻新了一遍。心里暗自安慰自己，以前好久不写博文就是因为原来的博客样式太丑了，恩，一定是因为这个。\n\n<!-- more -->\n\n博客翻新的过程就不在这里赘述了，总的来说就是google几篇[hexo](https://hexo.io/zh-cn/docs/)教程，选一个自己喜欢的themes。然后找几个做的比较好的博客，`F12`看一下源码，照着改一改就好了。\n\n既然有了新家，就应该改头换面，重新。。。奋发图强！所以，我决定即日起，把平常学习、实践的一些总结，记录在博客上，一方面由于我的记性比较差，记录下来可以供自己以后温故知新，另一方面可以给有相同需求/疑问的coder们一点点参考。\n\n希望能通过博客，结实更多的技术大拿。也希望自己可以通过博客给自己的技术多充充电！\n","source":"_posts/源计划——重启博客.md","raw":"---\nlayout: post\ntitle: 源计划——重启博客\ndate: 2018-09-10 21:10:48\nphotos:\n  - images/blog-header.jpg\ntags:\ncategories:\n  - 杂记\n---\n\n# 博客的新家\n\n折腾了一个周末，终于把原来博客的老窝翻新了一遍。心里暗自安慰自己，以前好久不写博文就是因为原来的博客样式太丑了，恩，一定是因为这个。\n\n<!-- more -->\n\n博客翻新的过程就不在这里赘述了，总的来说就是google几篇[hexo](https://hexo.io/zh-cn/docs/)教程，选一个自己喜欢的themes。然后找几个做的比较好的博客，`F12`看一下源码，照着改一改就好了。\n\n既然有了新家，就应该改头换面，重新。。。奋发图强！所以，我决定即日起，把平常学习、实践的一些总结，记录在博客上，一方面由于我的记性比较差，记录下来可以供自己以后温故知新，另一方面可以给有相同需求/疑问的coder们一点点参考。\n\n希望能通过博客，结实更多的技术大拿。也希望自己可以通过博客给自己的技术多充充电！\n","slug":"源计划——重启博客","published":1,"updated":"2018-09-10T13:44:10.878Z","comments":1,"link":"","_id":"cjlwefuco0006qbrtu26bbmcv","content":"<h1 id=\"博客的新家\"><a href=\"#博客的新家\" class=\"headerlink\" title=\"博客的新家\"></a>博客的新家</h1><p>折腾了一个周末，终于把原来博客的老窝翻新了一遍。心里暗自安慰自己，以前好久不写博文就是因为原来的博客样式太丑了，恩，一定是因为这个。</p>\n<a id=\"more\"></a>\n<p>博客翻新的过程就不在这里赘述了，总的来说就是google几篇<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">hexo</a>教程，选一个自己喜欢的themes。然后找几个做的比较好的博客，<code>F12</code>看一下源码，照着改一改就好了。</p>\n<p>既然有了新家，就应该改头换面，重新。。。奋发图强！所以，我决定即日起，把平常学习、实践的一些总结，记录在博客上，一方面由于我的记性比较差，记录下来可以供自己以后温故知新，另一方面可以给有相同需求/疑问的coder们一点点参考。</p>\n<p>希望能通过博客，结实更多的技术大拿。也希望自己可以通过博客给自己的技术多充充电！</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"博客的新家\"><a href=\"#博客的新家\" class=\"headerlink\" title=\"博客的新家\"></a>博客的新家</h1><p>折腾了一个周末，终于把原来博客的老窝翻新了一遍。心里暗自安慰自己，以前好久不写博文就是因为原来的博客样式太丑了，恩，一定是因为这个。</p>","more":"<p>博客翻新的过程就不在这里赘述了，总的来说就是google几篇<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">hexo</a>教程，选一个自己喜欢的themes。然后找几个做的比较好的博客，<code>F12</code>看一下源码，照着改一改就好了。</p>\n<p>既然有了新家，就应该改头换面，重新。。。奋发图强！所以，我决定即日起，把平常学习、实践的一些总结，记录在博客上，一方面由于我的记性比较差，记录下来可以供自己以后温故知新，另一方面可以给有相同需求/疑问的coder们一点点参考。</p>\n<p>希望能通过博客，结实更多的技术大拿。也希望自己可以通过博客给自己的技术多充充电！</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Sep 10 2018 21:44:10 GMT+0800 (中国标准时间)","title":"源计划——重启博客","path":"源计划——重启博客/","eyeCatchImage":null,"excerpt":"<h1 id=\"博客的新家\"><a href=\"#博客的新家\" class=\"headerlink\" title=\"博客的新家\"></a>博客的新家</h1><p>折腾了一个周末，终于把原来博客的老窝翻新了一遍。心里暗自安慰自己，以前好久不写博文就是因为原来的博客样式太丑了，恩，一定是因为这个。</p>","date":"2018-09-10T13:10:48.000Z","pv":0,"totalPV":0,"categories":"杂记","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"layout":"post","title":"设计模式Python实现","date":"2018-05-27T16:00:00.000Z","copyright":true,"photos":["images/design-pattern.jpg"],"_content":"\n> 最近找到了一篇容易理解的关于设计模式的文章，比较深刻地讲解了设计模式 [史上最全设计模式导学目录（完整版）](https://blog.csdn.net/lovelion/article/details/17517213)。 为了加深自己对设计模式的理解，同时熟悉Python面向对象编程的技巧，遂写下此篇文章，记录每种设计模式对应的一个练习题，并附上Python代码实现。\n\n<!-- more -->\n\n## 简单工厂模式-Simple Factory Pattern\n\n#### 问题背景\n\nXX软件公司欲基于Python语言开发一套图表库，该图表库可以为应用系统提供各种不同外观的图表，例如柱状图、饼状图、折线图等。XX软件公司图表库设计人员希望为应用系统开发人员提供一套灵活易用的图表库，而且可以较为方便地对图表库进行扩展，以便能够在将来增加一些新类型的图表。\n\n#### 改进前\n\n```Python\nclass Chart(object):\n\n    def __init__(self, type):\n        self._type = type\n        if type.lower() == \"histogram\":\n            print(\"初始化柱状图\")\n        elif type.lower() == \"pie\":\n            print(\"初始化饼状图\")\n        elif type.lower() == \"line\":\n            print(\"初始化折线图\")\n\n    def display(self):\n        if self._type.lower() == \"histogram\":\n            print(\"显示柱状图\")\n        elif self._type.lower() == \"pie\":\n            print(\"显示化饼状图\")\n        elif self._type.lower() == \"line\":\n            print(\"显示化折线图\")\n\nif __name__ == '__main__':\n    histogram = Chart(\"histogram\")\n    histogram.display()\n```\n\n此实现存在以下几个问题：\n\n1. `init`函数和`display`函数中进行了大量的`if...else...`判断，并且均为重复代码\n1. Chart类既负责了所有种类图标的初始化，又负责了显示功能，违背了\"单一职责原则\"\n1. 如果需要新增一种图标的类型，需要修改Chart类的源码，违反了\"开闭原则\"\n\n#### 改进后\n\n```Python\nfrom abc import abstractmethod, ABCMeta\n\nclass Chart(metaclass=ABCMeta):\n    \"\"\"\n    \"\"\"\n\n    @abstractmethod\n    def __init__(self):\n        pass\n        \n    @abstractmethod\n    def display(self):\n        pass\n\n\nclass HistogramChart(Chart):\n    \"\"\"\n    \"\"\"\n\n    def __init__(self):\n        print(\"初始化柱状图\")\n\n    def display(self):\n        print(\"显示柱状图\")\n\n\nclass PieChart(Chart):\n    \"\"\"\n    \"\"\"\n\n    def __init__(self):\n        print(\"初始化饼状图\")\n\n    def display(self):\n        print(\"显示饼状图\")\n\n\nclass LineChart(Chart):\n    \"\"\"\n    \"\"\"\n\n    def __init__(self):\n        print(\"初始化折线图\")\n\n    def display(self):\n        print(\"显示折线图\")\n\nclass ChartFactory(object):\n    \n    @staticmethod\n    def create(chart_type):\n        for sc in Chart.__subclasses__():\n            if sc.__name__ == chart_type:\n                return sc()\n        return None\n\n\nif __name__ == '__main__':\n    chart = ChartFactory.create(\"HistogramChart\")\n    if chart:\n        chart.display()\n```\n\n此实现有以下优点：\n\n1. 不同种类的图标各司其职\n1. 利用Python的特性，省略了在工厂类中`if...else...`的判断，但是可能会增加使用复杂度，因为客户端要输入具体的类名\n1. 新增一种图表，不需要修改原有的代码\n\n## 工厂方法模式-Factory Method Pattern\n\n#### 问题背景\n\n# 问题描述\n\nXX软件公司欲开发一个系统运行日志记录器(Logger)，该记录器可以通过多种途径保存系统的运行日志，如通过文件记录或数据库记录，用户可以通过修改配置文件灵活地更换日志记录方式。在设计各类日志记录器时，Sunny公司的开发人员发现需要对日志记录器进行一些初始化工作，初始化参数的设置过程较为复杂，而且某些参数的设置有严格的先后次序，否则可能会发生记录失败。如何封装记录器的初始化过程并保证多种记录器切换的灵活性是XX公司开发人员面临的一个难题。\n\nXX公司的开发人员通过对该需求进行分析，发现该日志记录器有两个设计要点：\n\n- 需要封装日志记录器的初始化过程，这些初始化工作较为复杂，例如需要初始化其他相关的类，还有可能需要读取配置文件（例如连接数据库或创建文件），导致代码较长，如果将它们都写在构造函数中，会导致构造函数庞大，不利于代码的修改和维护；\n- 用户可能需要更换日志记录方式，在客户端代码中需要提供一种灵活的方式来选择日志记录器，尽量在不修改源代码的基础上更换或者增加日志记录方式。\n\n#### 改进前\n\n#### 改进后\n\n## 抽象工厂模式-Abstract Factory Pattern\n\n## 单例模式-Singleton Pattern\n\n## 原型模式-Prototype Pattern\n\n## 建造者模式-Builder Pattern\n\n## 适配器模式-Adapter Pattern\n\n## 桥接模式-Bridge Pattern\n\n## 组合模式-Composite Pattern\n\n## 装饰模式-Decorator Pattern\n\n## 外观模式-Facade Pattern\n\n## 享元模式-Flyweight Pattern\n\n## 代理模式-Proxy Pattern","source":"_posts/设计模式Python实现.md","raw":"---\nlayout: post\ntitle: 设计模式Python实现\ndate: 2018-05-28\ncopyright: true\nphotos:\n  - images/design-pattern.jpg\ntags:\n  - Python\n  - 设计模式\ncategories:\n  - 编码技能\n---\n\n> 最近找到了一篇容易理解的关于设计模式的文章，比较深刻地讲解了设计模式 [史上最全设计模式导学目录（完整版）](https://blog.csdn.net/lovelion/article/details/17517213)。 为了加深自己对设计模式的理解，同时熟悉Python面向对象编程的技巧，遂写下此篇文章，记录每种设计模式对应的一个练习题，并附上Python代码实现。\n\n<!-- more -->\n\n## 简单工厂模式-Simple Factory Pattern\n\n#### 问题背景\n\nXX软件公司欲基于Python语言开发一套图表库，该图表库可以为应用系统提供各种不同外观的图表，例如柱状图、饼状图、折线图等。XX软件公司图表库设计人员希望为应用系统开发人员提供一套灵活易用的图表库，而且可以较为方便地对图表库进行扩展，以便能够在将来增加一些新类型的图表。\n\n#### 改进前\n\n```Python\nclass Chart(object):\n\n    def __init__(self, type):\n        self._type = type\n        if type.lower() == \"histogram\":\n            print(\"初始化柱状图\")\n        elif type.lower() == \"pie\":\n            print(\"初始化饼状图\")\n        elif type.lower() == \"line\":\n            print(\"初始化折线图\")\n\n    def display(self):\n        if self._type.lower() == \"histogram\":\n            print(\"显示柱状图\")\n        elif self._type.lower() == \"pie\":\n            print(\"显示化饼状图\")\n        elif self._type.lower() == \"line\":\n            print(\"显示化折线图\")\n\nif __name__ == '__main__':\n    histogram = Chart(\"histogram\")\n    histogram.display()\n```\n\n此实现存在以下几个问题：\n\n1. `init`函数和`display`函数中进行了大量的`if...else...`判断，并且均为重复代码\n1. Chart类既负责了所有种类图标的初始化，又负责了显示功能，违背了\"单一职责原则\"\n1. 如果需要新增一种图标的类型，需要修改Chart类的源码，违反了\"开闭原则\"\n\n#### 改进后\n\n```Python\nfrom abc import abstractmethod, ABCMeta\n\nclass Chart(metaclass=ABCMeta):\n    \"\"\"\n    \"\"\"\n\n    @abstractmethod\n    def __init__(self):\n        pass\n        \n    @abstractmethod\n    def display(self):\n        pass\n\n\nclass HistogramChart(Chart):\n    \"\"\"\n    \"\"\"\n\n    def __init__(self):\n        print(\"初始化柱状图\")\n\n    def display(self):\n        print(\"显示柱状图\")\n\n\nclass PieChart(Chart):\n    \"\"\"\n    \"\"\"\n\n    def __init__(self):\n        print(\"初始化饼状图\")\n\n    def display(self):\n        print(\"显示饼状图\")\n\n\nclass LineChart(Chart):\n    \"\"\"\n    \"\"\"\n\n    def __init__(self):\n        print(\"初始化折线图\")\n\n    def display(self):\n        print(\"显示折线图\")\n\nclass ChartFactory(object):\n    \n    @staticmethod\n    def create(chart_type):\n        for sc in Chart.__subclasses__():\n            if sc.__name__ == chart_type:\n                return sc()\n        return None\n\n\nif __name__ == '__main__':\n    chart = ChartFactory.create(\"HistogramChart\")\n    if chart:\n        chart.display()\n```\n\n此实现有以下优点：\n\n1. 不同种类的图标各司其职\n1. 利用Python的特性，省略了在工厂类中`if...else...`的判断，但是可能会增加使用复杂度，因为客户端要输入具体的类名\n1. 新增一种图表，不需要修改原有的代码\n\n## 工厂方法模式-Factory Method Pattern\n\n#### 问题背景\n\n# 问题描述\n\nXX软件公司欲开发一个系统运行日志记录器(Logger)，该记录器可以通过多种途径保存系统的运行日志，如通过文件记录或数据库记录，用户可以通过修改配置文件灵活地更换日志记录方式。在设计各类日志记录器时，Sunny公司的开发人员发现需要对日志记录器进行一些初始化工作，初始化参数的设置过程较为复杂，而且某些参数的设置有严格的先后次序，否则可能会发生记录失败。如何封装记录器的初始化过程并保证多种记录器切换的灵活性是XX公司开发人员面临的一个难题。\n\nXX公司的开发人员通过对该需求进行分析，发现该日志记录器有两个设计要点：\n\n- 需要封装日志记录器的初始化过程，这些初始化工作较为复杂，例如需要初始化其他相关的类，还有可能需要读取配置文件（例如连接数据库或创建文件），导致代码较长，如果将它们都写在构造函数中，会导致构造函数庞大，不利于代码的修改和维护；\n- 用户可能需要更换日志记录方式，在客户端代码中需要提供一种灵活的方式来选择日志记录器，尽量在不修改源代码的基础上更换或者增加日志记录方式。\n\n#### 改进前\n\n#### 改进后\n\n## 抽象工厂模式-Abstract Factory Pattern\n\n## 单例模式-Singleton Pattern\n\n## 原型模式-Prototype Pattern\n\n## 建造者模式-Builder Pattern\n\n## 适配器模式-Adapter Pattern\n\n## 桥接模式-Bridge Pattern\n\n## 组合模式-Composite Pattern\n\n## 装饰模式-Decorator Pattern\n\n## 外观模式-Facade Pattern\n\n## 享元模式-Flyweight Pattern\n\n## 代理模式-Proxy Pattern","slug":"设计模式Python实现","published":1,"updated":"2018-09-10T13:18:15.396Z","comments":1,"link":"","_id":"cjlwefucp0007qbrtviwe6bqv","content":"<blockquote>\n<p>最近找到了一篇容易理解的关于设计模式的文章，比较深刻地讲解了设计模式 <a href=\"https://blog.csdn.net/lovelion/article/details/17517213\" target=\"_blank\" rel=\"noopener\">史上最全设计模式导学目录（完整版）</a>。 为了加深自己对设计模式的理解，同时熟悉Python面向对象编程的技巧，遂写下此篇文章，记录每种设计模式对应的一个练习题，并附上Python代码实现。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"简单工厂模式-Simple-Factory-Pattern\"><a href=\"#简单工厂模式-Simple-Factory-Pattern\" class=\"headerlink\" title=\"简单工厂模式-Simple Factory Pattern\"></a>简单工厂模式-Simple Factory Pattern</h2><h4 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h4><p>XX软件公司欲基于Python语言开发一套图表库，该图表库可以为应用系统提供各种不同外观的图表，例如柱状图、饼状图、折线图等。XX软件公司图表库设计人员希望为应用系统开发人员提供一套灵活易用的图表库，而且可以较为方便地对图表库进行扩展，以便能够在将来增加一些新类型的图表。</p>\n<h4 id=\"改进前\"><a href=\"#改进前\" class=\"headerlink\" title=\"改进前\"></a>改进前</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chart</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, type)</span>:</span></span><br><span class=\"line\">        self._type = type</span><br><span class=\"line\">        <span class=\"keyword\">if</span> type.lower() == <span class=\"string\">\"histogram\"</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"初始化柱状图\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> type.lower() == <span class=\"string\">\"pie\"</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"初始化饼状图\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> type.lower() == <span class=\"string\">\"line\"</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"初始化折线图\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._type.lower() == <span class=\"string\">\"histogram\"</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"显示柱状图\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self._type.lower() == <span class=\"string\">\"pie\"</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"显示化饼状图\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self._type.lower() == <span class=\"string\">\"line\"</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"显示化折线图\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    histogram = Chart(<span class=\"string\">\"histogram\"</span>)</span><br><span class=\"line\">    histogram.display()</span><br></pre></td></tr></table></figure>\n<p>此实现存在以下几个问题：</p>\n<ol>\n<li><code>init</code>函数和<code>display</code>函数中进行了大量的<code>if...else...</code>判断，并且均为重复代码</li>\n<li>Chart类既负责了所有种类图标的初始化，又负责了显示功能，违背了”单一职责原则”</li>\n<li>如果需要新增一种图标的类型，需要修改Chart类的源码，违反了”开闭原则”</li>\n</ol>\n<h4 id=\"改进后\"><a href=\"#改进后\" class=\"headerlink\" title=\"改进后\"></a>改进后</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> abc <span class=\"keyword\">import</span> abstractmethod, ABCMeta</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chart</span><span class=\"params\">(metaclass=ABCMeta)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HistogramChart</span><span class=\"params\">(Chart)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"初始化柱状图\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"显示柱状图\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PieChart</span><span class=\"params\">(Chart)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"初始化饼状图\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"显示饼状图\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineChart</span><span class=\"params\">(Chart)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"初始化折线图\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"显示折线图\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChartFactory</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(chart_type)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> sc <span class=\"keyword\">in</span> Chart.__subclasses__():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> sc.__name__ == chart_type:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> sc()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    chart = ChartFactory.create(<span class=\"string\">\"HistogramChart\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> chart:</span><br><span class=\"line\">        chart.display()</span><br></pre></td></tr></table></figure>\n<p>此实现有以下优点：</p>\n<ol>\n<li>不同种类的图标各司其职</li>\n<li>利用Python的特性，省略了在工厂类中<code>if...else...</code>的判断，但是可能会增加使用复杂度，因为客户端要输入具体的类名</li>\n<li>新增一种图表，不需要修改原有的代码</li>\n</ol>\n<h2 id=\"工厂方法模式-Factory-Method-Pattern\"><a href=\"#工厂方法模式-Factory-Method-Pattern\" class=\"headerlink\" title=\"工厂方法模式-Factory Method Pattern\"></a>工厂方法模式-Factory Method Pattern</h2><h4 id=\"问题背景-1\"><a href=\"#问题背景-1\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h4><h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>XX软件公司欲开发一个系统运行日志记录器(Logger)，该记录器可以通过多种途径保存系统的运行日志，如通过文件记录或数据库记录，用户可以通过修改配置文件灵活地更换日志记录方式。在设计各类日志记录器时，Sunny公司的开发人员发现需要对日志记录器进行一些初始化工作，初始化参数的设置过程较为复杂，而且某些参数的设置有严格的先后次序，否则可能会发生记录失败。如何封装记录器的初始化过程并保证多种记录器切换的灵活性是XX公司开发人员面临的一个难题。</p>\n<p>XX公司的开发人员通过对该需求进行分析，发现该日志记录器有两个设计要点：</p>\n<ul>\n<li>需要封装日志记录器的初始化过程，这些初始化工作较为复杂，例如需要初始化其他相关的类，还有可能需要读取配置文件（例如连接数据库或创建文件），导致代码较长，如果将它们都写在构造函数中，会导致构造函数庞大，不利于代码的修改和维护；</li>\n<li>用户可能需要更换日志记录方式，在客户端代码中需要提供一种灵活的方式来选择日志记录器，尽量在不修改源代码的基础上更换或者增加日志记录方式。</li>\n</ul>\n<h4 id=\"改进前-1\"><a href=\"#改进前-1\" class=\"headerlink\" title=\"改进前\"></a>改进前</h4><h4 id=\"改进后-1\"><a href=\"#改进后-1\" class=\"headerlink\" title=\"改进后\"></a>改进后</h4><h2 id=\"抽象工厂模式-Abstract-Factory-Pattern\"><a href=\"#抽象工厂模式-Abstract-Factory-Pattern\" class=\"headerlink\" title=\"抽象工厂模式-Abstract Factory Pattern\"></a>抽象工厂模式-Abstract Factory Pattern</h2><h2 id=\"单例模式-Singleton-Pattern\"><a href=\"#单例模式-Singleton-Pattern\" class=\"headerlink\" title=\"单例模式-Singleton Pattern\"></a>单例模式-Singleton Pattern</h2><h2 id=\"原型模式-Prototype-Pattern\"><a href=\"#原型模式-Prototype-Pattern\" class=\"headerlink\" title=\"原型模式-Prototype Pattern\"></a>原型模式-Prototype Pattern</h2><h2 id=\"建造者模式-Builder-Pattern\"><a href=\"#建造者模式-Builder-Pattern\" class=\"headerlink\" title=\"建造者模式-Builder Pattern\"></a>建造者模式-Builder Pattern</h2><h2 id=\"适配器模式-Adapter-Pattern\"><a href=\"#适配器模式-Adapter-Pattern\" class=\"headerlink\" title=\"适配器模式-Adapter Pattern\"></a>适配器模式-Adapter Pattern</h2><h2 id=\"桥接模式-Bridge-Pattern\"><a href=\"#桥接模式-Bridge-Pattern\" class=\"headerlink\" title=\"桥接模式-Bridge Pattern\"></a>桥接模式-Bridge Pattern</h2><h2 id=\"组合模式-Composite-Pattern\"><a href=\"#组合模式-Composite-Pattern\" class=\"headerlink\" title=\"组合模式-Composite Pattern\"></a>组合模式-Composite Pattern</h2><h2 id=\"装饰模式-Decorator-Pattern\"><a href=\"#装饰模式-Decorator-Pattern\" class=\"headerlink\" title=\"装饰模式-Decorator Pattern\"></a>装饰模式-Decorator Pattern</h2><h2 id=\"外观模式-Facade-Pattern\"><a href=\"#外观模式-Facade-Pattern\" class=\"headerlink\" title=\"外观模式-Facade Pattern\"></a>外观模式-Facade Pattern</h2><h2 id=\"享元模式-Flyweight-Pattern\"><a href=\"#享元模式-Flyweight-Pattern\" class=\"headerlink\" title=\"享元模式-Flyweight Pattern\"></a>享元模式-Flyweight Pattern</h2><h2 id=\"代理模式-Proxy-Pattern\"><a href=\"#代理模式-Proxy-Pattern\" class=\"headerlink\" title=\"代理模式-Proxy Pattern\"></a>代理模式-Proxy Pattern</h2>","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近找到了一篇容易理解的关于设计模式的文章，比较深刻地讲解了设计模式 <a href=\"https://blog.csdn.net/lovelion/article/details/17517213\" target=\"_blank\" rel=\"noopener\">史上最全设计模式导学目录（完整版）</a>。 为了加深自己对设计模式的理解，同时熟悉Python面向对象编程的技巧，遂写下此篇文章，记录每种设计模式对应的一个练习题，并附上Python代码实现。</p>\n</blockquote>","more":"<h2 id=\"简单工厂模式-Simple-Factory-Pattern\"><a href=\"#简单工厂模式-Simple-Factory-Pattern\" class=\"headerlink\" title=\"简单工厂模式-Simple Factory Pattern\"></a>简单工厂模式-Simple Factory Pattern</h2><h4 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h4><p>XX软件公司欲基于Python语言开发一套图表库，该图表库可以为应用系统提供各种不同外观的图表，例如柱状图、饼状图、折线图等。XX软件公司图表库设计人员希望为应用系统开发人员提供一套灵活易用的图表库，而且可以较为方便地对图表库进行扩展，以便能够在将来增加一些新类型的图表。</p>\n<h4 id=\"改进前\"><a href=\"#改进前\" class=\"headerlink\" title=\"改进前\"></a>改进前</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chart</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, type)</span>:</span></span><br><span class=\"line\">        self._type = type</span><br><span class=\"line\">        <span class=\"keyword\">if</span> type.lower() == <span class=\"string\">\"histogram\"</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"初始化柱状图\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> type.lower() == <span class=\"string\">\"pie\"</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"初始化饼状图\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> type.lower() == <span class=\"string\">\"line\"</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"初始化折线图\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._type.lower() == <span class=\"string\">\"histogram\"</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"显示柱状图\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self._type.lower() == <span class=\"string\">\"pie\"</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"显示化饼状图\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self._type.lower() == <span class=\"string\">\"line\"</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"显示化折线图\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    histogram = Chart(<span class=\"string\">\"histogram\"</span>)</span><br><span class=\"line\">    histogram.display()</span><br></pre></td></tr></table></figure>\n<p>此实现存在以下几个问题：</p>\n<ol>\n<li><code>init</code>函数和<code>display</code>函数中进行了大量的<code>if...else...</code>判断，并且均为重复代码</li>\n<li>Chart类既负责了所有种类图标的初始化，又负责了显示功能，违背了”单一职责原则”</li>\n<li>如果需要新增一种图标的类型，需要修改Chart类的源码，违反了”开闭原则”</li>\n</ol>\n<h4 id=\"改进后\"><a href=\"#改进后\" class=\"headerlink\" title=\"改进后\"></a>改进后</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> abc <span class=\"keyword\">import</span> abstractmethod, ABCMeta</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chart</span><span class=\"params\">(metaclass=ABCMeta)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HistogramChart</span><span class=\"params\">(Chart)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"初始化柱状图\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"显示柱状图\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PieChart</span><span class=\"params\">(Chart)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"初始化饼状图\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"显示饼状图\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineChart</span><span class=\"params\">(Chart)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"初始化折线图\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"显示折线图\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChartFactory</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(chart_type)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> sc <span class=\"keyword\">in</span> Chart.__subclasses__():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> sc.__name__ == chart_type:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> sc()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    chart = ChartFactory.create(<span class=\"string\">\"HistogramChart\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> chart:</span><br><span class=\"line\">        chart.display()</span><br></pre></td></tr></table></figure>\n<p>此实现有以下优点：</p>\n<ol>\n<li>不同种类的图标各司其职</li>\n<li>利用Python的特性，省略了在工厂类中<code>if...else...</code>的判断，但是可能会增加使用复杂度，因为客户端要输入具体的类名</li>\n<li>新增一种图表，不需要修改原有的代码</li>\n</ol>\n<h2 id=\"工厂方法模式-Factory-Method-Pattern\"><a href=\"#工厂方法模式-Factory-Method-Pattern\" class=\"headerlink\" title=\"工厂方法模式-Factory Method Pattern\"></a>工厂方法模式-Factory Method Pattern</h2><h4 id=\"问题背景-1\"><a href=\"#问题背景-1\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h4><h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>XX软件公司欲开发一个系统运行日志记录器(Logger)，该记录器可以通过多种途径保存系统的运行日志，如通过文件记录或数据库记录，用户可以通过修改配置文件灵活地更换日志记录方式。在设计各类日志记录器时，Sunny公司的开发人员发现需要对日志记录器进行一些初始化工作，初始化参数的设置过程较为复杂，而且某些参数的设置有严格的先后次序，否则可能会发生记录失败。如何封装记录器的初始化过程并保证多种记录器切换的灵活性是XX公司开发人员面临的一个难题。</p>\n<p>XX公司的开发人员通过对该需求进行分析，发现该日志记录器有两个设计要点：</p>\n<ul>\n<li>需要封装日志记录器的初始化过程，这些初始化工作较为复杂，例如需要初始化其他相关的类，还有可能需要读取配置文件（例如连接数据库或创建文件），导致代码较长，如果将它们都写在构造函数中，会导致构造函数庞大，不利于代码的修改和维护；</li>\n<li>用户可能需要更换日志记录方式，在客户端代码中需要提供一种灵活的方式来选择日志记录器，尽量在不修改源代码的基础上更换或者增加日志记录方式。</li>\n</ul>\n<h4 id=\"改进前-1\"><a href=\"#改进前-1\" class=\"headerlink\" title=\"改进前\"></a>改进前</h4><h4 id=\"改进后-1\"><a href=\"#改进后-1\" class=\"headerlink\" title=\"改进后\"></a>改进后</h4><h2 id=\"抽象工厂模式-Abstract-Factory-Pattern\"><a href=\"#抽象工厂模式-Abstract-Factory-Pattern\" class=\"headerlink\" title=\"抽象工厂模式-Abstract Factory Pattern\"></a>抽象工厂模式-Abstract Factory Pattern</h2><h2 id=\"单例模式-Singleton-Pattern\"><a href=\"#单例模式-Singleton-Pattern\" class=\"headerlink\" title=\"单例模式-Singleton Pattern\"></a>单例模式-Singleton Pattern</h2><h2 id=\"原型模式-Prototype-Pattern\"><a href=\"#原型模式-Prototype-Pattern\" class=\"headerlink\" title=\"原型模式-Prototype Pattern\"></a>原型模式-Prototype Pattern</h2><h2 id=\"建造者模式-Builder-Pattern\"><a href=\"#建造者模式-Builder-Pattern\" class=\"headerlink\" title=\"建造者模式-Builder Pattern\"></a>建造者模式-Builder Pattern</h2><h2 id=\"适配器模式-Adapter-Pattern\"><a href=\"#适配器模式-Adapter-Pattern\" class=\"headerlink\" title=\"适配器模式-Adapter Pattern\"></a>适配器模式-Adapter Pattern</h2><h2 id=\"桥接模式-Bridge-Pattern\"><a href=\"#桥接模式-Bridge-Pattern\" class=\"headerlink\" title=\"桥接模式-Bridge Pattern\"></a>桥接模式-Bridge Pattern</h2><h2 id=\"组合模式-Composite-Pattern\"><a href=\"#组合模式-Composite-Pattern\" class=\"headerlink\" title=\"组合模式-Composite Pattern\"></a>组合模式-Composite Pattern</h2><h2 id=\"装饰模式-Decorator-Pattern\"><a href=\"#装饰模式-Decorator-Pattern\" class=\"headerlink\" title=\"装饰模式-Decorator Pattern\"></a>装饰模式-Decorator Pattern</h2><h2 id=\"外观模式-Facade-Pattern\"><a href=\"#外观模式-Facade-Pattern\" class=\"headerlink\" title=\"外观模式-Facade Pattern\"></a>外观模式-Facade Pattern</h2><h2 id=\"享元模式-Flyweight-Pattern\"><a href=\"#享元模式-Flyweight-Pattern\" class=\"headerlink\" title=\"享元模式-Flyweight Pattern\"></a>享元模式-Flyweight Pattern</h2><h2 id=\"代理模式-Proxy-Pattern\"><a href=\"#代理模式-Proxy-Pattern\" class=\"headerlink\" title=\"代理模式-Proxy Pattern\"></a>代理模式-Proxy Pattern</h2>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Sep 10 2018 21:18:15 GMT+0800 (中国标准时间)","title":"设计模式Python实现","path":"设计模式Python实现/","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>最近找到了一篇容易理解的关于设计模式的文章，比较深刻地讲解了设计模式 <a href=\"https://blog.csdn.net/lovelion/article/details/17517213\" target=\"_blank\" rel=\"noopener\">史上最全设计模式导学目录（完整版）</a>。 为了加深自己对设计模式的理解，同时熟悉Python面向对象编程的技巧，遂写下此篇文章，记录每种设计模式对应的一个练习题，并附上Python代码实现。</p>\n</blockquote>","date":"2018-05-27T16:00:00.000Z","pv":0,"totalPV":0,"categories":"编码技能","tags":["Python","设计模式"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"layout":"post","title":"关于EDCC算法的诞生、原理、效果","description":"EDCC算法的详细说明","date":"2017-10-17T16:00:00.000Z","copyright":true,"_content":"\n# EDCC(Enhanced and Discriminative Competitive Code): 高效、准确的掌纹识别算法\n\n## 掌纹识别\n\n### 掌纹识别技术的优势\n\n作为新崛起的生物特征识别技术之一，掌纹识别可以从分辨率较低的图像中提取出稳定、抗噪能力强且具有识别力的特征。对比其他的生物特征识别技术，掌纹识别技术有以下优势：\n\n1. 与指纹相比，掌纹的识别面积更大，包含的信息更丰富，而且掌纹比指纹更不易受损具有长期稳定性。掌纹识别对图像的分辨率要求不是特别高，所以在采集设备的造价比指纹低很多。\n1. 与人脸相比，掌纹不受眼镜、表情、妆容等因素的影响，稳定性较高，并且在用户接受度方面，掌纹的采集方式对用户更加友好。\n1. 与虹膜、DNA相比，掌纹的识别准确率虽然不及它们，但是掌纹采集设备造价远低于这两种生物特征识别技术的采集设备。\n1. 与签名、步态等行为特征相比，掌纹识别不受人们习惯的影响，特征不会随着时间改变，并且识别的准确率远高于行为特征。\n\n综上所述，掌纹识别有识别精度高、采集设备成本低、稳定性高、用户接受度高等优点，在生活中的应用越来越广泛。\n\n### 掌纹识别的基本步骤\n\n掌纹特征识别过程分为数据库的创建和特征库的检索。\n\n- 数据库创建通过采集注册样本，进行预处理、特征提取工作，之后形成数据库\n- 特征库检索通过采集待测试的样本，在预处理和提取特征之后与掌纹数据库中的数据进行匹配，得到该待测样本的类别。\n\n### 掌纹特征提取方法\n\n掌纹特征提取方法主要分为四大类，分别为基于结构的方法、基于统计的方法、基于子空间的方法以及基于编码的方法。\n\n1. 基于结构的方法主要是利用掌纹中主线和褶皱的方向和位置信息实现掌纹识别的方法，此类方法最为直观。但是无论是哪一种边缘检测算子都无法提取出所有的纹线，所以此类方法实用性很差，已经被人们渐渐放弃。\n1. 基于统计的方法主要是利用统计特征，例如均值、方差等组成一组用来描述掌纹图像的特征向量，可以根据是否分块这一特性分为局部统计变量方法和全局统计量方法。基于局部统计量的方法通过将图像分成若干小块，分别统计每个小块的统计信息，然后将这些统计信息组合表示为整个掌纹的统计特征向量，如采用傅里叶变换、小波变换等方式获得掌纹图像的每个分块统计信息并进行识别。\n1. 基于子空间的方法是将原始掌纹图像看做普通的图片模式，将图片对应的高维矩阵通过投影映射运算转化为低维向量或矩阵。根据投影变换的实现方式，分为线性子空间法和非线性子空间法。常用的子空间特征提取方法有主成分分析法(PCA)，FisherPalm方法，BDPCA(Bi-directional PCA)等。\n1. 基于编码的方法是将掌纹图像看作纹理图像，根据某些规则对纹理图像进行编码。Zhang等提出了一种名为PalmCode的编码方法，该方法首先采用2DGabor对图像进行滤波处理，然后根据滤波结果的实部和虚部的正负来进行编码。Kong等提出使用六个方向的Gabor滤波器对掌纹图像滤波, 并对幅值最小的方向编码, 称为竞争编码(Competitive code)。由于竞争编码考察了掌纹图像的方向信息，对光照不敏感，因此识别精度很高。\n\n## EDCC\n\n掌纹充满了线条和纹理特征，具备丰富的方向信息。因此，基于方向编码被认为是最有效的掌纹特征提取方法。而竞争编码是辨识度极高的编码方法之一，它使用不同方向的滤波器与掌纹图像进行卷积，之后根据一定的编码规则对掌纹图像进行编码。\n\nEDCC算法有以下关键点:\n\n1. 通过图像增强算子处理原始掌纹图像，使得纹线更加突出，提取的方向更加准确。\n1. 使用一组方向不同的2DGabor小波滤波器对图像进行滤波。\n1. 选择滤波响应值最大和次大的方向作为该点所在纹线的主要方向和次要方向，进而进行编码。\n\n下面将对这三个关键点进行详细解释。\n\n### 图像增强\n\n拉普拉斯算子是图像锐化常用的方法，锐化可以增强图像的对比度，突出灰度值变化明显的部分，使比较模糊的纹线变得清晰。\n\n典型的核大小为的拉普拉斯算子:![](https://i.loli.net/2017/10/21/59eb3382cb19d.png)\n\n使用上式中的算子对如下掌纹图像进行卷积\n\n![](https://i.loli.net/2017/10/21/59eb33f8436b2.bmp)\n\n得到增强掌纹后的结果如下图所示。\n\n![](https://i.loli.net/2017/10/21/59eb343537443.png)\n\n纹线明显被增强显示出来，而且纹线处的灰度值大大高于周围皮肤灰度值。\n\n实验表明，拉普拉斯增强算子可以有效的增强纹线对比度。所以EDCC算法在对图像使用2DGabor小波滤波之前，先对图像进行拉普拉斯变换。\n\n### 2DGabor小波\n\n2DGabor小波滤波器与人类视觉刺激响应非常相似。如下图所示，\n\n![](https://i.loli.net/2017/10/21/59eb399728299.png)\n\n第一行是人类视觉感受野，第二行是Gabor小波滤波器，第三行是两者之间的残差，可见两者及其相似。而且Gabor小波可以变换方向和尺度，对于不同方向的纹线都能很好地适应。\n\n函数形式表示如下：\n\n![](https://i.loli.net/2017/10/21/59eb3a260404b.png)\n\n![](https://i.loli.net/2017/10/21/59eb3a4a20358.png)\n\n取3个尺度，6个方向构成一组滤波器，并对掌纹图像进行卷积，得到结果如下图所示\n\n![](https://i.loli.net/2017/10/21/59eb3ab3874ed.png)\n\n不难发现，经过2DGabor小波滤波后的掌纹纹线非常清晰。\n\n### 编码\n\n采用一组尺度统一方向不同的2DGabor小波滤波器对图像做卷积后，可以得到掌纹图像每一个像素点对应的响应值，不难推断最大响应值对应的滤波器方向可以近似表示该点的掌纹线方向，但并不是纹线准确的方向。\n\n如下图所示，选择掌纹图像主线上的两个像素点与一组方向个数为6的2DGabor小波滤波器进行卷积，并计算相应滤波响应值。然后确定具有最大滤波响应的取向作为主要方向，从图中可以看出，(a)和(b)主要方向是相同的。\n\n实际上，这两个像素的真正的主要方向分别在提取的主要方向的左侧和右侧。这种现象也在掌纹的其他部位也可以发现。因此，基于最大滤波响应提取的主要方向并不能准确地表示掌纹真实的方向。\n\n![](https://i.loli.net/2017/10/21/59eb3ce12a9be.png)\n\n根据滤波响应提取掌纹主要方向的方法基于掌纹图像中的像素属于一条线的基本假设。当滤波器的方向与掌纹的主要方向相同时，滤波响应将达到最大值。\n\n换句话说，滤波器响应与主线和滤波器之间的重叠程度成正比。然而，因为在实践中使用的滤波器方向有限，可能没有Gabor滤波器具有与掌纹图像的主要方向相同的取向。结果，在这种情况下，提取的方向不能准确地表示掌纹的主要方向特征。\n\n通常来说，2DGabor小波滤波器方向越靠近掌纹的主要方向，得到的滤波响应就越大。因此，提取主要方向（通常也具有较大的滤波响应）的相邻方向可以与主要方向相结合，来更准确地表示掌纹图像。\n\n#### 方法\n\n首先使用一个尺度、N个方向的一组2DGabor小波滤波器对图像进行卷积。\n掌纹纹线上的一点I(x, y)的主要方向通过计算该点最大响应值对应的滤波器方向来确定。即: ![](https://i.loli.net/2017/10/21/59eb44de0bec2.png)\n\n式中：C是掌纹图像的主要方向。令Cleft和Cright表示主要方向相邻的方向![](https://i.loli.net/2017/10/21/59eb452103f23.png)\n\n通过比较Cleft和Cright方向对应的响应值，得到次要方向Cs的编码![](https://i.loli.net/2017/10/21/59eb455ea7c52.png)\n\n由于C表示掌纹图像的主要方向特征，Cs表示次要方向特征，所以结合C和Cs能够较为准确表示纹线的真实方向。\n\n(C, Cs)的计算例子如下图所示\n\n![](https://i.loli.net/2017/10/21/59eb45a465ef2.png)\n\n#### 匹配方式\n\n在掌纹图像的匹配阶段，使用与竞争编码方法相似但不同的角距离来确定两个掌纹图像之间的相似度。\n\n两个掌纹图像和之间的匹配得分定义为：![](https://i.loli.net/2017/10/21/59eb56ad4c0fd.png)\n\n![](https://i.loli.net/2017/10/21/59eb56db5a549.png)\n\n## 实验\n\n### 验证\n\n在掌纹验证这一步中，令掌纹数据库中每个掌纹图像与剩下所有的图像一一对比。假如两幅图像来自同一人，则称之为同类匹配，否则称之为异类匹配。\n\n在多光谱数据库中，每个人有12张手掌图片，每个光谱对应的数据库有6000张图片，所以有个匹配，其中同类匹配有33000个，异类匹配有17964000个。在同济大学掌纹数据库中，同类匹配有114000个，异类匹配有71880000个。图5.7展示了使用EDCC算法在多光谱数据库以及同济大学数据库上得到的匹配得分分布情况。可以发现，同类匹配得分与异类匹配得分明显分离，并且同类匹配得分远高于异类匹配得分。\n\n![](https://i.loli.net/2017/10/21/59eb57ffdd9f8.png)\n\n![](https://i.loli.net/2017/10/21/59eb588595119.png)\n![](https://i.loli.net/2017/10/21/59eb584ff209b.png)\n\n**(a)-(e)分别为Red,Green,Blue,NIR,同济大学数据库**\n\n正确接受率(GAR)和错误接受率(FAR)可以评估算法的性能，ROC曲线通过设置所有可能的阈值进而得到对应的GAR和FAR值，并以FAR、GAR的值做为横、纵坐标绘制曲线。\n\n![](https://i.loli.net/2017/10/21/59eb61e520e28.png)\n\n![](https://i.loli.net/2017/10/21/59eb620f24c4a.png)\n![](https://i.loli.net/2017/10/21/59eb622756e76.png)\n\n**(a)-(e)分别为Red,Green,Blue,NIR,同济大学数据库**\n\n上图展示了EDCC算法、DCC算法、小波变换分块统计算法以及BDPCA+LDA算法在不同数据库上验证得到的ROC曲线。忽略产生过拟合的BDPCA+LDA算法，不难发现，当FAR相同时，EDCC算法的GAR最高。\n\n等误率(Equal Error Rate, EER)是FAR=FRR对应的值。去除掉存在过拟合问题的BDPCA+LDA算法，不同算法对应的EER如表下表所示。可以发现，EDCC算法在所有数据库上达到了最低的EER。对比DCC算法，EDCC算法的EER下降率最大达到了73%((5.5105-1.4728)/5.5105)，平均下降率也在50%左右。\n\n|         | EDCC      | DCC   | 小波变换分块信息统计 |\n| :----:  |:---------:|:-----:|:-----------------: |\n| Red     | 1.2612    | 4.0145| 2.2772             |\n| Green   | 1.8715    | 4.7460| 3.3249             |\n| Blue    | 1.7455    | 4.5881| 3.2456             |\n| NIR     | 1.4728    | 5.5105| 2.0192             |\n| 同济大学 | 3.6116    | 5.3703| 6.6747             |\n\n### 识别\n\n识别是指通过逐个匹配数据库内的掌纹，确定一个未知掌纹来自何人。\n\n在本文的掌纹识别实验中，将每个手掌的N(N=1,2,3,4)张掌纹图像组成训练集，剩下的掌纹图像组成测试集。将测试集中的每张图像与训练集一一比较，来计算匹配得分，训练集中得分最高的样本对应的类别作为该测试图片的类别，通过此方法可以计算不同算法在不同训练集大小下的错误识别率。\n\n![](https://i.loli.net/2017/10/21/59eb648e1e44e.png)\n\n![](https://i.loli.net/2017/10/21/59eb64bc52383.png)\n![](https://i.loli.net/2017/10/21/59eb64d98edd3.png)\n\n**(a)-(e)分别为Red,Green,Blue,NIR,同济大学数据库**\n\n实验结果如上图所示。可以发现，EDCC算法在训练样本较少时，仍然可以取得较高的识别率，并且在训练样本个数相同的条件下，EDCC算法的错误率明显低于其他算法，换句话说，EDCC算法可以使用更少的训练样本得到更高的识别准确率。","source":"_posts/EDCC Algorithm.md","raw":"---\nlayout: post\ntitle: 关于EDCC算法的诞生、原理、效果\ndescription: EDCC算法的详细说明\ndate: 2017-10-18\ncopyright: true\ntags:\n  - 算法\ncategories:\n  - 我的开源项目\n---\n\n# EDCC(Enhanced and Discriminative Competitive Code): 高效、准确的掌纹识别算法\n\n## 掌纹识别\n\n### 掌纹识别技术的优势\n\n作为新崛起的生物特征识别技术之一，掌纹识别可以从分辨率较低的图像中提取出稳定、抗噪能力强且具有识别力的特征。对比其他的生物特征识别技术，掌纹识别技术有以下优势：\n\n1. 与指纹相比，掌纹的识别面积更大，包含的信息更丰富，而且掌纹比指纹更不易受损具有长期稳定性。掌纹识别对图像的分辨率要求不是特别高，所以在采集设备的造价比指纹低很多。\n1. 与人脸相比，掌纹不受眼镜、表情、妆容等因素的影响，稳定性较高，并且在用户接受度方面，掌纹的采集方式对用户更加友好。\n1. 与虹膜、DNA相比，掌纹的识别准确率虽然不及它们，但是掌纹采集设备造价远低于这两种生物特征识别技术的采集设备。\n1. 与签名、步态等行为特征相比，掌纹识别不受人们习惯的影响，特征不会随着时间改变，并且识别的准确率远高于行为特征。\n\n综上所述，掌纹识别有识别精度高、采集设备成本低、稳定性高、用户接受度高等优点，在生活中的应用越来越广泛。\n\n### 掌纹识别的基本步骤\n\n掌纹特征识别过程分为数据库的创建和特征库的检索。\n\n- 数据库创建通过采集注册样本，进行预处理、特征提取工作，之后形成数据库\n- 特征库检索通过采集待测试的样本，在预处理和提取特征之后与掌纹数据库中的数据进行匹配，得到该待测样本的类别。\n\n### 掌纹特征提取方法\n\n掌纹特征提取方法主要分为四大类，分别为基于结构的方法、基于统计的方法、基于子空间的方法以及基于编码的方法。\n\n1. 基于结构的方法主要是利用掌纹中主线和褶皱的方向和位置信息实现掌纹识别的方法，此类方法最为直观。但是无论是哪一种边缘检测算子都无法提取出所有的纹线，所以此类方法实用性很差，已经被人们渐渐放弃。\n1. 基于统计的方法主要是利用统计特征，例如均值、方差等组成一组用来描述掌纹图像的特征向量，可以根据是否分块这一特性分为局部统计变量方法和全局统计量方法。基于局部统计量的方法通过将图像分成若干小块，分别统计每个小块的统计信息，然后将这些统计信息组合表示为整个掌纹的统计特征向量，如采用傅里叶变换、小波变换等方式获得掌纹图像的每个分块统计信息并进行识别。\n1. 基于子空间的方法是将原始掌纹图像看做普通的图片模式，将图片对应的高维矩阵通过投影映射运算转化为低维向量或矩阵。根据投影变换的实现方式，分为线性子空间法和非线性子空间法。常用的子空间特征提取方法有主成分分析法(PCA)，FisherPalm方法，BDPCA(Bi-directional PCA)等。\n1. 基于编码的方法是将掌纹图像看作纹理图像，根据某些规则对纹理图像进行编码。Zhang等提出了一种名为PalmCode的编码方法，该方法首先采用2DGabor对图像进行滤波处理，然后根据滤波结果的实部和虚部的正负来进行编码。Kong等提出使用六个方向的Gabor滤波器对掌纹图像滤波, 并对幅值最小的方向编码, 称为竞争编码(Competitive code)。由于竞争编码考察了掌纹图像的方向信息，对光照不敏感，因此识别精度很高。\n\n## EDCC\n\n掌纹充满了线条和纹理特征，具备丰富的方向信息。因此，基于方向编码被认为是最有效的掌纹特征提取方法。而竞争编码是辨识度极高的编码方法之一，它使用不同方向的滤波器与掌纹图像进行卷积，之后根据一定的编码规则对掌纹图像进行编码。\n\nEDCC算法有以下关键点:\n\n1. 通过图像增强算子处理原始掌纹图像，使得纹线更加突出，提取的方向更加准确。\n1. 使用一组方向不同的2DGabor小波滤波器对图像进行滤波。\n1. 选择滤波响应值最大和次大的方向作为该点所在纹线的主要方向和次要方向，进而进行编码。\n\n下面将对这三个关键点进行详细解释。\n\n### 图像增强\n\n拉普拉斯算子是图像锐化常用的方法，锐化可以增强图像的对比度，突出灰度值变化明显的部分，使比较模糊的纹线变得清晰。\n\n典型的核大小为的拉普拉斯算子:![](https://i.loli.net/2017/10/21/59eb3382cb19d.png)\n\n使用上式中的算子对如下掌纹图像进行卷积\n\n![](https://i.loli.net/2017/10/21/59eb33f8436b2.bmp)\n\n得到增强掌纹后的结果如下图所示。\n\n![](https://i.loli.net/2017/10/21/59eb343537443.png)\n\n纹线明显被增强显示出来，而且纹线处的灰度值大大高于周围皮肤灰度值。\n\n实验表明，拉普拉斯增强算子可以有效的增强纹线对比度。所以EDCC算法在对图像使用2DGabor小波滤波之前，先对图像进行拉普拉斯变换。\n\n### 2DGabor小波\n\n2DGabor小波滤波器与人类视觉刺激响应非常相似。如下图所示，\n\n![](https://i.loli.net/2017/10/21/59eb399728299.png)\n\n第一行是人类视觉感受野，第二行是Gabor小波滤波器，第三行是两者之间的残差，可见两者及其相似。而且Gabor小波可以变换方向和尺度，对于不同方向的纹线都能很好地适应。\n\n函数形式表示如下：\n\n![](https://i.loli.net/2017/10/21/59eb3a260404b.png)\n\n![](https://i.loli.net/2017/10/21/59eb3a4a20358.png)\n\n取3个尺度，6个方向构成一组滤波器，并对掌纹图像进行卷积，得到结果如下图所示\n\n![](https://i.loli.net/2017/10/21/59eb3ab3874ed.png)\n\n不难发现，经过2DGabor小波滤波后的掌纹纹线非常清晰。\n\n### 编码\n\n采用一组尺度统一方向不同的2DGabor小波滤波器对图像做卷积后，可以得到掌纹图像每一个像素点对应的响应值，不难推断最大响应值对应的滤波器方向可以近似表示该点的掌纹线方向，但并不是纹线准确的方向。\n\n如下图所示，选择掌纹图像主线上的两个像素点与一组方向个数为6的2DGabor小波滤波器进行卷积，并计算相应滤波响应值。然后确定具有最大滤波响应的取向作为主要方向，从图中可以看出，(a)和(b)主要方向是相同的。\n\n实际上，这两个像素的真正的主要方向分别在提取的主要方向的左侧和右侧。这种现象也在掌纹的其他部位也可以发现。因此，基于最大滤波响应提取的主要方向并不能准确地表示掌纹真实的方向。\n\n![](https://i.loli.net/2017/10/21/59eb3ce12a9be.png)\n\n根据滤波响应提取掌纹主要方向的方法基于掌纹图像中的像素属于一条线的基本假设。当滤波器的方向与掌纹的主要方向相同时，滤波响应将达到最大值。\n\n换句话说，滤波器响应与主线和滤波器之间的重叠程度成正比。然而，因为在实践中使用的滤波器方向有限，可能没有Gabor滤波器具有与掌纹图像的主要方向相同的取向。结果，在这种情况下，提取的方向不能准确地表示掌纹的主要方向特征。\n\n通常来说，2DGabor小波滤波器方向越靠近掌纹的主要方向，得到的滤波响应就越大。因此，提取主要方向（通常也具有较大的滤波响应）的相邻方向可以与主要方向相结合，来更准确地表示掌纹图像。\n\n#### 方法\n\n首先使用一个尺度、N个方向的一组2DGabor小波滤波器对图像进行卷积。\n掌纹纹线上的一点I(x, y)的主要方向通过计算该点最大响应值对应的滤波器方向来确定。即: ![](https://i.loli.net/2017/10/21/59eb44de0bec2.png)\n\n式中：C是掌纹图像的主要方向。令Cleft和Cright表示主要方向相邻的方向![](https://i.loli.net/2017/10/21/59eb452103f23.png)\n\n通过比较Cleft和Cright方向对应的响应值，得到次要方向Cs的编码![](https://i.loli.net/2017/10/21/59eb455ea7c52.png)\n\n由于C表示掌纹图像的主要方向特征，Cs表示次要方向特征，所以结合C和Cs能够较为准确表示纹线的真实方向。\n\n(C, Cs)的计算例子如下图所示\n\n![](https://i.loli.net/2017/10/21/59eb45a465ef2.png)\n\n#### 匹配方式\n\n在掌纹图像的匹配阶段，使用与竞争编码方法相似但不同的角距离来确定两个掌纹图像之间的相似度。\n\n两个掌纹图像和之间的匹配得分定义为：![](https://i.loli.net/2017/10/21/59eb56ad4c0fd.png)\n\n![](https://i.loli.net/2017/10/21/59eb56db5a549.png)\n\n## 实验\n\n### 验证\n\n在掌纹验证这一步中，令掌纹数据库中每个掌纹图像与剩下所有的图像一一对比。假如两幅图像来自同一人，则称之为同类匹配，否则称之为异类匹配。\n\n在多光谱数据库中，每个人有12张手掌图片，每个光谱对应的数据库有6000张图片，所以有个匹配，其中同类匹配有33000个，异类匹配有17964000个。在同济大学掌纹数据库中，同类匹配有114000个，异类匹配有71880000个。图5.7展示了使用EDCC算法在多光谱数据库以及同济大学数据库上得到的匹配得分分布情况。可以发现，同类匹配得分与异类匹配得分明显分离，并且同类匹配得分远高于异类匹配得分。\n\n![](https://i.loli.net/2017/10/21/59eb57ffdd9f8.png)\n\n![](https://i.loli.net/2017/10/21/59eb588595119.png)\n![](https://i.loli.net/2017/10/21/59eb584ff209b.png)\n\n**(a)-(e)分别为Red,Green,Blue,NIR,同济大学数据库**\n\n正确接受率(GAR)和错误接受率(FAR)可以评估算法的性能，ROC曲线通过设置所有可能的阈值进而得到对应的GAR和FAR值，并以FAR、GAR的值做为横、纵坐标绘制曲线。\n\n![](https://i.loli.net/2017/10/21/59eb61e520e28.png)\n\n![](https://i.loli.net/2017/10/21/59eb620f24c4a.png)\n![](https://i.loli.net/2017/10/21/59eb622756e76.png)\n\n**(a)-(e)分别为Red,Green,Blue,NIR,同济大学数据库**\n\n上图展示了EDCC算法、DCC算法、小波变换分块统计算法以及BDPCA+LDA算法在不同数据库上验证得到的ROC曲线。忽略产生过拟合的BDPCA+LDA算法，不难发现，当FAR相同时，EDCC算法的GAR最高。\n\n等误率(Equal Error Rate, EER)是FAR=FRR对应的值。去除掉存在过拟合问题的BDPCA+LDA算法，不同算法对应的EER如表下表所示。可以发现，EDCC算法在所有数据库上达到了最低的EER。对比DCC算法，EDCC算法的EER下降率最大达到了73%((5.5105-1.4728)/5.5105)，平均下降率也在50%左右。\n\n|         | EDCC      | DCC   | 小波变换分块信息统计 |\n| :----:  |:---------:|:-----:|:-----------------: |\n| Red     | 1.2612    | 4.0145| 2.2772             |\n| Green   | 1.8715    | 4.7460| 3.3249             |\n| Blue    | 1.7455    | 4.5881| 3.2456             |\n| NIR     | 1.4728    | 5.5105| 2.0192             |\n| 同济大学 | 3.6116    | 5.3703| 6.6747             |\n\n### 识别\n\n识别是指通过逐个匹配数据库内的掌纹，确定一个未知掌纹来自何人。\n\n在本文的掌纹识别实验中，将每个手掌的N(N=1,2,3,4)张掌纹图像组成训练集，剩下的掌纹图像组成测试集。将测试集中的每张图像与训练集一一比较，来计算匹配得分，训练集中得分最高的样本对应的类别作为该测试图片的类别，通过此方法可以计算不同算法在不同训练集大小下的错误识别率。\n\n![](https://i.loli.net/2017/10/21/59eb648e1e44e.png)\n\n![](https://i.loli.net/2017/10/21/59eb64bc52383.png)\n![](https://i.loli.net/2017/10/21/59eb64d98edd3.png)\n\n**(a)-(e)分别为Red,Green,Blue,NIR,同济大学数据库**\n\n实验结果如上图所示。可以发现，EDCC算法在训练样本较少时，仍然可以取得较高的识别率，并且在训练样本个数相同的条件下，EDCC算法的错误率明显低于其他算法，换句话说，EDCC算法可以使用更少的训练样本得到更高的识别准确率。","slug":"EDCC Algorithm","published":1,"updated":"2018-09-10T13:18:09.476Z","comments":1,"photos":[],"link":"","_id":"cjlwefuih000oqbrtq2kv5y4o","content":"<h1 id=\"EDCC-Enhanced-and-Discriminative-Competitive-Code-高效、准确的掌纹识别算法\"><a href=\"#EDCC-Enhanced-and-Discriminative-Competitive-Code-高效、准确的掌纹识别算法\" class=\"headerlink\" title=\"EDCC(Enhanced and Discriminative Competitive Code): 高效、准确的掌纹识别算法\"></a>EDCC(Enhanced and Discriminative Competitive Code): 高效、准确的掌纹识别算法</h1><h2 id=\"掌纹识别\"><a href=\"#掌纹识别\" class=\"headerlink\" title=\"掌纹识别\"></a>掌纹识别</h2><h3 id=\"掌纹识别技术的优势\"><a href=\"#掌纹识别技术的优势\" class=\"headerlink\" title=\"掌纹识别技术的优势\"></a>掌纹识别技术的优势</h3><p>作为新崛起的生物特征识别技术之一，掌纹识别可以从分辨率较低的图像中提取出稳定、抗噪能力强且具有识别力的特征。对比其他的生物特征识别技术，掌纹识别技术有以下优势：</p>\n<ol>\n<li>与指纹相比，掌纹的识别面积更大，包含的信息更丰富，而且掌纹比指纹更不易受损具有长期稳定性。掌纹识别对图像的分辨率要求不是特别高，所以在采集设备的造价比指纹低很多。</li>\n<li>与人脸相比，掌纹不受眼镜、表情、妆容等因素的影响，稳定性较高，并且在用户接受度方面，掌纹的采集方式对用户更加友好。</li>\n<li>与虹膜、DNA相比，掌纹的识别准确率虽然不及它们，但是掌纹采集设备造价远低于这两种生物特征识别技术的采集设备。</li>\n<li>与签名、步态等行为特征相比，掌纹识别不受人们习惯的影响，特征不会随着时间改变，并且识别的准确率远高于行为特征。</li>\n</ol>\n<p>综上所述，掌纹识别有识别精度高、采集设备成本低、稳定性高、用户接受度高等优点，在生活中的应用越来越广泛。</p>\n<h3 id=\"掌纹识别的基本步骤\"><a href=\"#掌纹识别的基本步骤\" class=\"headerlink\" title=\"掌纹识别的基本步骤\"></a>掌纹识别的基本步骤</h3><p>掌纹特征识别过程分为数据库的创建和特征库的检索。</p>\n<ul>\n<li>数据库创建通过采集注册样本，进行预处理、特征提取工作，之后形成数据库</li>\n<li>特征库检索通过采集待测试的样本，在预处理和提取特征之后与掌纹数据库中的数据进行匹配，得到该待测样本的类别。</li>\n</ul>\n<h3 id=\"掌纹特征提取方法\"><a href=\"#掌纹特征提取方法\" class=\"headerlink\" title=\"掌纹特征提取方法\"></a>掌纹特征提取方法</h3><p>掌纹特征提取方法主要分为四大类，分别为基于结构的方法、基于统计的方法、基于子空间的方法以及基于编码的方法。</p>\n<ol>\n<li>基于结构的方法主要是利用掌纹中主线和褶皱的方向和位置信息实现掌纹识别的方法，此类方法最为直观。但是无论是哪一种边缘检测算子都无法提取出所有的纹线，所以此类方法实用性很差，已经被人们渐渐放弃。</li>\n<li>基于统计的方法主要是利用统计特征，例如均值、方差等组成一组用来描述掌纹图像的特征向量，可以根据是否分块这一特性分为局部统计变量方法和全局统计量方法。基于局部统计量的方法通过将图像分成若干小块，分别统计每个小块的统计信息，然后将这些统计信息组合表示为整个掌纹的统计特征向量，如采用傅里叶变换、小波变换等方式获得掌纹图像的每个分块统计信息并进行识别。</li>\n<li>基于子空间的方法是将原始掌纹图像看做普通的图片模式，将图片对应的高维矩阵通过投影映射运算转化为低维向量或矩阵。根据投影变换的实现方式，分为线性子空间法和非线性子空间法。常用的子空间特征提取方法有主成分分析法(PCA)，FisherPalm方法，BDPCA(Bi-directional PCA)等。</li>\n<li>基于编码的方法是将掌纹图像看作纹理图像，根据某些规则对纹理图像进行编码。Zhang等提出了一种名为PalmCode的编码方法，该方法首先采用2DGabor对图像进行滤波处理，然后根据滤波结果的实部和虚部的正负来进行编码。Kong等提出使用六个方向的Gabor滤波器对掌纹图像滤波, 并对幅值最小的方向编码, 称为竞争编码(Competitive code)。由于竞争编码考察了掌纹图像的方向信息，对光照不敏感，因此识别精度很高。</li>\n</ol>\n<h2 id=\"EDCC\"><a href=\"#EDCC\" class=\"headerlink\" title=\"EDCC\"></a>EDCC</h2><p>掌纹充满了线条和纹理特征，具备丰富的方向信息。因此，基于方向编码被认为是最有效的掌纹特征提取方法。而竞争编码是辨识度极高的编码方法之一，它使用不同方向的滤波器与掌纹图像进行卷积，之后根据一定的编码规则对掌纹图像进行编码。</p>\n<p>EDCC算法有以下关键点:</p>\n<ol>\n<li>通过图像增强算子处理原始掌纹图像，使得纹线更加突出，提取的方向更加准确。</li>\n<li>使用一组方向不同的2DGabor小波滤波器对图像进行滤波。</li>\n<li>选择滤波响应值最大和次大的方向作为该点所在纹线的主要方向和次要方向，进而进行编码。</li>\n</ol>\n<p>下面将对这三个关键点进行详细解释。</p>\n<h3 id=\"图像增强\"><a href=\"#图像增强\" class=\"headerlink\" title=\"图像增强\"></a>图像增强</h3><p>拉普拉斯算子是图像锐化常用的方法，锐化可以增强图像的对比度，突出灰度值变化明显的部分，使比较模糊的纹线变得清晰。</p>\n<p>典型的核大小为的拉普拉斯算子:<img src=\"https://i.loli.net/2017/10/21/59eb3382cb19d.png\" alt=\"\"></p>\n<p>使用上式中的算子对如下掌纹图像进行卷积</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb33f8436b2.bmp\" alt=\"\"></p>\n<p>得到增强掌纹后的结果如下图所示。</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb343537443.png\" alt=\"\"></p>\n<p>纹线明显被增强显示出来，而且纹线处的灰度值大大高于周围皮肤灰度值。</p>\n<p>实验表明，拉普拉斯增强算子可以有效的增强纹线对比度。所以EDCC算法在对图像使用2DGabor小波滤波之前，先对图像进行拉普拉斯变换。</p>\n<h3 id=\"2DGabor小波\"><a href=\"#2DGabor小波\" class=\"headerlink\" title=\"2DGabor小波\"></a>2DGabor小波</h3><p>2DGabor小波滤波器与人类视觉刺激响应非常相似。如下图所示，</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb399728299.png\" alt=\"\"></p>\n<p>第一行是人类视觉感受野，第二行是Gabor小波滤波器，第三行是两者之间的残差，可见两者及其相似。而且Gabor小波可以变换方向和尺度，对于不同方向的纹线都能很好地适应。</p>\n<p>函数形式表示如下：</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb3a260404b.png\" alt=\"\"></p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb3a4a20358.png\" alt=\"\"></p>\n<p>取3个尺度，6个方向构成一组滤波器，并对掌纹图像进行卷积，得到结果如下图所示</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb3ab3874ed.png\" alt=\"\"></p>\n<p>不难发现，经过2DGabor小波滤波后的掌纹纹线非常清晰。</p>\n<h3 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h3><p>采用一组尺度统一方向不同的2DGabor小波滤波器对图像做卷积后，可以得到掌纹图像每一个像素点对应的响应值，不难推断最大响应值对应的滤波器方向可以近似表示该点的掌纹线方向，但并不是纹线准确的方向。</p>\n<p>如下图所示，选择掌纹图像主线上的两个像素点与一组方向个数为6的2DGabor小波滤波器进行卷积，并计算相应滤波响应值。然后确定具有最大滤波响应的取向作为主要方向，从图中可以看出，(a)和(b)主要方向是相同的。</p>\n<p>实际上，这两个像素的真正的主要方向分别在提取的主要方向的左侧和右侧。这种现象也在掌纹的其他部位也可以发现。因此，基于最大滤波响应提取的主要方向并不能准确地表示掌纹真实的方向。</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb3ce12a9be.png\" alt=\"\"></p>\n<p>根据滤波响应提取掌纹主要方向的方法基于掌纹图像中的像素属于一条线的基本假设。当滤波器的方向与掌纹的主要方向相同时，滤波响应将达到最大值。</p>\n<p>换句话说，滤波器响应与主线和滤波器之间的重叠程度成正比。然而，因为在实践中使用的滤波器方向有限，可能没有Gabor滤波器具有与掌纹图像的主要方向相同的取向。结果，在这种情况下，提取的方向不能准确地表示掌纹的主要方向特征。</p>\n<p>通常来说，2DGabor小波滤波器方向越靠近掌纹的主要方向，得到的滤波响应就越大。因此，提取主要方向（通常也具有较大的滤波响应）的相邻方向可以与主要方向相结合，来更准确地表示掌纹图像。</p>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p>首先使用一个尺度、N个方向的一组2DGabor小波滤波器对图像进行卷积。<br>掌纹纹线上的一点I(x, y)的主要方向通过计算该点最大响应值对应的滤波器方向来确定。即: <img src=\"https://i.loli.net/2017/10/21/59eb44de0bec2.png\" alt=\"\"></p>\n<p>式中：C是掌纹图像的主要方向。令Cleft和Cright表示主要方向相邻的方向<img src=\"https://i.loli.net/2017/10/21/59eb452103f23.png\" alt=\"\"></p>\n<p>通过比较Cleft和Cright方向对应的响应值，得到次要方向Cs的编码<img src=\"https://i.loli.net/2017/10/21/59eb455ea7c52.png\" alt=\"\"></p>\n<p>由于C表示掌纹图像的主要方向特征，Cs表示次要方向特征，所以结合C和Cs能够较为准确表示纹线的真实方向。</p>\n<p>(C, Cs)的计算例子如下图所示</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb45a465ef2.png\" alt=\"\"></p>\n<h4 id=\"匹配方式\"><a href=\"#匹配方式\" class=\"headerlink\" title=\"匹配方式\"></a>匹配方式</h4><p>在掌纹图像的匹配阶段，使用与竞争编码方法相似但不同的角距离来确定两个掌纹图像之间的相似度。</p>\n<p>两个掌纹图像和之间的匹配得分定义为：<img src=\"https://i.loli.net/2017/10/21/59eb56ad4c0fd.png\" alt=\"\"></p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb56db5a549.png\" alt=\"\"></p>\n<h2 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h2><h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>在掌纹验证这一步中，令掌纹数据库中每个掌纹图像与剩下所有的图像一一对比。假如两幅图像来自同一人，则称之为同类匹配，否则称之为异类匹配。</p>\n<p>在多光谱数据库中，每个人有12张手掌图片，每个光谱对应的数据库有6000张图片，所以有个匹配，其中同类匹配有33000个，异类匹配有17964000个。在同济大学掌纹数据库中，同类匹配有114000个，异类匹配有71880000个。图5.7展示了使用EDCC算法在多光谱数据库以及同济大学数据库上得到的匹配得分分布情况。可以发现，同类匹配得分与异类匹配得分明显分离，并且同类匹配得分远高于异类匹配得分。</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb57ffdd9f8.png\" alt=\"\"></p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb588595119.png\" alt=\"\"><br><img src=\"https://i.loli.net/2017/10/21/59eb584ff209b.png\" alt=\"\"></p>\n<p><strong>(a)-(e)分别为Red,Green,Blue,NIR,同济大学数据库</strong></p>\n<p>正确接受率(GAR)和错误接受率(FAR)可以评估算法的性能，ROC曲线通过设置所有可能的阈值进而得到对应的GAR和FAR值，并以FAR、GAR的值做为横、纵坐标绘制曲线。</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb61e520e28.png\" alt=\"\"></p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb620f24c4a.png\" alt=\"\"><br><img src=\"https://i.loli.net/2017/10/21/59eb622756e76.png\" alt=\"\"></p>\n<p><strong>(a)-(e)分别为Red,Green,Blue,NIR,同济大学数据库</strong></p>\n<p>上图展示了EDCC算法、DCC算法、小波变换分块统计算法以及BDPCA+LDA算法在不同数据库上验证得到的ROC曲线。忽略产生过拟合的BDPCA+LDA算法，不难发现，当FAR相同时，EDCC算法的GAR最高。</p>\n<p>等误率(Equal Error Rate, EER)是FAR=FRR对应的值。去除掉存在过拟合问题的BDPCA+LDA算法，不同算法对应的EER如表下表所示。可以发现，EDCC算法在所有数据库上达到了最低的EER。对比DCC算法，EDCC算法的EER下降率最大达到了73%((5.5105-1.4728)/5.5105)，平均下降率也在50%左右。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">EDCC</th>\n<th style=\"text-align:center\">DCC</th>\n<th style=\"text-align:center\">小波变换分块信息统计</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Red</td>\n<td style=\"text-align:center\">1.2612</td>\n<td style=\"text-align:center\">4.0145</td>\n<td style=\"text-align:center\">2.2772</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Green</td>\n<td style=\"text-align:center\">1.8715</td>\n<td style=\"text-align:center\">4.7460</td>\n<td style=\"text-align:center\">3.3249</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Blue</td>\n<td style=\"text-align:center\">1.7455</td>\n<td style=\"text-align:center\">4.5881</td>\n<td style=\"text-align:center\">3.2456</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NIR</td>\n<td style=\"text-align:center\">1.4728</td>\n<td style=\"text-align:center\">5.5105</td>\n<td style=\"text-align:center\">2.0192</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">同济大学</td>\n<td style=\"text-align:center\">3.6116</td>\n<td style=\"text-align:center\">5.3703</td>\n<td style=\"text-align:center\">6.6747</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"识别\"><a href=\"#识别\" class=\"headerlink\" title=\"识别\"></a>识别</h3><p>识别是指通过逐个匹配数据库内的掌纹，确定一个未知掌纹来自何人。</p>\n<p>在本文的掌纹识别实验中，将每个手掌的N(N=1,2,3,4)张掌纹图像组成训练集，剩下的掌纹图像组成测试集。将测试集中的每张图像与训练集一一比较，来计算匹配得分，训练集中得分最高的样本对应的类别作为该测试图片的类别，通过此方法可以计算不同算法在不同训练集大小下的错误识别率。</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb648e1e44e.png\" alt=\"\"></p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb64bc52383.png\" alt=\"\"><br><img src=\"https://i.loli.net/2017/10/21/59eb64d98edd3.png\" alt=\"\"></p>\n<p><strong>(a)-(e)分别为Red,Green,Blue,NIR,同济大学数据库</strong></p>\n<p>实验结果如上图所示。可以发现，EDCC算法在训练样本较少时，仍然可以取得较高的识别率，并且在训练样本个数相同的条件下，EDCC算法的错误率明显低于其他算法，换句话说，EDCC算法可以使用更少的训练样本得到更高的识别准确率。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"EDCC-Enhanced-and-Discriminative-Competitive-Code-高效、准确的掌纹识别算法\"><a href=\"#EDCC-Enhanced-and-Discriminative-Competitive-Code-高效、准确的掌纹识别算法\" class=\"headerlink\" title=\"EDCC(Enhanced and Discriminative Competitive Code): 高效、准确的掌纹识别算法\"></a>EDCC(Enhanced and Discriminative Competitive Code): 高效、准确的掌纹识别算法</h1><h2 id=\"掌纹识别\"><a href=\"#掌纹识别\" class=\"headerlink\" title=\"掌纹识别\"></a>掌纹识别</h2><h3 id=\"掌纹识别技术的优势\"><a href=\"#掌纹识别技术的优势\" class=\"headerlink\" title=\"掌纹识别技术的优势\"></a>掌纹识别技术的优势</h3><p>作为新崛起的生物特征识别技术之一，掌纹识别可以从分辨率较低的图像中提取出稳定、抗噪能力强且具有识别力的特征。对比其他的生物特征识别技术，掌纹识别技术有以下优势：</p>\n<ol>\n<li>与指纹相比，掌纹的识别面积更大，包含的信息更丰富，而且掌纹比指纹更不易受损具有长期稳定性。掌纹识别对图像的分辨率要求不是特别高，所以在采集设备的造价比指纹低很多。</li>\n<li>与人脸相比，掌纹不受眼镜、表情、妆容等因素的影响，稳定性较高，并且在用户接受度方面，掌纹的采集方式对用户更加友好。</li>\n<li>与虹膜、DNA相比，掌纹的识别准确率虽然不及它们，但是掌纹采集设备造价远低于这两种生物特征识别技术的采集设备。</li>\n<li>与签名、步态等行为特征相比，掌纹识别不受人们习惯的影响，特征不会随着时间改变，并且识别的准确率远高于行为特征。</li>\n</ol>\n<p>综上所述，掌纹识别有识别精度高、采集设备成本低、稳定性高、用户接受度高等优点，在生活中的应用越来越广泛。</p>\n<h3 id=\"掌纹识别的基本步骤\"><a href=\"#掌纹识别的基本步骤\" class=\"headerlink\" title=\"掌纹识别的基本步骤\"></a>掌纹识别的基本步骤</h3><p>掌纹特征识别过程分为数据库的创建和特征库的检索。</p>\n<ul>\n<li>数据库创建通过采集注册样本，进行预处理、特征提取工作，之后形成数据库</li>\n<li>特征库检索通过采集待测试的样本，在预处理和提取特征之后与掌纹数据库中的数据进行匹配，得到该待测样本的类别。</li>\n</ul>\n<h3 id=\"掌纹特征提取方法\"><a href=\"#掌纹特征提取方法\" class=\"headerlink\" title=\"掌纹特征提取方法\"></a>掌纹特征提取方法</h3><p>掌纹特征提取方法主要分为四大类，分别为基于结构的方法、基于统计的方法、基于子空间的方法以及基于编码的方法。</p>\n<ol>\n<li>基于结构的方法主要是利用掌纹中主线和褶皱的方向和位置信息实现掌纹识别的方法，此类方法最为直观。但是无论是哪一种边缘检测算子都无法提取出所有的纹线，所以此类方法实用性很差，已经被人们渐渐放弃。</li>\n<li>基于统计的方法主要是利用统计特征，例如均值、方差等组成一组用来描述掌纹图像的特征向量，可以根据是否分块这一特性分为局部统计变量方法和全局统计量方法。基于局部统计量的方法通过将图像分成若干小块，分别统计每个小块的统计信息，然后将这些统计信息组合表示为整个掌纹的统计特征向量，如采用傅里叶变换、小波变换等方式获得掌纹图像的每个分块统计信息并进行识别。</li>\n<li>基于子空间的方法是将原始掌纹图像看做普通的图片模式，将图片对应的高维矩阵通过投影映射运算转化为低维向量或矩阵。根据投影变换的实现方式，分为线性子空间法和非线性子空间法。常用的子空间特征提取方法有主成分分析法(PCA)，FisherPalm方法，BDPCA(Bi-directional PCA)等。</li>\n<li>基于编码的方法是将掌纹图像看作纹理图像，根据某些规则对纹理图像进行编码。Zhang等提出了一种名为PalmCode的编码方法，该方法首先采用2DGabor对图像进行滤波处理，然后根据滤波结果的实部和虚部的正负来进行编码。Kong等提出使用六个方向的Gabor滤波器对掌纹图像滤波, 并对幅值最小的方向编码, 称为竞争编码(Competitive code)。由于竞争编码考察了掌纹图像的方向信息，对光照不敏感，因此识别精度很高。</li>\n</ol>\n<h2 id=\"EDCC\"><a href=\"#EDCC\" class=\"headerlink\" title=\"EDCC\"></a>EDCC</h2><p>掌纹充满了线条和纹理特征，具备丰富的方向信息。因此，基于方向编码被认为是最有效的掌纹特征提取方法。而竞争编码是辨识度极高的编码方法之一，它使用不同方向的滤波器与掌纹图像进行卷积，之后根据一定的编码规则对掌纹图像进行编码。</p>\n<p>EDCC算法有以下关键点:</p>\n<ol>\n<li>通过图像增强算子处理原始掌纹图像，使得纹线更加突出，提取的方向更加准确。</li>\n<li>使用一组方向不同的2DGabor小波滤波器对图像进行滤波。</li>\n<li>选择滤波响应值最大和次大的方向作为该点所在纹线的主要方向和次要方向，进而进行编码。</li>\n</ol>\n<p>下面将对这三个关键点进行详细解释。</p>\n<h3 id=\"图像增强\"><a href=\"#图像增强\" class=\"headerlink\" title=\"图像增强\"></a>图像增强</h3><p>拉普拉斯算子是图像锐化常用的方法，锐化可以增强图像的对比度，突出灰度值变化明显的部分，使比较模糊的纹线变得清晰。</p>\n<p>典型的核大小为的拉普拉斯算子:<img src=\"https://i.loli.net/2017/10/21/59eb3382cb19d.png\" alt=\"\"></p>\n<p>使用上式中的算子对如下掌纹图像进行卷积</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb33f8436b2.bmp\" alt=\"\"></p>\n<p>得到增强掌纹后的结果如下图所示。</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb343537443.png\" alt=\"\"></p>\n<p>纹线明显被增强显示出来，而且纹线处的灰度值大大高于周围皮肤灰度值。</p>\n<p>实验表明，拉普拉斯增强算子可以有效的增强纹线对比度。所以EDCC算法在对图像使用2DGabor小波滤波之前，先对图像进行拉普拉斯变换。</p>\n<h3 id=\"2DGabor小波\"><a href=\"#2DGabor小波\" class=\"headerlink\" title=\"2DGabor小波\"></a>2DGabor小波</h3><p>2DGabor小波滤波器与人类视觉刺激响应非常相似。如下图所示，</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb399728299.png\" alt=\"\"></p>\n<p>第一行是人类视觉感受野，第二行是Gabor小波滤波器，第三行是两者之间的残差，可见两者及其相似。而且Gabor小波可以变换方向和尺度，对于不同方向的纹线都能很好地适应。</p>\n<p>函数形式表示如下：</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb3a260404b.png\" alt=\"\"></p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb3a4a20358.png\" alt=\"\"></p>\n<p>取3个尺度，6个方向构成一组滤波器，并对掌纹图像进行卷积，得到结果如下图所示</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb3ab3874ed.png\" alt=\"\"></p>\n<p>不难发现，经过2DGabor小波滤波后的掌纹纹线非常清晰。</p>\n<h3 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h3><p>采用一组尺度统一方向不同的2DGabor小波滤波器对图像做卷积后，可以得到掌纹图像每一个像素点对应的响应值，不难推断最大响应值对应的滤波器方向可以近似表示该点的掌纹线方向，但并不是纹线准确的方向。</p>\n<p>如下图所示，选择掌纹图像主线上的两个像素点与一组方向个数为6的2DGabor小波滤波器进行卷积，并计算相应滤波响应值。然后确定具有最大滤波响应的取向作为主要方向，从图中可以看出，(a)和(b)主要方向是相同的。</p>\n<p>实际上，这两个像素的真正的主要方向分别在提取的主要方向的左侧和右侧。这种现象也在掌纹的其他部位也可以发现。因此，基于最大滤波响应提取的主要方向并不能准确地表示掌纹真实的方向。</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb3ce12a9be.png\" alt=\"\"></p>\n<p>根据滤波响应提取掌纹主要方向的方法基于掌纹图像中的像素属于一条线的基本假设。当滤波器的方向与掌纹的主要方向相同时，滤波响应将达到最大值。</p>\n<p>换句话说，滤波器响应与主线和滤波器之间的重叠程度成正比。然而，因为在实践中使用的滤波器方向有限，可能没有Gabor滤波器具有与掌纹图像的主要方向相同的取向。结果，在这种情况下，提取的方向不能准确地表示掌纹的主要方向特征。</p>\n<p>通常来说，2DGabor小波滤波器方向越靠近掌纹的主要方向，得到的滤波响应就越大。因此，提取主要方向（通常也具有较大的滤波响应）的相邻方向可以与主要方向相结合，来更准确地表示掌纹图像。</p>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p>首先使用一个尺度、N个方向的一组2DGabor小波滤波器对图像进行卷积。<br>掌纹纹线上的一点I(x, y)的主要方向通过计算该点最大响应值对应的滤波器方向来确定。即: <img src=\"https://i.loli.net/2017/10/21/59eb44de0bec2.png\" alt=\"\"></p>\n<p>式中：C是掌纹图像的主要方向。令Cleft和Cright表示主要方向相邻的方向<img src=\"https://i.loli.net/2017/10/21/59eb452103f23.png\" alt=\"\"></p>\n<p>通过比较Cleft和Cright方向对应的响应值，得到次要方向Cs的编码<img src=\"https://i.loli.net/2017/10/21/59eb455ea7c52.png\" alt=\"\"></p>\n<p>由于C表示掌纹图像的主要方向特征，Cs表示次要方向特征，所以结合C和Cs能够较为准确表示纹线的真实方向。</p>\n<p>(C, Cs)的计算例子如下图所示</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb45a465ef2.png\" alt=\"\"></p>\n<h4 id=\"匹配方式\"><a href=\"#匹配方式\" class=\"headerlink\" title=\"匹配方式\"></a>匹配方式</h4><p>在掌纹图像的匹配阶段，使用与竞争编码方法相似但不同的角距离来确定两个掌纹图像之间的相似度。</p>\n<p>两个掌纹图像和之间的匹配得分定义为：<img src=\"https://i.loli.net/2017/10/21/59eb56ad4c0fd.png\" alt=\"\"></p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb56db5a549.png\" alt=\"\"></p>\n<h2 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h2><h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>在掌纹验证这一步中，令掌纹数据库中每个掌纹图像与剩下所有的图像一一对比。假如两幅图像来自同一人，则称之为同类匹配，否则称之为异类匹配。</p>\n<p>在多光谱数据库中，每个人有12张手掌图片，每个光谱对应的数据库有6000张图片，所以有个匹配，其中同类匹配有33000个，异类匹配有17964000个。在同济大学掌纹数据库中，同类匹配有114000个，异类匹配有71880000个。图5.7展示了使用EDCC算法在多光谱数据库以及同济大学数据库上得到的匹配得分分布情况。可以发现，同类匹配得分与异类匹配得分明显分离，并且同类匹配得分远高于异类匹配得分。</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb57ffdd9f8.png\" alt=\"\"></p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb588595119.png\" alt=\"\"><br><img src=\"https://i.loli.net/2017/10/21/59eb584ff209b.png\" alt=\"\"></p>\n<p><strong>(a)-(e)分别为Red,Green,Blue,NIR,同济大学数据库</strong></p>\n<p>正确接受率(GAR)和错误接受率(FAR)可以评估算法的性能，ROC曲线通过设置所有可能的阈值进而得到对应的GAR和FAR值，并以FAR、GAR的值做为横、纵坐标绘制曲线。</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb61e520e28.png\" alt=\"\"></p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb620f24c4a.png\" alt=\"\"><br><img src=\"https://i.loli.net/2017/10/21/59eb622756e76.png\" alt=\"\"></p>\n<p><strong>(a)-(e)分别为Red,Green,Blue,NIR,同济大学数据库</strong></p>\n<p>上图展示了EDCC算法、DCC算法、小波变换分块统计算法以及BDPCA+LDA算法在不同数据库上验证得到的ROC曲线。忽略产生过拟合的BDPCA+LDA算法，不难发现，当FAR相同时，EDCC算法的GAR最高。</p>\n<p>等误率(Equal Error Rate, EER)是FAR=FRR对应的值。去除掉存在过拟合问题的BDPCA+LDA算法，不同算法对应的EER如表下表所示。可以发现，EDCC算法在所有数据库上达到了最低的EER。对比DCC算法，EDCC算法的EER下降率最大达到了73%((5.5105-1.4728)/5.5105)，平均下降率也在50%左右。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">EDCC</th>\n<th style=\"text-align:center\">DCC</th>\n<th style=\"text-align:center\">小波变换分块信息统计</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Red</td>\n<td style=\"text-align:center\">1.2612</td>\n<td style=\"text-align:center\">4.0145</td>\n<td style=\"text-align:center\">2.2772</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Green</td>\n<td style=\"text-align:center\">1.8715</td>\n<td style=\"text-align:center\">4.7460</td>\n<td style=\"text-align:center\">3.3249</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Blue</td>\n<td style=\"text-align:center\">1.7455</td>\n<td style=\"text-align:center\">4.5881</td>\n<td style=\"text-align:center\">3.2456</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NIR</td>\n<td style=\"text-align:center\">1.4728</td>\n<td style=\"text-align:center\">5.5105</td>\n<td style=\"text-align:center\">2.0192</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">同济大学</td>\n<td style=\"text-align:center\">3.6116</td>\n<td style=\"text-align:center\">5.3703</td>\n<td style=\"text-align:center\">6.6747</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"识别\"><a href=\"#识别\" class=\"headerlink\" title=\"识别\"></a>识别</h3><p>识别是指通过逐个匹配数据库内的掌纹，确定一个未知掌纹来自何人。</p>\n<p>在本文的掌纹识别实验中，将每个手掌的N(N=1,2,3,4)张掌纹图像组成训练集，剩下的掌纹图像组成测试集。将测试集中的每张图像与训练集一一比较，来计算匹配得分，训练集中得分最高的样本对应的类别作为该测试图片的类别，通过此方法可以计算不同算法在不同训练集大小下的错误识别率。</p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb648e1e44e.png\" alt=\"\"></p>\n<p><img src=\"https://i.loli.net/2017/10/21/59eb64bc52383.png\" alt=\"\"><br><img src=\"https://i.loli.net/2017/10/21/59eb64d98edd3.png\" alt=\"\"></p>\n<p><strong>(a)-(e)分别为Red,Green,Blue,NIR,同济大学数据库</strong></p>\n<p>实验结果如上图所示。可以发现，EDCC算法在训练样本较少时，仍然可以取得较高的识别率，并且在训练样本个数相同的条件下，EDCC算法的错误率明显低于其他算法，换句话说，EDCC算法可以使用更少的训练样本得到更高的识别准确率。</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Sep 10 2018 21:18:09 GMT+0800 (中国标准时间)","title":"关于EDCC算法的诞生、原理、效果","path":"EDCC Algorithm/","eyeCatchImage":null,"excerpt":"EDCC算法的详细说明","date":"2017-10-17T16:00:00.000Z","pv":0,"totalPV":0,"categories":"我的开源项目","tags":["算法"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"layout":"post","title":"CMake语言和语法","subtitle":"整理CMake常用和进阶的使用方法","date":"2018-04-04T16:00:00.000Z","copyright":true,"photos":["images/cmake-logo.png"],"_content":"\n# CMake\n\n在项目或者工作中，会不可避免的使用到cmake来构建我们的项目，所以掌握cmake的基本语法，以及常用的和进阶的使用方法是非常重要的。\n\n下面我们将从一个简单的`hello cmake`示例开始，一步步的深入了解cmake的用法。\n\n<!-- more -->\n\n***Let's Go!***\n\n### 初探CMake，hello cmake\n\n#### 准备工作\n\n创建目录 /home/workspace/cmake_practice，我们之后的练习都放到这个目录的子目录下\n\n在cmake_practice目录下创建test1\n\n```shell\ncd /home/workspace/cmake_practice\nmkdir test1\ncd test1\n```\n\n创建main.c以及CMakeLists.txt\n\nmain.c内容如下\n\n```C\ninclude <stdio.h>\n\nint main(void)\n{\n    printf(\"Hello CMake!\\n\")\n    return 0;\n}\n```\n\nCMakeLists.txt内容如下\n\n```cmake\nPROJECT(hello-cmake)\nSET(SRC_LIST main.c)\nMESSAGE(STATUS \"This is BINARY dir\" ${PROJECT_BINARY_DIR})\nMESSAGE(STATUS \"This is SOURCE dir\" ${PROJECT_SOURCE_DIR})\nADD_EXECUTABLE(hello-cmake ${SRC_LIST})\n```\n\n#### 开始构建\n\n在test1目录下执行`cmake .`(. 代表当前目录)\n\n这时会在当前目录生成`CMakeFiles`、`cmake_install.cmake`、`Makefile`等文件\n\n我们只要关心Makefile就可以了，此时执行`make`，我们就得到了可执行文件`hello-cmake`\n\n运行`./hello-cmake`\n\n得到输出\n\n`Hello CMake!`\n\n#### 示例的语法解释\n\ncmake的函数可以通过`cmake --help-command cmd`来查看具体的语法及使用方法\n\n- PROJECT\n\n    语法：\n    ```cmake\n    project(<projectname> [languageName1 languageName2 ... ] )\n    ```\n    设置项目名称并可指定工程支持的语言，支持的语言列表是可以忽略的，默认情况表示支持所有语言。这个指令隐式的定义了两个cmake变量:\n\n        - <projectname>_BINARY_DIR\n        - <projectname>_SOURCE_DIR\n\n    因为采用的是内部编译，两个变量目前指的都是工程所在路径/home/workspace/cmake_practice/test1，后面我们会讲到外部编译，两者所指代的内容会有所不同。\n\n    同时 cmake 系统也帮助我们预定义了 `PROJECT_BINARY_DIR` 和 `PROJECT_SOURCE_DIR`\n    变量，他们的值分别跟 `<projectname>_BINARY_DIR` 与 `<projectname>_SOURCE_DIR` 一致。\n\n    为了统一起见，建议以后直接使用 `PROJECT_BINARY_DIR`，`PROJECT_SOURCE_DIR`，即\n    使修改了工程名称，也不会影响这两个变量。如果使用了\n    `<projectname>_SOURCE_DIR`，修改工程名称后，需要同时修改这些变量。\n\n- SET\n\n    语法：\n    ```cmake\n    SET(<variable> <value>\n        [[CACHE <type> <docstring> [FORCE]] | PARENT_SCOPE])\n    ```\n    在初探阶段，我们只需要知道`SET`命令可以用来显示的定义一个变量。\n    比如在这个例子中`SET(SRC_LIST main.c)`，即定义了一个变量`SRC_LIST`，此变量的值为`main.c`。当然如果有多个源文件，可以定义为`SET(SRC_LIST main.c test1.c test2.c)`。\n\n- MESSAGE\n\n    语法：\n    ```cmake\n    message([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR]\n            \"message to display\" ...)\n    ```\n    可选关键字决定消息的类型：\n    - none          = 重要信息\n    - STATUS        = 附带信息\n    - WARNING       = CMake警告，继续处理\n    - AUTHOR_WARNING= CMake警告（dev），继续处理\n    - SEND_ERROR    = CMake错误，继续处理，但跳过生成\n    - FATAL_ERROR   = CMake错误，停止处理和生成\n\n- ADD_EXECUTABLE\n\n    语法：\n    ```cmake\n    ADD_EXECUTABLE(<name> [WIN32] [MACOSX_BUNDLE]\n                    [EXCLUDE_FROM_ALL]\n                    source1 source2 ... sourceN)\n    ```\n    用于生成可执行的文件，源文件列表为`SRC_LIST`定义的源文件。在本例中我们使用`${}`来引用变量，这个cmake的变量使用方式。\n\n#### 基本语法规则\n\n本例中使用的基本语法规则有：\n\n1. 变量使用`${}`方式取值，但是在`IF`控制语句中是直接使用变量名\n1. COMMAND(param1 param2 ...)，参数间用*空格*或者*分号*分隔\n\n    e.g.\n    - ADD(hello-cmake main.c func.c)\n    - ADD(hello-cmake main.c;func.c)\n1. command是大小写无关的，但是参数和变量是大小写敏感的\n\n#### 内部构建与外部构建\n\n在本例中我们使用的是内部构建，即在`CMakeLists.txt`同级的目录下执行`cmake .`。内部构建会在SOURCE_DIR下生成很多临时的中间文件，不方便删除，也影响的源代码的阅读。\n\n所以我们推荐外部构建，所谓外部构建就是在一个单独的文件夹下面执行cmake，生成的中间文件和结果都在此文件夹下。\n\n对于本例，使用外部构建过程如下：\n\n1. 首先清除test1目录下除`main.c`、`CMakeLists.txt`外的所有文件及文件夹，最关键的是CMakeCache.txt，如果不清除cache，还是会构建到之前的构建目录下。\n1. 在test1目录下创建build文件夹\n1. 进入build文件夹，执行`cmake ..`(`..`代表上一层目录，即CMakeLists所在的文件夹)\n1. 运行make，即可在build文件夹下生成对应的可执行文件\n\n上述过程即为out-of-source外部编译。一个最大的好处是，对于原有的工程没有任何影响，所有动作全部发生在编译目录。\n\n通过外部编译进行工程构建，`PROJECT_SOURCE_DIR`仍然指代工程路径，即CMakeLists所在路径，\n而`PROJECT_BINARY_DIR`则指代编译路径，即`/home/workspace/cmake_practice/test1/build`。\n\n#### 小结\n\n本结我们通过一个简单的hello cmake示例，介绍了最基本的CMakeLists编写，以及一些基本的语法和命令用法。同时介绍了内部编译和外部编译，及外部编译的好处。\n\n下一节我们将丰富我们的hello cmake示例，使其看起来更像一个项目。\n\n## 更像一个项目的hello cmake\n\n本节的目标是让上一节的hello cmake更像一个项目，我们接下来要做的是:\n\n1. 为工程添加一个子目录，用来放置项目的源代码\n1. 添加一个子目录doc，用来工程文档`hello.txt`\n1. 在工程目录添加COPYRIGHT和README\n1. 在工程目录添加一个run_hello_cmake.sh脚本，用来调用`hello_cmake`可执行文件\n1. 将构建的结果放置构建目录的bin子目录\n1. 最终安装这些文件，将`hello_cmake`二进制文件以及`run_hello_cmake.sh`安装至`/usr/bin`目录下，将doc目录下的文件以及COPYRIGHT、README安装至`/usr/share/doc/cmake_practice/test1`目录下\n\n#### 准备工作\n\n在`/home/workspace/cmake_practice`目录下建立`test2`目录，将上一节中的`main.c CMakeLists.txt`拷贝到test2目录\n\n#### 添加子目录src\n\n```shell\nmkdir src\nmv main.c src\n```\n\n现在工程中有一个子目录`src`以及`CMakeLists.txt`。进入子目录，添加CMakeList如下\n\n```cmake\nADD_EXECUTABLE(hello_cmake main.c)\n```\n\n将test2工程的CMakeLists修改为\n\n```cmake\nPROJECT(hello-cmake)\nADD_SUBDIRECTORY(src bin)\n```\n\n然后建立build目录，进入build，执行`cmake .. & make`，构建完成后，目标文件hello-cmake位于`build/bin`目录下。\n\n#### 语法解释\n\n- ADD_SUBDIRECTORY\n\n    语法：\n    ```cmake\n    ADD_SUBDIRECTORY(source_dir [binary_dir]\n                    [EXCLUDE_FROM_ALL])\n    ```\n    用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置。\n\n    `EXCLUDE_FROM_ALL`参数的含义是将这个目录从编译过程中排除，比如，工程的`example`，可能需要工程构建完成之后，再进入`example`目录单独进行构建。\n\n上面的例子定义了将src子目录加入工程，并指定了编译输出路径为bin目录。如果不指定bin目录，那么编译的结果都将存放在build/src目录\n\n#### 换个地方保存目标二进制\n\n我们可以通过SET指令重新定义`EXECUTABLE_OUTPUT_PATH`和`LIBRARY_OUTPUT_PATH`变量，来指定最终的目标二进制的位置(指最终生成的 hello_cmake或者最终的共享库，不包含编译生成的中间文件)\n\n```cmake\nSET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_PATH}/bin)\nSET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_PATH}/lib)\n```\n\n在第一节我们提到了`<projectname>_BINARY_DIR`和`PROJECT_BINARY_DIR`变量，他们指的编译发生的当前目录，如果是内部编译，就相当于`PROJECT_SOURCE_DIR`也就是工程代码所在目录，如果是外部编译，指的是外部编译所在目录，也就是本例中的`build`目录。\n\n所以，上面两个指令分别定义了：可执行二进制的输出路径为`build/bin`和库的输出路径为`build/lib`。\n\n至于将这两条指令写在工程的CMakeLists中还是src目录下的CMakeList，只需要按照一个原则：在哪里`ADD_EXECUTABLE`或`ADD_LIBRARY`，如果需要改变目标存放的路径，就在其上加入上述定义。\n\n#### 如何安装\n\n安装的需要有两种，一种是从代码编译后直接`make install`安装，一种是打包时的指定目录安装。\n\n那我们的hello_cmake应该怎么进行安装呢？\n\n这里我们要用到一个新的cmake指令`INSTALL`和一个非常有用的变量`CMAKE_INSTALL_PREFIX`\n\n- `CMAKE_INSTALL_PREFIX`变量类似于configure脚本的--prefix，常见的使用方法形如：\n\n    `cmake -DCMAKE_INSTALL_PREFIX=/usr .`\n- `INSTALL`指令用于定义安装规则，安装的内容可以包括\n    1. 目标二进制\n    1. 动态库\n    1. 静态库\n    1. 文件、目录、脚本\n\nINSTALL指令包含了各种安装类型，我们需要一个个分开解释\n\n- 目标文件的安装\n\n    语法：\n    ```cmake\n    install(TARGETS targets...\n            [[ARCHIVE|LIBRARY|RUNTIME]\n            [DESTINATION <dir>]\n            [PERMISSIONS permissions...]\n            [CONFIGURATIONS [Debug|Release|...]]\n            [COMPONENT <component>]\n            [OPTIONAL]\n            ] [...])\n    ```\n    参数中的`TARGETS`后面跟的就是我们通过`ADD_EXECUTABLE`或者`ADD_LIBRARY`定义的目标文件，可能是可执行二进制、动态库、静态库。\n\n    目标类型也就相对应的有三种，`ARCHIVE`特指静态库，`LIBRARY`特指动态库，`RUNTIME`特指可执行目标二进制。\n\n    `DESTINATION`定义了安装的路径，如果路径以/开头，那么指的是绝对路径，这时候`CMAKE_INSTALL_PREFIX`其实就无效了。如果你希望使用`CMAKE_INSTALL_PREFIX`来定义安装路径，就要写成相对路径，即不要以/开头，那么安装后的路径就是`${CMAKE_INSTALL_PREFIX}/<DESTINATION 定义的路径>`\n\n    e.g.\n\n    ```cmake\n    install(TARGETS myExe mySharedLib myStaticLib\n            RUNTIME DESTINATION bin\n            LIBRARY DESTINATION lib\n            ARCHIVE DESTINATION lib/static)\n    ```\n\n    将会把\n\n    `myExe`安装到`${CMAKE_INSTALL_PREFIX}/bin`\n    `mySharedLib`安装到`${CMAKE_INSTALL_PREFIX}/lib`\n    `myStaticLib`安装到`${CMAKE_INSTALL_PREFIX}/lib/static`\n\n- 普通文件的安装\n\n    语法：\n    ```cmake\n    install(FILES files... DESTINATION <dir>\n            [PERMISSIONS permissions...]\n            [CONFIGURATIONS [Debug|Release|...]]\n            [COMPONENT <component>]\n            [RENAME <name>] [OPTIONAL])\n    ```\n\n    可用于安装一般文件，并可以指定访问权限，文件名是此指令所在路径下的相对路径。如果默认不定义权限`PERMISSIONS`，安装后的权限为：\n\n    `OWNER_WRITE`, `OWNER_READ`, `GROUP_READ`,和 `WORLD_READ`，即 644 权限\n\n- 非目标文件的\n\n    语法：\n    ```cmake\n    install(PROGRAMS files... DESTINATION <dir>\n            [PERMISSIONS permissions...]\n            [CONFIGURATIONS [Debug|Release|...]]\n            [COMPONENT <component>]\n            [RENAME <name>] [OPTIONAL])\n    ```\n\n    跟上面的 FILES 指令使用方法一样，唯一的不同是安装后权限为:\n`OWNER_EXECUTE`, `GROUP_EXECUTE`, 和 `WORLD_EXECUTE`，即 755 权限\n\n- 目录的安装\n\n    语法：\n    ```cmake\n    install(DIRECTORY dirs... DESTINATION <dir>\n            [FILE_PERMISSIONS permissions...]\n            [DIRECTORY_PERMISSIONS permissions...]\n            [USE_SOURCE_PERMISSIONS] [OPTIONAL]\n            [CONFIGURATIONS [Debug|Release|...]]\n            [COMPONENT <component>] [FILES_MATCHING]\n            [[PATTERN <pattern> | REGEX <regex>]\n            [EXCLUDE] [PERMISSIONS permissions...]] [...])\n    ```\n\n    这里主要介绍其中的`DIRECTORY`、`PATTERN`、`PERMISSIONS`参数。\n\n    - DIRECTORY：后面链接的是所在source目录的相对路径。但是abc和abc/有很大区别。如果目录名不以/结尾，那么这个目录将被安装为目标路径下的abc；如果目录名以/结尾，代表将这个目录中的内容安装到目标路径，但不包括这个目录本身。\n    - PATTERN：用于使用正则表达式进行过滤，`PERMISSIONS`用于指定PATTERN过滤后的文件权限。\n\n    e.g.\n    ```cmake\n    INSTALL(DIRECTORY icons scripts/ DESTINATION share/myproj\n            PATTERN \"CVS\" EXCLUDE\n            PATTERN \"scripts/*\"\n            PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ\n                GROUP_EXECUTE GROUP_READ)\n    ```\n    这条指令的执行结果是：\n    将`icons `目录安装到`<prefix>/share/myproj`，将`scripts/`中的内容安装到`<prefix>/share/myproj`不包含目录名为 CVS 的目录，对于 `scripts/*`文件指定权限为OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ.\n\n- 安装时CMAKE脚本的执行\n\n    语法：\n    ```cmake\n    install([[SCRIPT <file>] [CODE <code>]] [...])\n    ```\n\n    SCRIPT参数用于在安装时调用cmake脚本文件（`也就是<abc>.cmake`文件）CODE 参数用于执行CMAKE指令，必须以双引号括起来。比如：\n    `INSTALL(CODE \"MESSAGE(\\\"Sample install message.\\\")\")`\n\n#### 让我们的hello cmake支持安装\n\n安装本节开始的要求，下面改写各个目录的CMakeLists\n\n1. 安装COPYRIGHT/README，直接修改主工程文件CMakeLists.txt，加入以下指令：`INSTALL(FILES COPYRIGHT README DESTINATION share/doc/cmake_practice/test2)`\n1. 安装`hello_cmake`、`run_hello_cmake.sh`，修改主工程文件CMakeLists.txt，加入以下指令：`INSTALL(PROGRAMS run_hello_cmake.sh DESTINATION bin)`；修改src目录下CMakeLists.txt，加入以下命令：`INSTALL(PROGRAMS ${PROJECT_BINARY_DIR}/bin/hello_cmake DESTINATION bin)`\n1. 安装doc中的hello.txt，这里有两种方式：一是通过在 doc 目录建立CMakeLists.txt并将`doc`目录通过`ADD_SUBDIRECTORY`加入工程来完成。另一种方法是直接在工程目录通过`INSTALL(DIRECTORY 来完成)`。我们来尝试后者，顺便演示一下`DIRECTORY`的安装。因为`hello.txt`要安装到`/<prefix>/share/doc/cmake_practice/test2`，所以我们不能直接安装整个doc目录，这里采用的方式是安装doc目录中的内容，也就是使用\"doc/\"在工程文件中添加`INSTALL(DIRECTORY doc/hello.txt DESTINATION share/doc/cmake_practice/test2)`\n\n如果没有定义`CMAKE_INSTALL_PREFIX`，会默认安装到/usr/local下\n\n#### 小结\n\n本小节主要描述了如何在工程中使用多目录、各种安装指令以及`CMAKE_INSTALL_PREFIX`变量。\n\n在下一小节，我们将探讨如何在cmake中构建动态库和静态库，以及如何使用外部头文件和外部共享库。\n\n## 静态库与动态库\n\n静态库与动态库的创建知识点并不多，主要新引入了一个新的命令如下：\n\n```cmake\nADD_LIBRARY(<name> [STATIC | SHARED | MODULE]\n            [EXCLUDE_FROM_ALL]\n            source1 source2 ... sourceN)\n```\n\n类型有三种：\n\n1. `SHARED` : 动态库\n1. `STATIC` : 静态库\n1. `MODULE` : 在使用dyld的系统有效，如果不支持dyld，则被当作SHARED对待\n\n`EXCLUDE_FROM_ALL`参数的意思是这个库不会被默认构建，除非有其他的组建依赖或者手工构建\n\n#### 名字相同的动态库和静态库同时存在\n\n在同一个CMake中，如果`ADD_LIBRARY`的target名称相同，则后一个目标会覆盖前一个目标。如果我们想让名字相同的静态库和动态库同时存在，需要用到另外一个命令：\n\n```cmake\nSET_TARGET_PROPERTIES(target1 target2 ...\n                      PROPERTIES prop1 value1\n                      prop2 value2 ...)\n```\n\n这条指令可以用来设置输出的名称，对于动态库，还可以用来指定`动态库版本`和`API版本`。\n\n只需要在CMakeLists.txt中加如`SET_TARGET_PROPERTIES(hello_static PROPERTIES OUTPUT_NAME \"hello\")`，就可以同时得到libhello.a/libhello.so两个库了。\n\n#### 动态库版本号\n\n为了实现动态库版本号，我们仍然需要使用`SET_TARGET_PROPERTIES`指令。具体使用方法：`SET_TARGET_PROPERTIES(hello PROPERTIES VERSION 1.2 SOVERSION 1)`\n\n`VERSION`指代动态库版本，`SOVERSION`指代 API 版本。\n\n加如CMakeLists重新构建，在build目录下会生成：\n\n```shell\nlibhello.so.1.2\nlibhello.so.1->libhello.so.1.2\nlibhello.so ->libhello.so.1\n```\n\n#### 安装共享库和头文件\n\n利用上一节提到的`INSTALL`指令，我们将动态库以及静态库安装到指定的目录\n\n```cmake\nINSTALL(TARGETS hello hello_static\n        LIBRARY DESTINATION lib\n        ARCHIVE DESTINATION lib)\n```\n\n#### 小结\n\n本小节，我们谈到了：\n\n1. 如何通过`ADD_LIBRARY`指令构建动态库和静态库。\n1. 如何通过`SET_TARGET_PROPERTIES`同时构建同名的动态库和静态库。\n1. 如何通过`SET_TARGET_PROPERTIES`控制动态库版本\n1. 最终使用上一节谈到的`INSTALL`指令来安装动态、静态库。\n\n## 如何使用外部共享库和头文件\n\n#### 准备\n\n在`/home/workspace/cmake_practice`目录下建立test4目录，按照上一节，编写CMakeLists，生成自己的hello动态库静态库以及头文件，并安装到/usr/local下。\n\n#### 源文件和CMakeLists\n\n重复以前的步骤，建立`src`目录，编写源文件`main.c`，内容如下：\n\n```c\n#include <hello.h>\nint main()\n{\n    print_hello();\n    return 0;\n}\n```\n\n编写工程主文件`CMakeLists.txt`\n\n```cmake\nPROJECT(NEWHELLO)\nADD_SUBDIRECTORY(src)\n```\n\n编写`src/CMakeLists.txt`\n\n```cmake\nADD_EXECUTABLE(main main.c)\n```\n\n#### 外部构建\n\n按照习惯，仍然建立 build 目录，使用 cmake ..方式构建。\n过程：\n\n```shell\ncmake ..\nmake\n```\n\n构建失败，如果需要查看细节，可以用`make VERBOSE=1`来构建\n\n错误输出是：\n\n```txt\n/home/workspace/cmake_practice/test4/src/main.c:1:19: fatal error: hello.h: No such file or directory\n```\n\n#### 引入头文件搜索路径\n\nhello.h位于`/usr/local/include/hello`目录中，并没有位于系统标准的头文件路径。\n\n为了让我们的工程能够找到`hello.h`头文件，我们需要引入一个新的指令\n`INCLUDE_DIRECTORIES`，其完整语法为：\n\n```cmake\ninclude_directories([AFTER|BEFORE] [SYSTEM] dir1 dir2 ...)\n```\n\n这条指令可以用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割，如果路径中包含了空格，可以使用双引号将它括起来，默认的行为是追加到当前的头文件搜索路径的后面。\n\n现在我们在`src/CMakeLists.txt`中添加一个头文件搜索路径，方式很简单，加入：`INCLUDE_DIRECTORIES(/usr/local/include/hello)`\n\n进入build目录，重新进行构建，这时找不到hello.h的错误已经消失，但是出现了一个新的错误：\n\n```txt\nmain.c:(.text+0xa): undefined reference to `print_hello'\n```\n\n因为我们并没有link到共享库libhello上\n\n#### 为target添加共享库\n\n我们现在需要完成的任务是将目标文件链接到libhello，这里我们需要引入两个新的指令：\n\n`LINK_DIRECTORIES`和`TARGET_LINK_LIBRARIES`\n\nLINK_DIRECTORIES的语法是：\n\n```cmake\nlink_directories(directory1 directory2 ...)\n```\n\n这个指令非常简单，添加非标准的共享库搜索路径，比如，在工程内部同时存在共享库和可执行二进制，在编译时就需要指定一下这些共享库的路径。这个例子中我们没有用到这个指令。\n\nTARGET_LINK_LIBRARIES的语法是:\n\n```cmake\nTARGET_LINK_LIBRARIES(target library1\n                      <debug | optimized> library2\n                      ...)\n```\n\n这个指令可以用来为`target`添加需要链接的共享库，本例中是一个可执行文件，但是同样可以用于为自己编写的共享库添加共享库链接。\n\n为了解决我们前面遇到的`print_hello`未定义错误，我们需要作的是向\nsrc/CMakeLists.txt中添加如下指令：\n\n```cmake\nLINK_DIRECTORIES(/usr/local/lib)\nTARGET_LINK_LIBRARIES(main hello)\n```\n\n这里的hello指的是我们上一节构建的共享库libhello。\n\n进入build目录重新进行构建。\n\n```shell\ncmake ..\nmake\n```\n\n这是我们就得到了一个连接到libhello的可执行程序 main，位于 build/src目录，运行main的结果是输出：\n\n`Hello CMake!`\n\n让我们来检查一下`main`的链接情况：\n\n```shell\n[root@localhost src]# ldd main\n        linux-vdso.so.1 =>  (0x00007ffdb59ea000)\n        libhello.so.1 => /usr/local/lib/libhello.so.1 (0x00007fe24b577000)\n        libc.so.6 => /lib64/libc.so.6 (0x00007fe24b18e000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007fe24b77a000)\n```\n\n可以清楚的看到`main`确实链接了共享库`libhello`，而且链接的是动态库\n`libhello.so.1`\n\n那如何链接到静态库呢？方法很简单：将`TARGET_LINK_LIBRRARIES`指令修改为:\n\n`TARGET_LINK_LIBRARIES(main libhello.a)`\n\n重新构建后再来看一下`main`的链接情况\n\n```shell\n[root@localhost src]# ldd main\n        linux-vdso.so.1 =>  (0x00007fffa2597000)\n        libc.so.6 => /lib64/libc.so.6 (0x00007fb216c97000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007fb217080000)\n```\n\n说明`main`确实链接到了静态库`libhello.a`。\n\n#### 小结\n\n本节我们探讨了:\n\n- 如何通过`INCLUDE_DIRECTORIES`指令加入非标准的头文件搜索路径。\n- 如何通过`LINK_DIRECTORIES`指令加入非标准的库文件搜索路径。\n- 如果通过`TARGET_LINK_LIBRARIES`为库或可执行二进制加入库链接。\n\n到这里为止，您应该基本可以使用`cmake`工作了，但是还有很多高级的话题没有探讨，比如**编译条件检查**、**编译器定义**、**平台判断**等等。\n\n到这里，或许你可以理解前面讲到的“cmake的使用过程其实就是学习cmake语言并编写cmake程序的过程”，既然是“cmake语言”，自然涉及到变量、语法等。\n\n下一节，我们将抛开程序的话题，看看常用的CMAKE变量以及一些基本的控制语法规则。\n\n## CMake常用变量和常用环境变量\n\n使用`${}`进行变量的引用。在IF等语句中，是直接使用变量名而不通过`${}`取值。\n\n#### CMake常用变量\n\n- `CMAKE_BINARY_DIR`\n\n    `PROJECT_BINARY_DIR`\n\n    `<projectname>_BINARY_DIR`\n\n    这三个变量指代的内容是一致的，如果是`in source`编译，指得就是工程顶层目录，如果是`out-of-source`编译，指的是工程编译发生的目录。`PROJECT_BINARY_DIR`跟其他指令稍有区别，现在，你可以理解为他们是一致的。\n\n- `CMAKE_SOURCE_DIR`\n\n    `PROJECT_SOURCE_DIR`\n\n    `<projectname>_SOURCE_DIR`\n\n    这三个变量指代的内容是一致的，不论采用何种编译方式，都是工程顶层目录。也就是在`in source`编译时，他跟`CMAKE_BINARY_DIR`等变量一致。`PROJECT_SOURCE_DIR`跟其他指令稍有区别，现在，你可以理解为他们是一致的。\n\n- `CMAKE_CURRENT_SOURCE_DIR`\n\n指的是当前处理的`CMakeLists.txt`所在的路径，比如上面我们提到的src子目录。\n\n- `CMAKE_CURRRENT_BINARY_DIR`\n\n如果是`in-source`编译，它跟`CMAKE_CURRENT_SOURCE_DIR`一致，如果是`out-ofsource`编译，他指的是`target`编译目录。使用我们上面提到的`ADD_SUBDIRECTORY(src bin)`可以更改这个变量的值。\n使用`SET(EXECUTABLE_OUTPUT_PATH <新路径>)`并不会对这个变量造成影响，它仅仅修改了最终目标文件存放的路径。\n\n- `CMAKE_MODULE_PATH`\n\n这个变量用来定义自己的 cmake 模块所在的路径。如果你的工程比较复杂，有可能会自己编写一些 cmake 模块，这些 cmake 模块是随你的工程发布的，为了让 cmake 在处理CMakeLists.txt 时找到这些模块，你需要通过 SET 指令，将自己的 cmake 模块路径设置一下。\n比如\n\n```cmake\nSET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n```\n\n这时候你就可以通过`INCLUDE`指令来调用自己的模块了。\n\n#### CMake调用环境变量\n\n使用`$ENV{NAME}`指令就可以调用系统的环境变量了。\n\n比如\n\n```cmake\nMESSAGE(STATUS \"HOME dir: $ENV{HOME}\")\n```\n\n设置环境变量的方式是：\n\n`SET(ENV{KEY} VALUE)`\n\n#### 主要开关选项\n\n- `BUILD_SHARED_LIBS`\n\n这个开关用来控制默认的库编译方式，如果不进行设置，使用 ADD_LIBRARY并没有指定库类型的情况下，默认编译生成的库都是静态库。\n如果`SET(BUILD_SHARED_LIBS ON)`后，默认生成的为动态库。\n\n- `CMAKE_C_FLAGS`\n\n设置C编译选项，也可以通过指令`ADD_DEFINITIONS()`添加。\n\n- `CMAKE_CXX_FLAGS`\n\n设置C++编译选项，也可以通过指令`ADD_DEFINITIONS()`添加。\n\n## CMake常用指令\n\n#### 基本指令\n\n- `ADD_DEFINITIONS`\n\n向C/C++编译器添加-D定义，比如:`ADD_DEFINITIONS(-DENABLE_DEBUG -DABC)`，参数之间用空格分割。如果你的代码中定义了`#ifdef ENABLE_DEBUG #endif`，这个代码块就会生效。如果要添加其他的编译器开关，可以通过`CMAKE_C_FLAGS`变量和`CMAKE_CXX_FLAGS`变量设置\n\n- `ADD_DEPENDENCIES`\n\n定义target依赖的其他target，确保在编译本target之前，其他的 target 已经被构建。\n\n```cmake\nADD_DEPENDENCIES(target-name depend-target1\n                 depend-target2 ...)\n```\n\n- `ADD_TEST`与`ENABLE_TESTING`\n\n`ENABLE_TESTING`指令用来控制Makefile是否构建test目标，涉及工程所有目录。语法很简单，没有任何参数，ENABLE_TESTING()，一般情况这个指令放在工程的主CMakeLists.txt中。\n\n`ADD_TEST`指令的语法是:`ADD_TEST(testname Exename arg1 arg2 ...)`\n\ntestname是自定义的test名称，Exename可以是构建的目标文件也可以是外部脚本等等。后面连接传递给可执行文件的参数。如果没有在同一个CMakeLists.txt 中打开`ENABLE_TESTING()`指令，任何`ADD_TEST`都是无效的。\n\n比如我们前面的Helloworld例子，可以在工程主CMakeLists.txt 中添加\n\n```cmake\nADD_TEST(mytest ${PROJECT_BINARY_DIR}/bin/main)\nENABLE_TESTING()\n```\n\n生成`Makefile`后，就可以运行`make test`来执行测试了。\n\n- `AUX_SOURCE_DIRECTORY`\n\n基本语法：`AUX_SOURCE_DIRECTORY(dir VARIABLE)`\n\n作用是发现一个目录下所有的源代码文件并将列表存储在一个变量中，这个指令临时被用来自动构建源文件列表。因为目前 cmake 还不能自动发现新添加的源文件。\n\n比如\n\n```cmake\nAUX_SOURCE_DIRECTORY(. SRC_LIST)\nADD_EXECUTABLE(main ${SRC_LIST})\n```\n\n你也可以通过后面提到的`FOREACH`指令来处理这个`LIST`\n\n- `CMAKE_MINIMUM_REQUIRED`\n\n其语法为`CMAKE_MINIMUM_REQUIRED(VERSION versionNumber [FATAL_ERROR])` 比如 `CMAKE_MINIMUM_REQUIRED(VERSION 2.5 FATAL_ERROR)` 如果cmake版本小与 2.5，则出现严重错误，整个过程中止。\n\n- `EXEC_PROGRAM`\n\n在CMakeLists.txt处理过程中执行命令，并不会在生成的Makefile中执行。具体语法为：\n\n```cmake\nEXEC_PROGRAM(Executable [directory in which to run]\n            [ARGS <arguments to executable>]\n            [OUTPUT_VARIABLE <var>]\n            [RETURN_VALUE <var>])\n\n```\n\n用于在指定的目录运行某个程序，通过ARGS添加参数，如果要获取输出和返回值，可通过`OUTPUT_VARIABLE`和`RETURN_VALUE`分别定义两个变量。\n\n这个指令可以帮助你在`CMakeLists.txt`处理过程中支持任何命令，比如根据系统情况去修改代码文件等等。\n\n举个简单的例子，我们要在src目录执行ls命令，并把结果和返回值存下来。\n\n可以直接在src/CMakeLists.txt中添加：\n\n```cmake\nEXEC_PROGRAM(ls ARGS \"*.c\" OUTPUT_VARIABLE LS_OUTPUT RETURN_VALUE LS_RVALUE)\nIF(not LS_RVALUE)\n    MESSAGE(STATUS \"ls result: \" ${LS_OUTPUT})\nENDIF(not LS_RVALUE)\n```\n\n在cmake生成Makefile的过程中，就会执行ls命令，如果返回0，则说明成功执行，那么就输出 ls *.c 的结果。关于IF语句，后面的控制指令会提到。\n\n- `FILE`\n\n    - FILE(WRITE filename \"message to write\"... )\n    - FILE(APPEND filename \"message to write\"... )\n    - FILE(READ filename variable)\n    - FILE(GLOB variable [RELATIVE path] [globbing expressions]...)\n    - FILE(GLOB_RECURSE variable [RELATIVE path] [globbing expressions]...)\n    - FILE(REMOVE [directory]...)\n    - FILE(REMOVE_RECURSE [directory]...)\n    - FILE(MAKE_DIRECTORY [directory]...)\n    - FILE(RELATIVE_PATH variable directory file)\n    - FILE(TO_CMAKE_PATH path result)\n    - FILE(TO_NATIVE_PATH path result)\n\n这里的语法都比较简单，不在展开介绍了。\n\n- `INCLUDE`\n\n用来载入CMakeLists.txt文件，也用于载入预定义的cmake模块。\n\n```cmake\nINCLUDE(file1 [OPTIONAL])\nINCLUDE(module [OPTIONAL])\n```\n\nOPTIONAL参数的作用是文件不存在也不会产生错误。你可以指定载入一个文件，如果定义的是一个模块，那么将在`CMAKE_MODULE_PATH`中搜索这个模块并载入。载入的内容将在处理到INCLUDE语句是直接执行。\n\n- `FILE_`指令\n\n    - FIND_FILE(<VAR> name1 path1 path2 ...)\n\n        VAR 变量代表找到的文件全路径，包含文件名\n\n    - FIND_LIBRARY(<VAR> name1 path1 path2 ...)\n\n        VAR 变量表示找到的库全路径，包含库文件名\n\n    - FIND_PATH(<VAR> name1 path1 path2 ...)\n\n        VAR 变量代表包含这个文件的路径。\n\n    - FIND_PROGRAM(<VAR> name1 path1 path2 ...)\n\n        VAR 变量代表包含这个程序的全路径。\n\n    - FIND_PACKAGE(<name> [major.minor] [QUIET] [NO_MODULE] [[REQUIRED|COMPONENTS] [componets...]])\n\n        用来调用预定义在 CMAKE_MODULE_PATH 下的 Find<name>.cmake 模块，你也可以自己定义`Find<name>`模块，通过`SET(CMAKE_MODULE_PATH dir)`将其放入工程的某个目录中供工程使用，我们在后面的章节会详细介绍`FIND_PACKAGE`的使用方法和`Find`模块的编写。\n\n        FIND_LIBRARY 示例：\n\n        ```cmake\n        FIND_LIBRARY(libX X11 /usr/lib)\n        IF(NOT libX)\n            MESSAGE(FATAL_ERROR “libX not found”)\n        ENDIF(NOT libX)\n        ```\n\n#### 控制命令\n\n- `IF`\n\n```cmake\nIF(expression)\n    # THEN section.\n    COMMAND1(ARGS ...)\n    COMMAND2(ARGS ...)\n    ...\nELSE(expression)\n    # ELSE section.\n    COMMAND1(ARGS ...)\n    COMMAND2(ARGS ...)\n    ...\nENDIF(expression)\n```\n\n另外一个指令是`ELSEIF`，总体把握一个原则，凡是出现IF的地方一定要有对应的ENDIF。出现 ELSEIF 的地方，ENDIF是可选的。\n\n表达式的使用方法如下:\n\nIF(var)，如果变量不是：空，0，N, NO, OFF, FALSE, NOTFOUND 或\n<var>_NOTFOUND 时，表达式为真。\n\nIF(NOT var )，与上述条件相反。\n\nIF(var1 AND var2)，当两个变量都为真是为真。\n\nIF(var1 OR var2)，当两个变量其中一个为真时为真。\n\nIF(COMMAND cmd)，当给定的 cmd 确实是命令并可以调用是为真。\n\nIF(EXISTS dir)或者 IF(EXISTS file)，当目录名或者文件名存在时为真。\n\nIF(file1 IS_NEWER_THAN file2)，当 file1 比 file2 新，或者 file1/file2 其中有一个不存在时为真，文件名请使用完整路径。\n\nIF(IS_DIRECTORY dirname)，当 dirname 是目录时，为真。\n\nIF(variable MATCHES regex)\n\nIF(string MATCHES regex)\n当给定的变量或者字符串能够匹配正则表达式 regex 时为真。比如：\n\n```cmake\nIF(\"hello\" MATCHES \"ell\")\n    MESSAGE(\"true\")\nENDIF(\"hello\" MATCHES \"ell\")\n```\n\n数字比较表达式:\n\n- IF(variable LESS number)\n- IF(string LESS number)\n- IF(variable GREATER number)\n- IF(string GREATER number)\n- IF(variable EQUAL number)\n- IF(string EQUAL number)\n\n按照字母序的排列进行比较:\n\n- IF(variable STRLESS string)\n- IF(string STRLESS string)\n- IF(variable STRGREATER string)\n- IF(string STRGREATER string)\n- IF(variable STREQUAL string)\n- IF(string STREQUAL string)\n\nIF(DEFINED variable)，如果变量被定义，为真。\n\n一个小例子，用来判断平台差异：\n\n```cmake\nIF(WIN32)\n    MESSAGE(STATUS “This is windows.”)\n    #作一些 Windows 相关的操作\nELSE(WIN32)\n    MESSAGE(STATUS “This is not windows”)\n    #作一些非 Windows 相关的操作\nENDIF(WIN32)\n```\n\n上述代码用来控制在不同的平台进行不同的控制，但是，阅读起来却并不是那么舒服，ELSE(WIN32)之类的语句很容易引起歧义。\n\n这就用到了我们在“常用变量”一节提到的`CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS`开\n关。可以`SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)`\n这时候就可以写成:\n\n```cmake\nIF(WIN32)\nELSE()\nENDIF()\n```\n\n如果配合 ELSEIF 使用，可能的写法是这样:\n\n```cmake\nIF(WIN32)\n    #do something related to WIN32\nELSEIF(UNIX)\n    #do something related to UNIX\nELSEIF(APPLE)\n    #do something related to APPLE\nENDIF(WIN32)\n```\n\n- `WHILE`\n\nWHILE 指令的语法是：\n\n```cmake\nWHILE(condition)\n    COMMAND1(ARGS ...)\n    COMMAND2(ARGS ...)\n    ...\nENDWHILE(condition)\n```\n\n其真假判断条件可以参考 IF 指令。\n\n- `FOREACH`\n\nFOREACH 指令的使用方法有三种形式：\n\n1. 列表\n\n    ```cmake\n    FOREACH(loop_var arg1 arg2 ...)\n        COMMAND1(ARGS ...)\n        COMMAND2(ARGS ...)\n        ...\n    ENDFOREACH(loop_var)\n    ```\n\n    像我们前面使用的`AUX_SOURCE_DIRECTORY`的例子\n\n    ```cmake\n    AUX_SOURCE_DIRECTORY(. SRC_LIST)\n    FOREACH(F ${SRC_LIST})\n        MESSAGE(${F})\n    ENDFOREACH(F)\n    ```\n\n1. 范围\n\n    ```cmake\n    FOREACH(loop_var RANGE total)\n    ENDFOREACH(loop_var)\n    ```\n\n    从 0 到 total 以1为步进\n\n    举例如下：\n\n    ```cmake\n    FOREACH(VAR RANGE 10)\n    MESSAGE(${VAR})\n    ENDFOREACH(VAR)\n    最终得到的输出是：\n    0\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    ```\n\n1. 范围和步进\n\n```cmake\nFOREACH(loop_var RANGE start stop [step])\nENDFOREACH(loop_var)\n```\n\n从start开始到stop结束，以step为步进，举例如下:\n\n```cmake\nFOREACH(A RANGE 5 15 3)\n    MESSAGE(${A})\nENDFOREACH(A)\n```\n\n最终得到的结果是：5 8 11 14\n\n这个指令需要注意的是，知道遇到`ENDFOREACH`指令，整个语句块才会得到真正的执行。\n\n## 模块的使用和自定义模块\n\n本章我们将着重介绍系统预定义的`Find`模块的使用以及自己编写`Find`模块，系统中提供了其他各种模块，一般情况需要使用`INCLUDE`指令显式的调用，`FIND_PACKAGE`指令是一个特例，可以直接调用预定义的模块。\n\n在本章，我们基于我们前面的libhello共享库，编写一个FindHello.cmake模块。\n\n对于系统预定义的`Find<name>.cmake`模块，每一个模块都会定义以下几个变量：\n\n- `<name>_FOUND`\n- `<name>_INCLUDE_DIR` or `<name>_INCLUDES`\n- `<name>_LIBRARY` or `<name>_LIBRARIES`\n\n你可以通过`<name>_FOUND`来判断模块是否被找到，如果没有找到，按照工程的需要关闭某些特性、给出提醒或者中止编译。\n\n如果`<name>_FOUND`为真，则将`<name>_INCLUDE_DIR`加入`INCLUDE_DIRECTORIES`，将`<name>_LIBRARY`加入 `TARGET_LINK_LIBRARIES`中。\n\n#### 编写FindHello模块\n\n我们在此前的test3实例中，演示了构建动态库、静态库的过程并进行了安装。接下来，我们在test6示例中演示如何自定义`FindHello`模块并使用这个模块构建工程：\n\n请在建立`/home/workspace/cmake_practice`中建立test6目录，并在其中建立cmake目录用于存放我们自己定义的`FindHello.cmake`模块，同时建立`src`目录，用于存放我们的源文件。\n\n定义`cmake/FindHello.cmake`模块\n\n```cmake\nFIND_PATH(HELLO_INCLUDE_DIR hello.h /usr/local/include/hello /usr/include/hello)\nFIND_LIBRARY(HELLO_LIBRARY NAMES hello PATH /usr/local/lib /usr/lib)\nIF(HELLO_INCLUDE_DIR AND HELLO_LIBRARY)\n        SET(HELLO_FOUND TRUE)\nENDIF()\nIF(HELLO_FOUND)\n        IF(NOT Hello_FIND_QUIETLY)\n                MESSAGE(STATUS \"Found Hello: ${HELLO_LIBRARY}\")\n        ENDIF()\nELSE()\n        IF(Hello_FIND_REQUIRED)\n                MESSAGE(FATAL_ERROR \"Cound not find hello library\")\n        ENDIF()\nENDIF()\n```\n\n`QUIET`参数，对应与我们编写的`FindHello`中的 `HELLO_FIND_QUIETLY`，如果不指定这个参数，就会执行：\n`MESSAGE(STATUS \"Found Hello: ${HELLO_LIBRARY}\")`\n\n`REQUIRED`参数，其含义是指这个共享库是否是工程必须的，如果使用了这个参数，说明这个链接库是必备库，如果找不到这个链接库，则工程不能编译。对应于`FindHello.cmake`模块中的`HELLO_FIND_REQUIRED`变量。\n同样，我们在上面的模块中定义了`HELLO_FOUND`,`HELLO_INCLUDE_DIR`,`HELLO_LIBRARY`变量供开发者在`FIND_PACKAGE`指令中使用。\n\n在src/main.c中写入如下内容：\n\n```c\n#include <hello.h>\nint main()\n{\n        print_hello();\n        return 0;\n}\n```\n\n建立src/CMakeLists.txt文件，内容如下：\n\n```cmake\nFIND_PACKAGE(Hello)\nIF(HELLO_FOUND)\n        ADD_EXECUTABLE(hello main.c)\n        INCLUDE_DIRECTORIES(${HELLO_INCLUDE_DIR})\n        TARGET_LINK_LIBRARIES(hello ${HELLO_LIBRARY})\nENDIF(HELLO_FOUND)\n```\n\n为了能够让工程找到`FindHello.cmake`模块(存放在工程中的cmake目录)我们在主工程文件CMakeLists.txt中加入：\n`SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)`\n\n仍然采用外部编译的方式，建立build目录，进入目录运行：\n\n```shell\ncmake ..\n```\n\n我们可以从输出中看到：\n\n```txt\n-- Found Hello: /usr/local/lib/libhello.so\n```\n\n如果没有找到hello library呢？\n\n我们可以尝试将/usr/local/lib/libhello.x 移动到/tmp目录，这样，按照FindHello模块的定义，就找不到hello library了，我们再来看一下构建结果：\n\n```shell\ncmake ..\n```\n\n仍然可以成功进行构建，但是这时候是没有办法编译的。修改 `FIND_PACKAGE(HELLO)`为`FIND_PACKAGE(HELLO REQUIRED)`，将 hello library定义为工程必须的共享库。\n\n这时候再次运行 cmake ..\n\n我们得到如下输出：\n\n`CMake Error: Could not find hello library.`\n\n因为找不到libhello.x，所以，整个Makefile生成过程被出错中止。","source":"_posts/CMake进阶学习.md","raw":"---\nlayout: post\ntitle: CMake语言和语法\nsubtitle: 整理CMake常用和进阶的使用方法\ndate: 2018-04-05\ncopyright: true\nphotos:\n  - images/cmake-logo.png\ntags:\n  - CMake\ncategories:\n  - 基础知识/技能\n---\n\n# CMake\n\n在项目或者工作中，会不可避免的使用到cmake来构建我们的项目，所以掌握cmake的基本语法，以及常用的和进阶的使用方法是非常重要的。\n\n下面我们将从一个简单的`hello cmake`示例开始，一步步的深入了解cmake的用法。\n\n<!-- more -->\n\n***Let's Go!***\n\n### 初探CMake，hello cmake\n\n#### 准备工作\n\n创建目录 /home/workspace/cmake_practice，我们之后的练习都放到这个目录的子目录下\n\n在cmake_practice目录下创建test1\n\n```shell\ncd /home/workspace/cmake_practice\nmkdir test1\ncd test1\n```\n\n创建main.c以及CMakeLists.txt\n\nmain.c内容如下\n\n```C\ninclude <stdio.h>\n\nint main(void)\n{\n    printf(\"Hello CMake!\\n\")\n    return 0;\n}\n```\n\nCMakeLists.txt内容如下\n\n```cmake\nPROJECT(hello-cmake)\nSET(SRC_LIST main.c)\nMESSAGE(STATUS \"This is BINARY dir\" ${PROJECT_BINARY_DIR})\nMESSAGE(STATUS \"This is SOURCE dir\" ${PROJECT_SOURCE_DIR})\nADD_EXECUTABLE(hello-cmake ${SRC_LIST})\n```\n\n#### 开始构建\n\n在test1目录下执行`cmake .`(. 代表当前目录)\n\n这时会在当前目录生成`CMakeFiles`、`cmake_install.cmake`、`Makefile`等文件\n\n我们只要关心Makefile就可以了，此时执行`make`，我们就得到了可执行文件`hello-cmake`\n\n运行`./hello-cmake`\n\n得到输出\n\n`Hello CMake!`\n\n#### 示例的语法解释\n\ncmake的函数可以通过`cmake --help-command cmd`来查看具体的语法及使用方法\n\n- PROJECT\n\n    语法：\n    ```cmake\n    project(<projectname> [languageName1 languageName2 ... ] )\n    ```\n    设置项目名称并可指定工程支持的语言，支持的语言列表是可以忽略的，默认情况表示支持所有语言。这个指令隐式的定义了两个cmake变量:\n\n        - <projectname>_BINARY_DIR\n        - <projectname>_SOURCE_DIR\n\n    因为采用的是内部编译，两个变量目前指的都是工程所在路径/home/workspace/cmake_practice/test1，后面我们会讲到外部编译，两者所指代的内容会有所不同。\n\n    同时 cmake 系统也帮助我们预定义了 `PROJECT_BINARY_DIR` 和 `PROJECT_SOURCE_DIR`\n    变量，他们的值分别跟 `<projectname>_BINARY_DIR` 与 `<projectname>_SOURCE_DIR` 一致。\n\n    为了统一起见，建议以后直接使用 `PROJECT_BINARY_DIR`，`PROJECT_SOURCE_DIR`，即\n    使修改了工程名称，也不会影响这两个变量。如果使用了\n    `<projectname>_SOURCE_DIR`，修改工程名称后，需要同时修改这些变量。\n\n- SET\n\n    语法：\n    ```cmake\n    SET(<variable> <value>\n        [[CACHE <type> <docstring> [FORCE]] | PARENT_SCOPE])\n    ```\n    在初探阶段，我们只需要知道`SET`命令可以用来显示的定义一个变量。\n    比如在这个例子中`SET(SRC_LIST main.c)`，即定义了一个变量`SRC_LIST`，此变量的值为`main.c`。当然如果有多个源文件，可以定义为`SET(SRC_LIST main.c test1.c test2.c)`。\n\n- MESSAGE\n\n    语法：\n    ```cmake\n    message([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR]\n            \"message to display\" ...)\n    ```\n    可选关键字决定消息的类型：\n    - none          = 重要信息\n    - STATUS        = 附带信息\n    - WARNING       = CMake警告，继续处理\n    - AUTHOR_WARNING= CMake警告（dev），继续处理\n    - SEND_ERROR    = CMake错误，继续处理，但跳过生成\n    - FATAL_ERROR   = CMake错误，停止处理和生成\n\n- ADD_EXECUTABLE\n\n    语法：\n    ```cmake\n    ADD_EXECUTABLE(<name> [WIN32] [MACOSX_BUNDLE]\n                    [EXCLUDE_FROM_ALL]\n                    source1 source2 ... sourceN)\n    ```\n    用于生成可执行的文件，源文件列表为`SRC_LIST`定义的源文件。在本例中我们使用`${}`来引用变量，这个cmake的变量使用方式。\n\n#### 基本语法规则\n\n本例中使用的基本语法规则有：\n\n1. 变量使用`${}`方式取值，但是在`IF`控制语句中是直接使用变量名\n1. COMMAND(param1 param2 ...)，参数间用*空格*或者*分号*分隔\n\n    e.g.\n    - ADD(hello-cmake main.c func.c)\n    - ADD(hello-cmake main.c;func.c)\n1. command是大小写无关的，但是参数和变量是大小写敏感的\n\n#### 内部构建与外部构建\n\n在本例中我们使用的是内部构建，即在`CMakeLists.txt`同级的目录下执行`cmake .`。内部构建会在SOURCE_DIR下生成很多临时的中间文件，不方便删除，也影响的源代码的阅读。\n\n所以我们推荐外部构建，所谓外部构建就是在一个单独的文件夹下面执行cmake，生成的中间文件和结果都在此文件夹下。\n\n对于本例，使用外部构建过程如下：\n\n1. 首先清除test1目录下除`main.c`、`CMakeLists.txt`外的所有文件及文件夹，最关键的是CMakeCache.txt，如果不清除cache，还是会构建到之前的构建目录下。\n1. 在test1目录下创建build文件夹\n1. 进入build文件夹，执行`cmake ..`(`..`代表上一层目录，即CMakeLists所在的文件夹)\n1. 运行make，即可在build文件夹下生成对应的可执行文件\n\n上述过程即为out-of-source外部编译。一个最大的好处是，对于原有的工程没有任何影响，所有动作全部发生在编译目录。\n\n通过外部编译进行工程构建，`PROJECT_SOURCE_DIR`仍然指代工程路径，即CMakeLists所在路径，\n而`PROJECT_BINARY_DIR`则指代编译路径，即`/home/workspace/cmake_practice/test1/build`。\n\n#### 小结\n\n本结我们通过一个简单的hello cmake示例，介绍了最基本的CMakeLists编写，以及一些基本的语法和命令用法。同时介绍了内部编译和外部编译，及外部编译的好处。\n\n下一节我们将丰富我们的hello cmake示例，使其看起来更像一个项目。\n\n## 更像一个项目的hello cmake\n\n本节的目标是让上一节的hello cmake更像一个项目，我们接下来要做的是:\n\n1. 为工程添加一个子目录，用来放置项目的源代码\n1. 添加一个子目录doc，用来工程文档`hello.txt`\n1. 在工程目录添加COPYRIGHT和README\n1. 在工程目录添加一个run_hello_cmake.sh脚本，用来调用`hello_cmake`可执行文件\n1. 将构建的结果放置构建目录的bin子目录\n1. 最终安装这些文件，将`hello_cmake`二进制文件以及`run_hello_cmake.sh`安装至`/usr/bin`目录下，将doc目录下的文件以及COPYRIGHT、README安装至`/usr/share/doc/cmake_practice/test1`目录下\n\n#### 准备工作\n\n在`/home/workspace/cmake_practice`目录下建立`test2`目录，将上一节中的`main.c CMakeLists.txt`拷贝到test2目录\n\n#### 添加子目录src\n\n```shell\nmkdir src\nmv main.c src\n```\n\n现在工程中有一个子目录`src`以及`CMakeLists.txt`。进入子目录，添加CMakeList如下\n\n```cmake\nADD_EXECUTABLE(hello_cmake main.c)\n```\n\n将test2工程的CMakeLists修改为\n\n```cmake\nPROJECT(hello-cmake)\nADD_SUBDIRECTORY(src bin)\n```\n\n然后建立build目录，进入build，执行`cmake .. & make`，构建完成后，目标文件hello-cmake位于`build/bin`目录下。\n\n#### 语法解释\n\n- ADD_SUBDIRECTORY\n\n    语法：\n    ```cmake\n    ADD_SUBDIRECTORY(source_dir [binary_dir]\n                    [EXCLUDE_FROM_ALL])\n    ```\n    用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置。\n\n    `EXCLUDE_FROM_ALL`参数的含义是将这个目录从编译过程中排除，比如，工程的`example`，可能需要工程构建完成之后，再进入`example`目录单独进行构建。\n\n上面的例子定义了将src子目录加入工程，并指定了编译输出路径为bin目录。如果不指定bin目录，那么编译的结果都将存放在build/src目录\n\n#### 换个地方保存目标二进制\n\n我们可以通过SET指令重新定义`EXECUTABLE_OUTPUT_PATH`和`LIBRARY_OUTPUT_PATH`变量，来指定最终的目标二进制的位置(指最终生成的 hello_cmake或者最终的共享库，不包含编译生成的中间文件)\n\n```cmake\nSET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_PATH}/bin)\nSET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_PATH}/lib)\n```\n\n在第一节我们提到了`<projectname>_BINARY_DIR`和`PROJECT_BINARY_DIR`变量，他们指的编译发生的当前目录，如果是内部编译，就相当于`PROJECT_SOURCE_DIR`也就是工程代码所在目录，如果是外部编译，指的是外部编译所在目录，也就是本例中的`build`目录。\n\n所以，上面两个指令分别定义了：可执行二进制的输出路径为`build/bin`和库的输出路径为`build/lib`。\n\n至于将这两条指令写在工程的CMakeLists中还是src目录下的CMakeList，只需要按照一个原则：在哪里`ADD_EXECUTABLE`或`ADD_LIBRARY`，如果需要改变目标存放的路径，就在其上加入上述定义。\n\n#### 如何安装\n\n安装的需要有两种，一种是从代码编译后直接`make install`安装，一种是打包时的指定目录安装。\n\n那我们的hello_cmake应该怎么进行安装呢？\n\n这里我们要用到一个新的cmake指令`INSTALL`和一个非常有用的变量`CMAKE_INSTALL_PREFIX`\n\n- `CMAKE_INSTALL_PREFIX`变量类似于configure脚本的--prefix，常见的使用方法形如：\n\n    `cmake -DCMAKE_INSTALL_PREFIX=/usr .`\n- `INSTALL`指令用于定义安装规则，安装的内容可以包括\n    1. 目标二进制\n    1. 动态库\n    1. 静态库\n    1. 文件、目录、脚本\n\nINSTALL指令包含了各种安装类型，我们需要一个个分开解释\n\n- 目标文件的安装\n\n    语法：\n    ```cmake\n    install(TARGETS targets...\n            [[ARCHIVE|LIBRARY|RUNTIME]\n            [DESTINATION <dir>]\n            [PERMISSIONS permissions...]\n            [CONFIGURATIONS [Debug|Release|...]]\n            [COMPONENT <component>]\n            [OPTIONAL]\n            ] [...])\n    ```\n    参数中的`TARGETS`后面跟的就是我们通过`ADD_EXECUTABLE`或者`ADD_LIBRARY`定义的目标文件，可能是可执行二进制、动态库、静态库。\n\n    目标类型也就相对应的有三种，`ARCHIVE`特指静态库，`LIBRARY`特指动态库，`RUNTIME`特指可执行目标二进制。\n\n    `DESTINATION`定义了安装的路径，如果路径以/开头，那么指的是绝对路径，这时候`CMAKE_INSTALL_PREFIX`其实就无效了。如果你希望使用`CMAKE_INSTALL_PREFIX`来定义安装路径，就要写成相对路径，即不要以/开头，那么安装后的路径就是`${CMAKE_INSTALL_PREFIX}/<DESTINATION 定义的路径>`\n\n    e.g.\n\n    ```cmake\n    install(TARGETS myExe mySharedLib myStaticLib\n            RUNTIME DESTINATION bin\n            LIBRARY DESTINATION lib\n            ARCHIVE DESTINATION lib/static)\n    ```\n\n    将会把\n\n    `myExe`安装到`${CMAKE_INSTALL_PREFIX}/bin`\n    `mySharedLib`安装到`${CMAKE_INSTALL_PREFIX}/lib`\n    `myStaticLib`安装到`${CMAKE_INSTALL_PREFIX}/lib/static`\n\n- 普通文件的安装\n\n    语法：\n    ```cmake\n    install(FILES files... DESTINATION <dir>\n            [PERMISSIONS permissions...]\n            [CONFIGURATIONS [Debug|Release|...]]\n            [COMPONENT <component>]\n            [RENAME <name>] [OPTIONAL])\n    ```\n\n    可用于安装一般文件，并可以指定访问权限，文件名是此指令所在路径下的相对路径。如果默认不定义权限`PERMISSIONS`，安装后的权限为：\n\n    `OWNER_WRITE`, `OWNER_READ`, `GROUP_READ`,和 `WORLD_READ`，即 644 权限\n\n- 非目标文件的\n\n    语法：\n    ```cmake\n    install(PROGRAMS files... DESTINATION <dir>\n            [PERMISSIONS permissions...]\n            [CONFIGURATIONS [Debug|Release|...]]\n            [COMPONENT <component>]\n            [RENAME <name>] [OPTIONAL])\n    ```\n\n    跟上面的 FILES 指令使用方法一样，唯一的不同是安装后权限为:\n`OWNER_EXECUTE`, `GROUP_EXECUTE`, 和 `WORLD_EXECUTE`，即 755 权限\n\n- 目录的安装\n\n    语法：\n    ```cmake\n    install(DIRECTORY dirs... DESTINATION <dir>\n            [FILE_PERMISSIONS permissions...]\n            [DIRECTORY_PERMISSIONS permissions...]\n            [USE_SOURCE_PERMISSIONS] [OPTIONAL]\n            [CONFIGURATIONS [Debug|Release|...]]\n            [COMPONENT <component>] [FILES_MATCHING]\n            [[PATTERN <pattern> | REGEX <regex>]\n            [EXCLUDE] [PERMISSIONS permissions...]] [...])\n    ```\n\n    这里主要介绍其中的`DIRECTORY`、`PATTERN`、`PERMISSIONS`参数。\n\n    - DIRECTORY：后面链接的是所在source目录的相对路径。但是abc和abc/有很大区别。如果目录名不以/结尾，那么这个目录将被安装为目标路径下的abc；如果目录名以/结尾，代表将这个目录中的内容安装到目标路径，但不包括这个目录本身。\n    - PATTERN：用于使用正则表达式进行过滤，`PERMISSIONS`用于指定PATTERN过滤后的文件权限。\n\n    e.g.\n    ```cmake\n    INSTALL(DIRECTORY icons scripts/ DESTINATION share/myproj\n            PATTERN \"CVS\" EXCLUDE\n            PATTERN \"scripts/*\"\n            PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ\n                GROUP_EXECUTE GROUP_READ)\n    ```\n    这条指令的执行结果是：\n    将`icons `目录安装到`<prefix>/share/myproj`，将`scripts/`中的内容安装到`<prefix>/share/myproj`不包含目录名为 CVS 的目录，对于 `scripts/*`文件指定权限为OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ.\n\n- 安装时CMAKE脚本的执行\n\n    语法：\n    ```cmake\n    install([[SCRIPT <file>] [CODE <code>]] [...])\n    ```\n\n    SCRIPT参数用于在安装时调用cmake脚本文件（`也就是<abc>.cmake`文件）CODE 参数用于执行CMAKE指令，必须以双引号括起来。比如：\n    `INSTALL(CODE \"MESSAGE(\\\"Sample install message.\\\")\")`\n\n#### 让我们的hello cmake支持安装\n\n安装本节开始的要求，下面改写各个目录的CMakeLists\n\n1. 安装COPYRIGHT/README，直接修改主工程文件CMakeLists.txt，加入以下指令：`INSTALL(FILES COPYRIGHT README DESTINATION share/doc/cmake_practice/test2)`\n1. 安装`hello_cmake`、`run_hello_cmake.sh`，修改主工程文件CMakeLists.txt，加入以下指令：`INSTALL(PROGRAMS run_hello_cmake.sh DESTINATION bin)`；修改src目录下CMakeLists.txt，加入以下命令：`INSTALL(PROGRAMS ${PROJECT_BINARY_DIR}/bin/hello_cmake DESTINATION bin)`\n1. 安装doc中的hello.txt，这里有两种方式：一是通过在 doc 目录建立CMakeLists.txt并将`doc`目录通过`ADD_SUBDIRECTORY`加入工程来完成。另一种方法是直接在工程目录通过`INSTALL(DIRECTORY 来完成)`。我们来尝试后者，顺便演示一下`DIRECTORY`的安装。因为`hello.txt`要安装到`/<prefix>/share/doc/cmake_practice/test2`，所以我们不能直接安装整个doc目录，这里采用的方式是安装doc目录中的内容，也就是使用\"doc/\"在工程文件中添加`INSTALL(DIRECTORY doc/hello.txt DESTINATION share/doc/cmake_practice/test2)`\n\n如果没有定义`CMAKE_INSTALL_PREFIX`，会默认安装到/usr/local下\n\n#### 小结\n\n本小节主要描述了如何在工程中使用多目录、各种安装指令以及`CMAKE_INSTALL_PREFIX`变量。\n\n在下一小节，我们将探讨如何在cmake中构建动态库和静态库，以及如何使用外部头文件和外部共享库。\n\n## 静态库与动态库\n\n静态库与动态库的创建知识点并不多，主要新引入了一个新的命令如下：\n\n```cmake\nADD_LIBRARY(<name> [STATIC | SHARED | MODULE]\n            [EXCLUDE_FROM_ALL]\n            source1 source2 ... sourceN)\n```\n\n类型有三种：\n\n1. `SHARED` : 动态库\n1. `STATIC` : 静态库\n1. `MODULE` : 在使用dyld的系统有效，如果不支持dyld，则被当作SHARED对待\n\n`EXCLUDE_FROM_ALL`参数的意思是这个库不会被默认构建，除非有其他的组建依赖或者手工构建\n\n#### 名字相同的动态库和静态库同时存在\n\n在同一个CMake中，如果`ADD_LIBRARY`的target名称相同，则后一个目标会覆盖前一个目标。如果我们想让名字相同的静态库和动态库同时存在，需要用到另外一个命令：\n\n```cmake\nSET_TARGET_PROPERTIES(target1 target2 ...\n                      PROPERTIES prop1 value1\n                      prop2 value2 ...)\n```\n\n这条指令可以用来设置输出的名称，对于动态库，还可以用来指定`动态库版本`和`API版本`。\n\n只需要在CMakeLists.txt中加如`SET_TARGET_PROPERTIES(hello_static PROPERTIES OUTPUT_NAME \"hello\")`，就可以同时得到libhello.a/libhello.so两个库了。\n\n#### 动态库版本号\n\n为了实现动态库版本号，我们仍然需要使用`SET_TARGET_PROPERTIES`指令。具体使用方法：`SET_TARGET_PROPERTIES(hello PROPERTIES VERSION 1.2 SOVERSION 1)`\n\n`VERSION`指代动态库版本，`SOVERSION`指代 API 版本。\n\n加如CMakeLists重新构建，在build目录下会生成：\n\n```shell\nlibhello.so.1.2\nlibhello.so.1->libhello.so.1.2\nlibhello.so ->libhello.so.1\n```\n\n#### 安装共享库和头文件\n\n利用上一节提到的`INSTALL`指令，我们将动态库以及静态库安装到指定的目录\n\n```cmake\nINSTALL(TARGETS hello hello_static\n        LIBRARY DESTINATION lib\n        ARCHIVE DESTINATION lib)\n```\n\n#### 小结\n\n本小节，我们谈到了：\n\n1. 如何通过`ADD_LIBRARY`指令构建动态库和静态库。\n1. 如何通过`SET_TARGET_PROPERTIES`同时构建同名的动态库和静态库。\n1. 如何通过`SET_TARGET_PROPERTIES`控制动态库版本\n1. 最终使用上一节谈到的`INSTALL`指令来安装动态、静态库。\n\n## 如何使用外部共享库和头文件\n\n#### 准备\n\n在`/home/workspace/cmake_practice`目录下建立test4目录，按照上一节，编写CMakeLists，生成自己的hello动态库静态库以及头文件，并安装到/usr/local下。\n\n#### 源文件和CMakeLists\n\n重复以前的步骤，建立`src`目录，编写源文件`main.c`，内容如下：\n\n```c\n#include <hello.h>\nint main()\n{\n    print_hello();\n    return 0;\n}\n```\n\n编写工程主文件`CMakeLists.txt`\n\n```cmake\nPROJECT(NEWHELLO)\nADD_SUBDIRECTORY(src)\n```\n\n编写`src/CMakeLists.txt`\n\n```cmake\nADD_EXECUTABLE(main main.c)\n```\n\n#### 外部构建\n\n按照习惯，仍然建立 build 目录，使用 cmake ..方式构建。\n过程：\n\n```shell\ncmake ..\nmake\n```\n\n构建失败，如果需要查看细节，可以用`make VERBOSE=1`来构建\n\n错误输出是：\n\n```txt\n/home/workspace/cmake_practice/test4/src/main.c:1:19: fatal error: hello.h: No such file or directory\n```\n\n#### 引入头文件搜索路径\n\nhello.h位于`/usr/local/include/hello`目录中，并没有位于系统标准的头文件路径。\n\n为了让我们的工程能够找到`hello.h`头文件，我们需要引入一个新的指令\n`INCLUDE_DIRECTORIES`，其完整语法为：\n\n```cmake\ninclude_directories([AFTER|BEFORE] [SYSTEM] dir1 dir2 ...)\n```\n\n这条指令可以用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割，如果路径中包含了空格，可以使用双引号将它括起来，默认的行为是追加到当前的头文件搜索路径的后面。\n\n现在我们在`src/CMakeLists.txt`中添加一个头文件搜索路径，方式很简单，加入：`INCLUDE_DIRECTORIES(/usr/local/include/hello)`\n\n进入build目录，重新进行构建，这时找不到hello.h的错误已经消失，但是出现了一个新的错误：\n\n```txt\nmain.c:(.text+0xa): undefined reference to `print_hello'\n```\n\n因为我们并没有link到共享库libhello上\n\n#### 为target添加共享库\n\n我们现在需要完成的任务是将目标文件链接到libhello，这里我们需要引入两个新的指令：\n\n`LINK_DIRECTORIES`和`TARGET_LINK_LIBRARIES`\n\nLINK_DIRECTORIES的语法是：\n\n```cmake\nlink_directories(directory1 directory2 ...)\n```\n\n这个指令非常简单，添加非标准的共享库搜索路径，比如，在工程内部同时存在共享库和可执行二进制，在编译时就需要指定一下这些共享库的路径。这个例子中我们没有用到这个指令。\n\nTARGET_LINK_LIBRARIES的语法是:\n\n```cmake\nTARGET_LINK_LIBRARIES(target library1\n                      <debug | optimized> library2\n                      ...)\n```\n\n这个指令可以用来为`target`添加需要链接的共享库，本例中是一个可执行文件，但是同样可以用于为自己编写的共享库添加共享库链接。\n\n为了解决我们前面遇到的`print_hello`未定义错误，我们需要作的是向\nsrc/CMakeLists.txt中添加如下指令：\n\n```cmake\nLINK_DIRECTORIES(/usr/local/lib)\nTARGET_LINK_LIBRARIES(main hello)\n```\n\n这里的hello指的是我们上一节构建的共享库libhello。\n\n进入build目录重新进行构建。\n\n```shell\ncmake ..\nmake\n```\n\n这是我们就得到了一个连接到libhello的可执行程序 main，位于 build/src目录，运行main的结果是输出：\n\n`Hello CMake!`\n\n让我们来检查一下`main`的链接情况：\n\n```shell\n[root@localhost src]# ldd main\n        linux-vdso.so.1 =>  (0x00007ffdb59ea000)\n        libhello.so.1 => /usr/local/lib/libhello.so.1 (0x00007fe24b577000)\n        libc.so.6 => /lib64/libc.so.6 (0x00007fe24b18e000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007fe24b77a000)\n```\n\n可以清楚的看到`main`确实链接了共享库`libhello`，而且链接的是动态库\n`libhello.so.1`\n\n那如何链接到静态库呢？方法很简单：将`TARGET_LINK_LIBRRARIES`指令修改为:\n\n`TARGET_LINK_LIBRARIES(main libhello.a)`\n\n重新构建后再来看一下`main`的链接情况\n\n```shell\n[root@localhost src]# ldd main\n        linux-vdso.so.1 =>  (0x00007fffa2597000)\n        libc.so.6 => /lib64/libc.so.6 (0x00007fb216c97000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007fb217080000)\n```\n\n说明`main`确实链接到了静态库`libhello.a`。\n\n#### 小结\n\n本节我们探讨了:\n\n- 如何通过`INCLUDE_DIRECTORIES`指令加入非标准的头文件搜索路径。\n- 如何通过`LINK_DIRECTORIES`指令加入非标准的库文件搜索路径。\n- 如果通过`TARGET_LINK_LIBRARIES`为库或可执行二进制加入库链接。\n\n到这里为止，您应该基本可以使用`cmake`工作了，但是还有很多高级的话题没有探讨，比如**编译条件检查**、**编译器定义**、**平台判断**等等。\n\n到这里，或许你可以理解前面讲到的“cmake的使用过程其实就是学习cmake语言并编写cmake程序的过程”，既然是“cmake语言”，自然涉及到变量、语法等。\n\n下一节，我们将抛开程序的话题，看看常用的CMAKE变量以及一些基本的控制语法规则。\n\n## CMake常用变量和常用环境变量\n\n使用`${}`进行变量的引用。在IF等语句中，是直接使用变量名而不通过`${}`取值。\n\n#### CMake常用变量\n\n- `CMAKE_BINARY_DIR`\n\n    `PROJECT_BINARY_DIR`\n\n    `<projectname>_BINARY_DIR`\n\n    这三个变量指代的内容是一致的，如果是`in source`编译，指得就是工程顶层目录，如果是`out-of-source`编译，指的是工程编译发生的目录。`PROJECT_BINARY_DIR`跟其他指令稍有区别，现在，你可以理解为他们是一致的。\n\n- `CMAKE_SOURCE_DIR`\n\n    `PROJECT_SOURCE_DIR`\n\n    `<projectname>_SOURCE_DIR`\n\n    这三个变量指代的内容是一致的，不论采用何种编译方式，都是工程顶层目录。也就是在`in source`编译时，他跟`CMAKE_BINARY_DIR`等变量一致。`PROJECT_SOURCE_DIR`跟其他指令稍有区别，现在，你可以理解为他们是一致的。\n\n- `CMAKE_CURRENT_SOURCE_DIR`\n\n指的是当前处理的`CMakeLists.txt`所在的路径，比如上面我们提到的src子目录。\n\n- `CMAKE_CURRRENT_BINARY_DIR`\n\n如果是`in-source`编译，它跟`CMAKE_CURRENT_SOURCE_DIR`一致，如果是`out-ofsource`编译，他指的是`target`编译目录。使用我们上面提到的`ADD_SUBDIRECTORY(src bin)`可以更改这个变量的值。\n使用`SET(EXECUTABLE_OUTPUT_PATH <新路径>)`并不会对这个变量造成影响，它仅仅修改了最终目标文件存放的路径。\n\n- `CMAKE_MODULE_PATH`\n\n这个变量用来定义自己的 cmake 模块所在的路径。如果你的工程比较复杂，有可能会自己编写一些 cmake 模块，这些 cmake 模块是随你的工程发布的，为了让 cmake 在处理CMakeLists.txt 时找到这些模块，你需要通过 SET 指令，将自己的 cmake 模块路径设置一下。\n比如\n\n```cmake\nSET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n```\n\n这时候你就可以通过`INCLUDE`指令来调用自己的模块了。\n\n#### CMake调用环境变量\n\n使用`$ENV{NAME}`指令就可以调用系统的环境变量了。\n\n比如\n\n```cmake\nMESSAGE(STATUS \"HOME dir: $ENV{HOME}\")\n```\n\n设置环境变量的方式是：\n\n`SET(ENV{KEY} VALUE)`\n\n#### 主要开关选项\n\n- `BUILD_SHARED_LIBS`\n\n这个开关用来控制默认的库编译方式，如果不进行设置，使用 ADD_LIBRARY并没有指定库类型的情况下，默认编译生成的库都是静态库。\n如果`SET(BUILD_SHARED_LIBS ON)`后，默认生成的为动态库。\n\n- `CMAKE_C_FLAGS`\n\n设置C编译选项，也可以通过指令`ADD_DEFINITIONS()`添加。\n\n- `CMAKE_CXX_FLAGS`\n\n设置C++编译选项，也可以通过指令`ADD_DEFINITIONS()`添加。\n\n## CMake常用指令\n\n#### 基本指令\n\n- `ADD_DEFINITIONS`\n\n向C/C++编译器添加-D定义，比如:`ADD_DEFINITIONS(-DENABLE_DEBUG -DABC)`，参数之间用空格分割。如果你的代码中定义了`#ifdef ENABLE_DEBUG #endif`，这个代码块就会生效。如果要添加其他的编译器开关，可以通过`CMAKE_C_FLAGS`变量和`CMAKE_CXX_FLAGS`变量设置\n\n- `ADD_DEPENDENCIES`\n\n定义target依赖的其他target，确保在编译本target之前，其他的 target 已经被构建。\n\n```cmake\nADD_DEPENDENCIES(target-name depend-target1\n                 depend-target2 ...)\n```\n\n- `ADD_TEST`与`ENABLE_TESTING`\n\n`ENABLE_TESTING`指令用来控制Makefile是否构建test目标，涉及工程所有目录。语法很简单，没有任何参数，ENABLE_TESTING()，一般情况这个指令放在工程的主CMakeLists.txt中。\n\n`ADD_TEST`指令的语法是:`ADD_TEST(testname Exename arg1 arg2 ...)`\n\ntestname是自定义的test名称，Exename可以是构建的目标文件也可以是外部脚本等等。后面连接传递给可执行文件的参数。如果没有在同一个CMakeLists.txt 中打开`ENABLE_TESTING()`指令，任何`ADD_TEST`都是无效的。\n\n比如我们前面的Helloworld例子，可以在工程主CMakeLists.txt 中添加\n\n```cmake\nADD_TEST(mytest ${PROJECT_BINARY_DIR}/bin/main)\nENABLE_TESTING()\n```\n\n生成`Makefile`后，就可以运行`make test`来执行测试了。\n\n- `AUX_SOURCE_DIRECTORY`\n\n基本语法：`AUX_SOURCE_DIRECTORY(dir VARIABLE)`\n\n作用是发现一个目录下所有的源代码文件并将列表存储在一个变量中，这个指令临时被用来自动构建源文件列表。因为目前 cmake 还不能自动发现新添加的源文件。\n\n比如\n\n```cmake\nAUX_SOURCE_DIRECTORY(. SRC_LIST)\nADD_EXECUTABLE(main ${SRC_LIST})\n```\n\n你也可以通过后面提到的`FOREACH`指令来处理这个`LIST`\n\n- `CMAKE_MINIMUM_REQUIRED`\n\n其语法为`CMAKE_MINIMUM_REQUIRED(VERSION versionNumber [FATAL_ERROR])` 比如 `CMAKE_MINIMUM_REQUIRED(VERSION 2.5 FATAL_ERROR)` 如果cmake版本小与 2.5，则出现严重错误，整个过程中止。\n\n- `EXEC_PROGRAM`\n\n在CMakeLists.txt处理过程中执行命令，并不会在生成的Makefile中执行。具体语法为：\n\n```cmake\nEXEC_PROGRAM(Executable [directory in which to run]\n            [ARGS <arguments to executable>]\n            [OUTPUT_VARIABLE <var>]\n            [RETURN_VALUE <var>])\n\n```\n\n用于在指定的目录运行某个程序，通过ARGS添加参数，如果要获取输出和返回值，可通过`OUTPUT_VARIABLE`和`RETURN_VALUE`分别定义两个变量。\n\n这个指令可以帮助你在`CMakeLists.txt`处理过程中支持任何命令，比如根据系统情况去修改代码文件等等。\n\n举个简单的例子，我们要在src目录执行ls命令，并把结果和返回值存下来。\n\n可以直接在src/CMakeLists.txt中添加：\n\n```cmake\nEXEC_PROGRAM(ls ARGS \"*.c\" OUTPUT_VARIABLE LS_OUTPUT RETURN_VALUE LS_RVALUE)\nIF(not LS_RVALUE)\n    MESSAGE(STATUS \"ls result: \" ${LS_OUTPUT})\nENDIF(not LS_RVALUE)\n```\n\n在cmake生成Makefile的过程中，就会执行ls命令，如果返回0，则说明成功执行，那么就输出 ls *.c 的结果。关于IF语句，后面的控制指令会提到。\n\n- `FILE`\n\n    - FILE(WRITE filename \"message to write\"... )\n    - FILE(APPEND filename \"message to write\"... )\n    - FILE(READ filename variable)\n    - FILE(GLOB variable [RELATIVE path] [globbing expressions]...)\n    - FILE(GLOB_RECURSE variable [RELATIVE path] [globbing expressions]...)\n    - FILE(REMOVE [directory]...)\n    - FILE(REMOVE_RECURSE [directory]...)\n    - FILE(MAKE_DIRECTORY [directory]...)\n    - FILE(RELATIVE_PATH variable directory file)\n    - FILE(TO_CMAKE_PATH path result)\n    - FILE(TO_NATIVE_PATH path result)\n\n这里的语法都比较简单，不在展开介绍了。\n\n- `INCLUDE`\n\n用来载入CMakeLists.txt文件，也用于载入预定义的cmake模块。\n\n```cmake\nINCLUDE(file1 [OPTIONAL])\nINCLUDE(module [OPTIONAL])\n```\n\nOPTIONAL参数的作用是文件不存在也不会产生错误。你可以指定载入一个文件，如果定义的是一个模块，那么将在`CMAKE_MODULE_PATH`中搜索这个模块并载入。载入的内容将在处理到INCLUDE语句是直接执行。\n\n- `FILE_`指令\n\n    - FIND_FILE(<VAR> name1 path1 path2 ...)\n\n        VAR 变量代表找到的文件全路径，包含文件名\n\n    - FIND_LIBRARY(<VAR> name1 path1 path2 ...)\n\n        VAR 变量表示找到的库全路径，包含库文件名\n\n    - FIND_PATH(<VAR> name1 path1 path2 ...)\n\n        VAR 变量代表包含这个文件的路径。\n\n    - FIND_PROGRAM(<VAR> name1 path1 path2 ...)\n\n        VAR 变量代表包含这个程序的全路径。\n\n    - FIND_PACKAGE(<name> [major.minor] [QUIET] [NO_MODULE] [[REQUIRED|COMPONENTS] [componets...]])\n\n        用来调用预定义在 CMAKE_MODULE_PATH 下的 Find<name>.cmake 模块，你也可以自己定义`Find<name>`模块，通过`SET(CMAKE_MODULE_PATH dir)`将其放入工程的某个目录中供工程使用，我们在后面的章节会详细介绍`FIND_PACKAGE`的使用方法和`Find`模块的编写。\n\n        FIND_LIBRARY 示例：\n\n        ```cmake\n        FIND_LIBRARY(libX X11 /usr/lib)\n        IF(NOT libX)\n            MESSAGE(FATAL_ERROR “libX not found”)\n        ENDIF(NOT libX)\n        ```\n\n#### 控制命令\n\n- `IF`\n\n```cmake\nIF(expression)\n    # THEN section.\n    COMMAND1(ARGS ...)\n    COMMAND2(ARGS ...)\n    ...\nELSE(expression)\n    # ELSE section.\n    COMMAND1(ARGS ...)\n    COMMAND2(ARGS ...)\n    ...\nENDIF(expression)\n```\n\n另外一个指令是`ELSEIF`，总体把握一个原则，凡是出现IF的地方一定要有对应的ENDIF。出现 ELSEIF 的地方，ENDIF是可选的。\n\n表达式的使用方法如下:\n\nIF(var)，如果变量不是：空，0，N, NO, OFF, FALSE, NOTFOUND 或\n<var>_NOTFOUND 时，表达式为真。\n\nIF(NOT var )，与上述条件相反。\n\nIF(var1 AND var2)，当两个变量都为真是为真。\n\nIF(var1 OR var2)，当两个变量其中一个为真时为真。\n\nIF(COMMAND cmd)，当给定的 cmd 确实是命令并可以调用是为真。\n\nIF(EXISTS dir)或者 IF(EXISTS file)，当目录名或者文件名存在时为真。\n\nIF(file1 IS_NEWER_THAN file2)，当 file1 比 file2 新，或者 file1/file2 其中有一个不存在时为真，文件名请使用完整路径。\n\nIF(IS_DIRECTORY dirname)，当 dirname 是目录时，为真。\n\nIF(variable MATCHES regex)\n\nIF(string MATCHES regex)\n当给定的变量或者字符串能够匹配正则表达式 regex 时为真。比如：\n\n```cmake\nIF(\"hello\" MATCHES \"ell\")\n    MESSAGE(\"true\")\nENDIF(\"hello\" MATCHES \"ell\")\n```\n\n数字比较表达式:\n\n- IF(variable LESS number)\n- IF(string LESS number)\n- IF(variable GREATER number)\n- IF(string GREATER number)\n- IF(variable EQUAL number)\n- IF(string EQUAL number)\n\n按照字母序的排列进行比较:\n\n- IF(variable STRLESS string)\n- IF(string STRLESS string)\n- IF(variable STRGREATER string)\n- IF(string STRGREATER string)\n- IF(variable STREQUAL string)\n- IF(string STREQUAL string)\n\nIF(DEFINED variable)，如果变量被定义，为真。\n\n一个小例子，用来判断平台差异：\n\n```cmake\nIF(WIN32)\n    MESSAGE(STATUS “This is windows.”)\n    #作一些 Windows 相关的操作\nELSE(WIN32)\n    MESSAGE(STATUS “This is not windows”)\n    #作一些非 Windows 相关的操作\nENDIF(WIN32)\n```\n\n上述代码用来控制在不同的平台进行不同的控制，但是，阅读起来却并不是那么舒服，ELSE(WIN32)之类的语句很容易引起歧义。\n\n这就用到了我们在“常用变量”一节提到的`CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS`开\n关。可以`SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)`\n这时候就可以写成:\n\n```cmake\nIF(WIN32)\nELSE()\nENDIF()\n```\n\n如果配合 ELSEIF 使用，可能的写法是这样:\n\n```cmake\nIF(WIN32)\n    #do something related to WIN32\nELSEIF(UNIX)\n    #do something related to UNIX\nELSEIF(APPLE)\n    #do something related to APPLE\nENDIF(WIN32)\n```\n\n- `WHILE`\n\nWHILE 指令的语法是：\n\n```cmake\nWHILE(condition)\n    COMMAND1(ARGS ...)\n    COMMAND2(ARGS ...)\n    ...\nENDWHILE(condition)\n```\n\n其真假判断条件可以参考 IF 指令。\n\n- `FOREACH`\n\nFOREACH 指令的使用方法有三种形式：\n\n1. 列表\n\n    ```cmake\n    FOREACH(loop_var arg1 arg2 ...)\n        COMMAND1(ARGS ...)\n        COMMAND2(ARGS ...)\n        ...\n    ENDFOREACH(loop_var)\n    ```\n\n    像我们前面使用的`AUX_SOURCE_DIRECTORY`的例子\n\n    ```cmake\n    AUX_SOURCE_DIRECTORY(. SRC_LIST)\n    FOREACH(F ${SRC_LIST})\n        MESSAGE(${F})\n    ENDFOREACH(F)\n    ```\n\n1. 范围\n\n    ```cmake\n    FOREACH(loop_var RANGE total)\n    ENDFOREACH(loop_var)\n    ```\n\n    从 0 到 total 以1为步进\n\n    举例如下：\n\n    ```cmake\n    FOREACH(VAR RANGE 10)\n    MESSAGE(${VAR})\n    ENDFOREACH(VAR)\n    最终得到的输出是：\n    0\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    ```\n\n1. 范围和步进\n\n```cmake\nFOREACH(loop_var RANGE start stop [step])\nENDFOREACH(loop_var)\n```\n\n从start开始到stop结束，以step为步进，举例如下:\n\n```cmake\nFOREACH(A RANGE 5 15 3)\n    MESSAGE(${A})\nENDFOREACH(A)\n```\n\n最终得到的结果是：5 8 11 14\n\n这个指令需要注意的是，知道遇到`ENDFOREACH`指令，整个语句块才会得到真正的执行。\n\n## 模块的使用和自定义模块\n\n本章我们将着重介绍系统预定义的`Find`模块的使用以及自己编写`Find`模块，系统中提供了其他各种模块，一般情况需要使用`INCLUDE`指令显式的调用，`FIND_PACKAGE`指令是一个特例，可以直接调用预定义的模块。\n\n在本章，我们基于我们前面的libhello共享库，编写一个FindHello.cmake模块。\n\n对于系统预定义的`Find<name>.cmake`模块，每一个模块都会定义以下几个变量：\n\n- `<name>_FOUND`\n- `<name>_INCLUDE_DIR` or `<name>_INCLUDES`\n- `<name>_LIBRARY` or `<name>_LIBRARIES`\n\n你可以通过`<name>_FOUND`来判断模块是否被找到，如果没有找到，按照工程的需要关闭某些特性、给出提醒或者中止编译。\n\n如果`<name>_FOUND`为真，则将`<name>_INCLUDE_DIR`加入`INCLUDE_DIRECTORIES`，将`<name>_LIBRARY`加入 `TARGET_LINK_LIBRARIES`中。\n\n#### 编写FindHello模块\n\n我们在此前的test3实例中，演示了构建动态库、静态库的过程并进行了安装。接下来，我们在test6示例中演示如何自定义`FindHello`模块并使用这个模块构建工程：\n\n请在建立`/home/workspace/cmake_practice`中建立test6目录，并在其中建立cmake目录用于存放我们自己定义的`FindHello.cmake`模块，同时建立`src`目录，用于存放我们的源文件。\n\n定义`cmake/FindHello.cmake`模块\n\n```cmake\nFIND_PATH(HELLO_INCLUDE_DIR hello.h /usr/local/include/hello /usr/include/hello)\nFIND_LIBRARY(HELLO_LIBRARY NAMES hello PATH /usr/local/lib /usr/lib)\nIF(HELLO_INCLUDE_DIR AND HELLO_LIBRARY)\n        SET(HELLO_FOUND TRUE)\nENDIF()\nIF(HELLO_FOUND)\n        IF(NOT Hello_FIND_QUIETLY)\n                MESSAGE(STATUS \"Found Hello: ${HELLO_LIBRARY}\")\n        ENDIF()\nELSE()\n        IF(Hello_FIND_REQUIRED)\n                MESSAGE(FATAL_ERROR \"Cound not find hello library\")\n        ENDIF()\nENDIF()\n```\n\n`QUIET`参数，对应与我们编写的`FindHello`中的 `HELLO_FIND_QUIETLY`，如果不指定这个参数，就会执行：\n`MESSAGE(STATUS \"Found Hello: ${HELLO_LIBRARY}\")`\n\n`REQUIRED`参数，其含义是指这个共享库是否是工程必须的，如果使用了这个参数，说明这个链接库是必备库，如果找不到这个链接库，则工程不能编译。对应于`FindHello.cmake`模块中的`HELLO_FIND_REQUIRED`变量。\n同样，我们在上面的模块中定义了`HELLO_FOUND`,`HELLO_INCLUDE_DIR`,`HELLO_LIBRARY`变量供开发者在`FIND_PACKAGE`指令中使用。\n\n在src/main.c中写入如下内容：\n\n```c\n#include <hello.h>\nint main()\n{\n        print_hello();\n        return 0;\n}\n```\n\n建立src/CMakeLists.txt文件，内容如下：\n\n```cmake\nFIND_PACKAGE(Hello)\nIF(HELLO_FOUND)\n        ADD_EXECUTABLE(hello main.c)\n        INCLUDE_DIRECTORIES(${HELLO_INCLUDE_DIR})\n        TARGET_LINK_LIBRARIES(hello ${HELLO_LIBRARY})\nENDIF(HELLO_FOUND)\n```\n\n为了能够让工程找到`FindHello.cmake`模块(存放在工程中的cmake目录)我们在主工程文件CMakeLists.txt中加入：\n`SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)`\n\n仍然采用外部编译的方式，建立build目录，进入目录运行：\n\n```shell\ncmake ..\n```\n\n我们可以从输出中看到：\n\n```txt\n-- Found Hello: /usr/local/lib/libhello.so\n```\n\n如果没有找到hello library呢？\n\n我们可以尝试将/usr/local/lib/libhello.x 移动到/tmp目录，这样，按照FindHello模块的定义，就找不到hello library了，我们再来看一下构建结果：\n\n```shell\ncmake ..\n```\n\n仍然可以成功进行构建，但是这时候是没有办法编译的。修改 `FIND_PACKAGE(HELLO)`为`FIND_PACKAGE(HELLO REQUIRED)`，将 hello library定义为工程必须的共享库。\n\n这时候再次运行 cmake ..\n\n我们得到如下输出：\n\n`CMake Error: Could not find hello library.`\n\n因为找不到libhello.x，所以，整个Makefile生成过程被出错中止。","slug":"CMake进阶学习","published":1,"updated":"2018-09-10T13:18:07.880Z","comments":1,"link":"","_id":"cjlwefulq000tqbrtmg14cuqa","content":"<h1 id=\"CMake\"><a href=\"#CMake\" class=\"headerlink\" title=\"CMake\"></a>CMake</h1><p>在项目或者工作中，会不可避免的使用到cmake来构建我们的项目，所以掌握cmake的基本语法，以及常用的和进阶的使用方法是非常重要的。</p>\n<p>下面我们将从一个简单的<code>hello cmake</code>示例开始，一步步的深入了解cmake的用法。</p>\n<a id=\"more\"></a>\n<p><strong><em>Let’s Go!</em></strong></p>\n<h3 id=\"初探CMake，hello-cmake\"><a href=\"#初探CMake，hello-cmake\" class=\"headerlink\" title=\"初探CMake，hello cmake\"></a>初探CMake，hello cmake</h3><h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p>创建目录 /home/workspace/cmake_practice，我们之后的练习都放到这个目录的子目录下</p>\n<p>在cmake_practice目录下创建test1</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/workspace/cmake_practice</span><br><span class=\"line\">mkdir test1</span><br><span class=\"line\">cd test1</span><br></pre></td></tr></table></figure>\n<p>创建main.c以及CMakeLists.txt</p>\n<p>main.c内容如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello CMake!\\n\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>CMakeLists.txt内容如下</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PROJECT</span>(hello-cmake)</span><br><span class=\"line\"><span class=\"keyword\">SET</span>(SRC_LIST main.c)</span><br><span class=\"line\"><span class=\"keyword\">MESSAGE</span>(STATUS <span class=\"string\">\"This is BINARY dir\"</span> <span class=\"variable\">$&#123;PROJECT_BINARY_DIR&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">MESSAGE</span>(STATUS <span class=\"string\">\"This is SOURCE dir\"</span> <span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">ADD_EXECUTABLE</span>(hello-cmake <span class=\"variable\">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h4><p>在test1目录下执行<code>cmake .</code>(. 代表当前目录)</p>\n<p>这时会在当前目录生成<code>CMakeFiles</code>、<code>cmake_install.cmake</code>、<code>Makefile</code>等文件</p>\n<p>我们只要关心Makefile就可以了，此时执行<code>make</code>，我们就得到了可执行文件<code>hello-cmake</code></p>\n<p>运行<code>./hello-cmake</code></p>\n<p>得到输出</p>\n<p><code>Hello CMake!</code></p>\n<h4 id=\"示例的语法解释\"><a href=\"#示例的语法解释\" class=\"headerlink\" title=\"示例的语法解释\"></a>示例的语法解释</h4><p>cmake的函数可以通过<code>cmake --help-command cmd</code>来查看具体的语法及使用方法</p>\n<ul>\n<li><p>PROJECT</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">project</span>(&lt;projectname&gt; [languageName1 languageName2 ... ] )</span><br></pre></td></tr></table></figure>\n<p>  设置项目名称并可指定工程支持的语言，支持的语言列表是可以忽略的，默认情况表示支持所有语言。这个指令隐式的定义了两个cmake变量:</p>\n<pre><code>- &lt;projectname&gt;_BINARY_DIR\n- &lt;projectname&gt;_SOURCE_DIR\n</code></pre><p>  因为采用的是内部编译，两个变量目前指的都是工程所在路径/home/workspace/cmake_practice/test1，后面我们会讲到外部编译，两者所指代的内容会有所不同。</p>\n<p>  同时 cmake 系统也帮助我们预定义了 <code>PROJECT_BINARY_DIR</code> 和 <code>PROJECT_SOURCE_DIR</code><br>  变量，他们的值分别跟 <code>&lt;projectname&gt;_BINARY_DIR</code> 与 <code>&lt;projectname&gt;_SOURCE_DIR</code> 一致。</p>\n<p>  为了统一起见，建议以后直接使用 <code>PROJECT_BINARY_DIR</code>，<code>PROJECT_SOURCE_DIR</code>，即<br>  使修改了工程名称，也不会影响这两个变量。如果使用了<br>  <code>&lt;projectname&gt;_SOURCE_DIR</code>，修改工程名称后，需要同时修改这些变量。</p>\n</li>\n<li><p>SET</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span>(&lt;variable&gt; &lt;value&gt;</span><br><span class=\"line\">    [[CACHE &lt;type&gt; &lt;docstring&gt; [FORCE]] | PARENT_SCOPE])</span><br></pre></td></tr></table></figure>\n<p>  在初探阶段，我们只需要知道<code>SET</code>命令可以用来显示的定义一个变量。<br>  比如在这个例子中<code>SET(SRC_LIST main.c)</code>，即定义了一个变量<code>SRC_LIST</code>，此变量的值为<code>main.c</code>。当然如果有多个源文件，可以定义为<code>SET(SRC_LIST main.c test1.c test2.c)</code>。</p>\n</li>\n<li><p>MESSAGE</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message</span>([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR]</span><br><span class=\"line\">        <span class=\"string\">\"message to display\"</span> ...)</span><br></pre></td></tr></table></figure>\n<p>  可选关键字决定消息的类型：</p>\n<ul>\n<li>none          = 重要信息</li>\n<li>STATUS        = 附带信息</li>\n<li>WARNING       = CMake警告，继续处理</li>\n<li>AUTHOR_WARNING= CMake警告（dev），继续处理</li>\n<li>SEND_ERROR    = CMake错误，继续处理，但跳过生成</li>\n<li>FATAL_ERROR   = CMake错误，停止处理和生成</li>\n</ul>\n</li>\n<li><p>ADD_EXECUTABLE</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD_EXECUTABLE</span>(&lt;name&gt; [WIN32] [MACOSX_BUNDLE]</span><br><span class=\"line\">                [EXCLUDE_FROM_ALL]</span><br><span class=\"line\">                source1 source2 ... sourceN)</span><br></pre></td></tr></table></figure>\n<p>  用于生成可执行的文件，源文件列表为<code>SRC_LIST</code>定义的源文件。在本例中我们使用<code>${}</code>来引用变量，这个cmake的变量使用方式。</p>\n</li>\n</ul>\n<h4 id=\"基本语法规则\"><a href=\"#基本语法规则\" class=\"headerlink\" title=\"基本语法规则\"></a>基本语法规则</h4><p>本例中使用的基本语法规则有：</p>\n<ol>\n<li>变量使用<code>${}</code>方式取值，但是在<code>IF</code>控制语句中是直接使用变量名</li>\n<li><p>COMMAND(param1 param2 …)，参数间用<em>空格</em>或者<em>分号</em>分隔</p>\n<p> e.g.</p>\n<ul>\n<li>ADD(hello-cmake main.c func.c)</li>\n<li>ADD(hello-cmake main.c;func.c)</li>\n</ul>\n</li>\n<li>command是大小写无关的，但是参数和变量是大小写敏感的</li>\n</ol>\n<h4 id=\"内部构建与外部构建\"><a href=\"#内部构建与外部构建\" class=\"headerlink\" title=\"内部构建与外部构建\"></a>内部构建与外部构建</h4><p>在本例中我们使用的是内部构建，即在<code>CMakeLists.txt</code>同级的目录下执行<code>cmake .</code>。内部构建会在SOURCE_DIR下生成很多临时的中间文件，不方便删除，也影响的源代码的阅读。</p>\n<p>所以我们推荐外部构建，所谓外部构建就是在一个单独的文件夹下面执行cmake，生成的中间文件和结果都在此文件夹下。</p>\n<p>对于本例，使用外部构建过程如下：</p>\n<ol>\n<li>首先清除test1目录下除<code>main.c</code>、<code>CMakeLists.txt</code>外的所有文件及文件夹，最关键的是CMakeCache.txt，如果不清除cache，还是会构建到之前的构建目录下。</li>\n<li>在test1目录下创建build文件夹</li>\n<li>进入build文件夹，执行<code>cmake ..</code>(<code>..</code>代表上一层目录，即CMakeLists所在的文件夹)</li>\n<li>运行make，即可在build文件夹下生成对应的可执行文件</li>\n</ol>\n<p>上述过程即为out-of-source外部编译。一个最大的好处是，对于原有的工程没有任何影响，所有动作全部发生在编译目录。</p>\n<p>通过外部编译进行工程构建，<code>PROJECT_SOURCE_DIR</code>仍然指代工程路径，即CMakeLists所在路径，<br>而<code>PROJECT_BINARY_DIR</code>则指代编译路径，即<code>/home/workspace/cmake_practice/test1/build</code>。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>本结我们通过一个简单的hello cmake示例，介绍了最基本的CMakeLists编写，以及一些基本的语法和命令用法。同时介绍了内部编译和外部编译，及外部编译的好处。</p>\n<p>下一节我们将丰富我们的hello cmake示例，使其看起来更像一个项目。</p>\n<h2 id=\"更像一个项目的hello-cmake\"><a href=\"#更像一个项目的hello-cmake\" class=\"headerlink\" title=\"更像一个项目的hello cmake\"></a>更像一个项目的hello cmake</h2><p>本节的目标是让上一节的hello cmake更像一个项目，我们接下来要做的是:</p>\n<ol>\n<li>为工程添加一个子目录，用来放置项目的源代码</li>\n<li>添加一个子目录doc，用来工程文档<code>hello.txt</code></li>\n<li>在工程目录添加COPYRIGHT和README</li>\n<li>在工程目录添加一个run_hello_cmake.sh脚本，用来调用<code>hello_cmake</code>可执行文件</li>\n<li>将构建的结果放置构建目录的bin子目录</li>\n<li>最终安装这些文件，将<code>hello_cmake</code>二进制文件以及<code>run_hello_cmake.sh</code>安装至<code>/usr/bin</code>目录下，将doc目录下的文件以及COPYRIGHT、README安装至<code>/usr/share/doc/cmake_practice/test1</code>目录下</li>\n</ol>\n<h4 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p>在<code>/home/workspace/cmake_practice</code>目录下建立<code>test2</code>目录，将上一节中的<code>main.c CMakeLists.txt</code>拷贝到test2目录</p>\n<h4 id=\"添加子目录src\"><a href=\"#添加子目录src\" class=\"headerlink\" title=\"添加子目录src\"></a>添加子目录src</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir src</span><br><span class=\"line\">mv main.c src</span><br></pre></td></tr></table></figure>\n<p>现在工程中有一个子目录<code>src</code>以及<code>CMakeLists.txt</code>。进入子目录，添加CMakeList如下</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD_EXECUTABLE</span>(hello_cmake main.c)</span><br></pre></td></tr></table></figure>\n<p>将test2工程的CMakeLists修改为</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PROJECT</span>(hello-cmake)</span><br><span class=\"line\"><span class=\"keyword\">ADD_SUBDIRECTORY</span>(src bin)</span><br></pre></td></tr></table></figure>\n<p>然后建立build目录，进入build，执行<code>cmake .. &amp; make</code>，构建完成后，目标文件hello-cmake位于<code>build/bin</code>目录下。</p>\n<h4 id=\"语法解释\"><a href=\"#语法解释\" class=\"headerlink\" title=\"语法解释\"></a>语法解释</h4><ul>\n<li><p>ADD_SUBDIRECTORY</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD_SUBDIRECTORY</span>(source_dir [binary_dir]</span><br><span class=\"line\">                [EXCLUDE_FROM_ALL])</span><br></pre></td></tr></table></figure>\n<p>  用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置。</p>\n<p>  <code>EXCLUDE_FROM_ALL</code>参数的含义是将这个目录从编译过程中排除，比如，工程的<code>example</code>，可能需要工程构建完成之后，再进入<code>example</code>目录单独进行构建。</p>\n</li>\n</ul>\n<p>上面的例子定义了将src子目录加入工程，并指定了编译输出路径为bin目录。如果不指定bin目录，那么编译的结果都将存放在build/src目录</p>\n<h4 id=\"换个地方保存目标二进制\"><a href=\"#换个地方保存目标二进制\" class=\"headerlink\" title=\"换个地方保存目标二进制\"></a>换个地方保存目标二进制</h4><p>我们可以通过SET指令重新定义<code>EXECUTABLE_OUTPUT_PATH</code>和<code>LIBRARY_OUTPUT_PATH</code>变量，来指定最终的目标二进制的位置(指最终生成的 hello_cmake或者最终的共享库，不包含编译生成的中间文件)</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span>(EXECUTABLE_OUTPUT_PATH <span class=\"variable\">$&#123;PROJECT_BINARY_PATH&#125;</span>/bin)</span><br><span class=\"line\"><span class=\"keyword\">SET</span>(LIBRARY_OUTPUT_PATH <span class=\"variable\">$&#123;PROJECT_BINARY_PATH&#125;</span>/lib)</span><br></pre></td></tr></table></figure>\n<p>在第一节我们提到了<code>&lt;projectname&gt;_BINARY_DIR</code>和<code>PROJECT_BINARY_DIR</code>变量，他们指的编译发生的当前目录，如果是内部编译，就相当于<code>PROJECT_SOURCE_DIR</code>也就是工程代码所在目录，如果是外部编译，指的是外部编译所在目录，也就是本例中的<code>build</code>目录。</p>\n<p>所以，上面两个指令分别定义了：可执行二进制的输出路径为<code>build/bin</code>和库的输出路径为<code>build/lib</code>。</p>\n<p>至于将这两条指令写在工程的CMakeLists中还是src目录下的CMakeList，只需要按照一个原则：在哪里<code>ADD_EXECUTABLE</code>或<code>ADD_LIBRARY</code>，如果需要改变目标存放的路径，就在其上加入上述定义。</p>\n<h4 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h4><p>安装的需要有两种，一种是从代码编译后直接<code>make install</code>安装，一种是打包时的指定目录安装。</p>\n<p>那我们的hello_cmake应该怎么进行安装呢？</p>\n<p>这里我们要用到一个新的cmake指令<code>INSTALL</code>和一个非常有用的变量<code>CMAKE_INSTALL_PREFIX</code></p>\n<ul>\n<li><p><code>CMAKE_INSTALL_PREFIX</code>变量类似于configure脚本的–prefix，常见的使用方法形如：</p>\n<p>  <code>cmake -DCMAKE_INSTALL_PREFIX=/usr .</code></p>\n</li>\n<li><code>INSTALL</code>指令用于定义安装规则，安装的内容可以包括<ol>\n<li>目标二进制</li>\n<li>动态库</li>\n<li>静态库</li>\n<li>文件、目录、脚本</li>\n</ol>\n</li>\n</ul>\n<p>INSTALL指令包含了各种安装类型，我们需要一个个分开解释</p>\n<ul>\n<li><p>目标文件的安装</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">install</span>(TARGETS targets...</span><br><span class=\"line\">        [[ARCHIVE|LIBRARY|RUNTIME]</span><br><span class=\"line\">        [DESTINATION &lt;dir&gt;]</span><br><span class=\"line\">        [PERMISSIONS permissions...]</span><br><span class=\"line\">        [CONFIGURATIONS [Debug|Release|...]]</span><br><span class=\"line\">        [COMPONENT &lt;component&gt;]</span><br><span class=\"line\">        [OPTIONAL]</span><br><span class=\"line\">        ] [...])</span><br></pre></td></tr></table></figure>\n<p>  参数中的<code>TARGETS</code>后面跟的就是我们通过<code>ADD_EXECUTABLE</code>或者<code>ADD_LIBRARY</code>定义的目标文件，可能是可执行二进制、动态库、静态库。</p>\n<p>  目标类型也就相对应的有三种，<code>ARCHIVE</code>特指静态库，<code>LIBRARY</code>特指动态库，<code>RUNTIME</code>特指可执行目标二进制。</p>\n<p>  <code>DESTINATION</code>定义了安装的路径，如果路径以/开头，那么指的是绝对路径，这时候<code>CMAKE_INSTALL_PREFIX</code>其实就无效了。如果你希望使用<code>CMAKE_INSTALL_PREFIX</code>来定义安装路径，就要写成相对路径，即不要以/开头，那么安装后的路径就是<code>${CMAKE_INSTALL_PREFIX}/&lt;DESTINATION 定义的路径&gt;</code></p>\n<p>  e.g.</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">install</span>(TARGETS myExe mySharedLib myStaticLib</span><br><span class=\"line\">        RUNTIME DESTINATION bin</span><br><span class=\"line\">        LIBRARY DESTINATION lib</span><br><span class=\"line\">        ARCHIVE DESTINATION lib/static)</span><br></pre></td></tr></table></figure>\n<p>  将会把</p>\n<p>  <code>myExe</code>安装到<code>${CMAKE_INSTALL_PREFIX}/bin</code><br>  <code>mySharedLib</code>安装到<code>${CMAKE_INSTALL_PREFIX}/lib</code><br>  <code>myStaticLib</code>安装到<code>${CMAKE_INSTALL_PREFIX}/lib/static</code></p>\n</li>\n<li><p>普通文件的安装</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">install</span>(FILES files... DESTINATION &lt;dir&gt;</span><br><span class=\"line\">        [PERMISSIONS permissions...]</span><br><span class=\"line\">        [CONFIGURATIONS [Debug|Release|...]]</span><br><span class=\"line\">        [COMPONENT &lt;component&gt;]</span><br><span class=\"line\">        [RENAME &lt;name&gt;] [OPTIONAL])</span><br></pre></td></tr></table></figure>\n<p>  可用于安装一般文件，并可以指定访问权限，文件名是此指令所在路径下的相对路径。如果默认不定义权限<code>PERMISSIONS</code>，安装后的权限为：</p>\n<p>  <code>OWNER_WRITE</code>, <code>OWNER_READ</code>, <code>GROUP_READ</code>,和 <code>WORLD_READ</code>，即 644 权限</p>\n</li>\n<li><p>非目标文件的</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">install</span>(PROGRAMS files... DESTINATION &lt;dir&gt;</span><br><span class=\"line\">        [PERMISSIONS permissions...]</span><br><span class=\"line\">        [CONFIGURATIONS [Debug|Release|...]]</span><br><span class=\"line\">        [COMPONENT &lt;component&gt;]</span><br><span class=\"line\">        [RENAME &lt;name&gt;] [OPTIONAL])</span><br></pre></td></tr></table></figure>\n<p>  跟上面的 FILES 指令使用方法一样，唯一的不同是安装后权限为:<br><code>OWNER_EXECUTE</code>, <code>GROUP_EXECUTE</code>, 和 <code>WORLD_EXECUTE</code>，即 755 权限</p>\n</li>\n<li><p>目录的安装</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">install</span>(DIRECTORY dirs... DESTINATION &lt;dir&gt;</span><br><span class=\"line\">        [FILE_PERMISSIONS permissions...]</span><br><span class=\"line\">        [DIRECTORY_PERMISSIONS permissions...]</span><br><span class=\"line\">        [USE_SOURCE_PERMISSIONS] [OPTIONAL]</span><br><span class=\"line\">        [CONFIGURATIONS [Debug|Release|...]]</span><br><span class=\"line\">        [COMPONENT &lt;component&gt;] [FILES_MATCHING]</span><br><span class=\"line\">        [[PATTERN &lt;pattern&gt; | REGEX &lt;regex&gt;]</span><br><span class=\"line\">        [EXCLUDE] [PERMISSIONS permissions...]] [...])</span><br></pre></td></tr></table></figure>\n<p>  这里主要介绍其中的<code>DIRECTORY</code>、<code>PATTERN</code>、<code>PERMISSIONS</code>参数。</p>\n<ul>\n<li>DIRECTORY：后面链接的是所在source目录的相对路径。但是abc和abc/有很大区别。如果目录名不以/结尾，那么这个目录将被安装为目标路径下的abc；如果目录名以/结尾，代表将这个目录中的内容安装到目标路径，但不包括这个目录本身。</li>\n<li><p>PATTERN：用于使用正则表达式进行过滤，<code>PERMISSIONS</code>用于指定PATTERN过滤后的文件权限。</p>\n<p>e.g.</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSTALL</span>(DIRECTORY icons scripts/ DESTINATION share/myproj</span><br><span class=\"line\">        PATTERN <span class=\"string\">\"CVS\"</span> EXCLUDE</span><br><span class=\"line\">        PATTERN <span class=\"string\">\"scripts/*\"</span></span><br><span class=\"line\">        PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ</span><br><span class=\"line\">            GROUP_EXECUTE GROUP_READ)</span><br></pre></td></tr></table></figure>\n<p>这条指令的执行结果是：<br>将<code>icons</code>目录安装到<code>&lt;prefix&gt;/share/myproj</code>，将<code>scripts/</code>中的内容安装到<code>&lt;prefix&gt;/share/myproj</code>不包含目录名为 CVS 的目录，对于 <code>scripts/*</code>文件指定权限为OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ.</p>\n</li>\n</ul>\n</li>\n<li><p>安装时CMAKE脚本的执行</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">install</span>([[SCRIPT &lt;file&gt;] [CODE &lt;code&gt;]] [...])</span><br></pre></td></tr></table></figure>\n<p>  SCRIPT参数用于在安装时调用cmake脚本文件（<code>也就是&lt;abc&gt;.cmake</code>文件）CODE 参数用于执行CMAKE指令，必须以双引号括起来。比如：<br>  <code>INSTALL(CODE &quot;MESSAGE(\\&quot;Sample install message.\\&quot;)&quot;)</code></p>\n</li>\n</ul>\n<h4 id=\"让我们的hello-cmake支持安装\"><a href=\"#让我们的hello-cmake支持安装\" class=\"headerlink\" title=\"让我们的hello cmake支持安装\"></a>让我们的hello cmake支持安装</h4><p>安装本节开始的要求，下面改写各个目录的CMakeLists</p>\n<ol>\n<li>安装COPYRIGHT/README，直接修改主工程文件CMakeLists.txt，加入以下指令：<code>INSTALL(FILES COPYRIGHT README DESTINATION share/doc/cmake_practice/test2)</code></li>\n<li>安装<code>hello_cmake</code>、<code>run_hello_cmake.sh</code>，修改主工程文件CMakeLists.txt，加入以下指令：<code>INSTALL(PROGRAMS run_hello_cmake.sh DESTINATION bin)</code>；修改src目录下CMakeLists.txt，加入以下命令：<code>INSTALL(PROGRAMS ${PROJECT_BINARY_DIR}/bin/hello_cmake DESTINATION bin)</code></li>\n<li>安装doc中的hello.txt，这里有两种方式：一是通过在 doc 目录建立CMakeLists.txt并将<code>doc</code>目录通过<code>ADD_SUBDIRECTORY</code>加入工程来完成。另一种方法是直接在工程目录通过<code>INSTALL(DIRECTORY 来完成)</code>。我们来尝试后者，顺便演示一下<code>DIRECTORY</code>的安装。因为<code>hello.txt</code>要安装到<code>/&lt;prefix&gt;/share/doc/cmake_practice/test2</code>，所以我们不能直接安装整个doc目录，这里采用的方式是安装doc目录中的内容，也就是使用”doc/“在工程文件中添加<code>INSTALL(DIRECTORY doc/hello.txt DESTINATION share/doc/cmake_practice/test2)</code></li>\n</ol>\n<p>如果没有定义<code>CMAKE_INSTALL_PREFIX</code>，会默认安装到/usr/local下</p>\n<h4 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>本小节主要描述了如何在工程中使用多目录、各种安装指令以及<code>CMAKE_INSTALL_PREFIX</code>变量。</p>\n<p>在下一小节，我们将探讨如何在cmake中构建动态库和静态库，以及如何使用外部头文件和外部共享库。</p>\n<h2 id=\"静态库与动态库\"><a href=\"#静态库与动态库\" class=\"headerlink\" title=\"静态库与动态库\"></a>静态库与动态库</h2><p>静态库与动态库的创建知识点并不多，主要新引入了一个新的命令如下：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD_LIBRARY</span>(&lt;name&gt; [STATIC | SHARED | MODULE]</span><br><span class=\"line\">            [EXCLUDE_FROM_ALL]</span><br><span class=\"line\">            source1 source2 ... sourceN)</span><br></pre></td></tr></table></figure>\n<p>类型有三种：</p>\n<ol>\n<li><code>SHARED</code> : 动态库</li>\n<li><code>STATIC</code> : 静态库</li>\n<li><code>MODULE</code> : 在使用dyld的系统有效，如果不支持dyld，则被当作SHARED对待</li>\n</ol>\n<p><code>EXCLUDE_FROM_ALL</code>参数的意思是这个库不会被默认构建，除非有其他的组建依赖或者手工构建</p>\n<h4 id=\"名字相同的动态库和静态库同时存在\"><a href=\"#名字相同的动态库和静态库同时存在\" class=\"headerlink\" title=\"名字相同的动态库和静态库同时存在\"></a>名字相同的动态库和静态库同时存在</h4><p>在同一个CMake中，如果<code>ADD_LIBRARY</code>的target名称相同，则后一个目标会覆盖前一个目标。如果我们想让名字相同的静态库和动态库同时存在，需要用到另外一个命令：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET_TARGET_PROPERTIES</span>(target1 target2 ...</span><br><span class=\"line\">                      PROPERTIES prop1 value1</span><br><span class=\"line\">                      prop2 value2 ...)</span><br></pre></td></tr></table></figure>\n<p>这条指令可以用来设置输出的名称，对于动态库，还可以用来指定<code>动态库版本</code>和<code>API版本</code>。</p>\n<p>只需要在CMakeLists.txt中加如<code>SET_TARGET_PROPERTIES(hello_static PROPERTIES OUTPUT_NAME &quot;hello&quot;)</code>，就可以同时得到libhello.a/libhello.so两个库了。</p>\n<h4 id=\"动态库版本号\"><a href=\"#动态库版本号\" class=\"headerlink\" title=\"动态库版本号\"></a>动态库版本号</h4><p>为了实现动态库版本号，我们仍然需要使用<code>SET_TARGET_PROPERTIES</code>指令。具体使用方法：<code>SET_TARGET_PROPERTIES(hello PROPERTIES VERSION 1.2 SOVERSION 1)</code></p>\n<p><code>VERSION</code>指代动态库版本，<code>SOVERSION</code>指代 API 版本。</p>\n<p>加如CMakeLists重新构建，在build目录下会生成：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libhello.so.1.2</span><br><span class=\"line\">libhello.so.1-&gt;libhello.so.1.2</span><br><span class=\"line\">libhello.so -&gt;libhello.so.1</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装共享库和头文件\"><a href=\"#安装共享库和头文件\" class=\"headerlink\" title=\"安装共享库和头文件\"></a>安装共享库和头文件</h4><p>利用上一节提到的<code>INSTALL</code>指令，我们将动态库以及静态库安装到指定的目录</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSTALL</span>(TARGETS hello hello_static</span><br><span class=\"line\">        LIBRARY DESTINATION lib</span><br><span class=\"line\">        ARCHIVE DESTINATION lib)</span><br></pre></td></tr></table></figure>\n<h4 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>本小节，我们谈到了：</p>\n<ol>\n<li>如何通过<code>ADD_LIBRARY</code>指令构建动态库和静态库。</li>\n<li>如何通过<code>SET_TARGET_PROPERTIES</code>同时构建同名的动态库和静态库。</li>\n<li>如何通过<code>SET_TARGET_PROPERTIES</code>控制动态库版本</li>\n<li>最终使用上一节谈到的<code>INSTALL</code>指令来安装动态、静态库。</li>\n</ol>\n<h2 id=\"如何使用外部共享库和头文件\"><a href=\"#如何使用外部共享库和头文件\" class=\"headerlink\" title=\"如何使用外部共享库和头文件\"></a>如何使用外部共享库和头文件</h2><h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><p>在<code>/home/workspace/cmake_practice</code>目录下建立test4目录，按照上一节，编写CMakeLists，生成自己的hello动态库静态库以及头文件，并安装到/usr/local下。</p>\n<h4 id=\"源文件和CMakeLists\"><a href=\"#源文件和CMakeLists\" class=\"headerlink\" title=\"源文件和CMakeLists\"></a>源文件和CMakeLists</h4><p>重复以前的步骤，建立<code>src</code>目录，编写源文件<code>main.c</code>，内容如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;hello.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    print_hello();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写工程主文件<code>CMakeLists.txt</code></p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PROJECT</span>(NEWHELLO)</span><br><span class=\"line\"><span class=\"keyword\">ADD_SUBDIRECTORY</span>(src)</span><br></pre></td></tr></table></figure>\n<p>编写<code>src/CMakeLists.txt</code></p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD_EXECUTABLE</span>(main main.c)</span><br></pre></td></tr></table></figure>\n<h4 id=\"外部构建\"><a href=\"#外部构建\" class=\"headerlink\" title=\"外部构建\"></a>外部构建</h4><p>按照习惯，仍然建立 build 目录，使用 cmake ..方式构建。<br>过程：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake ..</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<p>构建失败，如果需要查看细节，可以用<code>make VERBOSE=1</code>来构建</p>\n<p>错误输出是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/workspace/cmake_practice/test4/src/main.c:1:19: fatal error: hello.h: No such file or directory</span><br></pre></td></tr></table></figure>\n<h4 id=\"引入头文件搜索路径\"><a href=\"#引入头文件搜索路径\" class=\"headerlink\" title=\"引入头文件搜索路径\"></a>引入头文件搜索路径</h4><p>hello.h位于<code>/usr/local/include/hello</code>目录中，并没有位于系统标准的头文件路径。</p>\n<p>为了让我们的工程能够找到<code>hello.h</code>头文件，我们需要引入一个新的指令<br><code>INCLUDE_DIRECTORIES</code>，其完整语法为：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include_directories</span>([AFTER|BEFORE] [SYSTEM] dir1 dir2 ...)</span><br></pre></td></tr></table></figure>\n<p>这条指令可以用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割，如果路径中包含了空格，可以使用双引号将它括起来，默认的行为是追加到当前的头文件搜索路径的后面。</p>\n<p>现在我们在<code>src/CMakeLists.txt</code>中添加一个头文件搜索路径，方式很简单，加入：<code>INCLUDE_DIRECTORIES(/usr/local/include/hello)</code></p>\n<p>进入build目录，重新进行构建，这时找不到hello.h的错误已经消失，但是出现了一个新的错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main.c:(.text+0xa): undefined reference to `print_hello&apos;</span><br></pre></td></tr></table></figure>\n<p>因为我们并没有link到共享库libhello上</p>\n<h4 id=\"为target添加共享库\"><a href=\"#为target添加共享库\" class=\"headerlink\" title=\"为target添加共享库\"></a>为target添加共享库</h4><p>我们现在需要完成的任务是将目标文件链接到libhello，这里我们需要引入两个新的指令：</p>\n<p><code>LINK_DIRECTORIES</code>和<code>TARGET_LINK_LIBRARIES</code></p>\n<p>LINK_DIRECTORIES的语法是：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">link_directories</span>(directory1 directory2 ...)</span><br></pre></td></tr></table></figure>\n<p>这个指令非常简单，添加非标准的共享库搜索路径，比如，在工程内部同时存在共享库和可执行二进制，在编译时就需要指定一下这些共享库的路径。这个例子中我们没有用到这个指令。</p>\n<p>TARGET_LINK_LIBRARIES的语法是:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">TARGET_LINK_LIBRARIES</span>(target library1</span><br><span class=\"line\">                      &lt;debug | optimized&gt; library2</span><br><span class=\"line\">                      ...)</span><br></pre></td></tr></table></figure>\n<p>这个指令可以用来为<code>target</code>添加需要链接的共享库，本例中是一个可执行文件，但是同样可以用于为自己编写的共享库添加共享库链接。</p>\n<p>为了解决我们前面遇到的<code>print_hello</code>未定义错误，我们需要作的是向<br>src/CMakeLists.txt中添加如下指令：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">LINK_DIRECTORIES</span>(/usr/local/lib)</span><br><span class=\"line\"><span class=\"keyword\">TARGET_LINK_LIBRARIES</span>(main hello)</span><br></pre></td></tr></table></figure>\n<p>这里的hello指的是我们上一节构建的共享库libhello。</p>\n<p>进入build目录重新进行构建。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake ..</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<p>这是我们就得到了一个连接到libhello的可执行程序 main，位于 build/src目录，运行main的结果是输出：</p>\n<p><code>Hello CMake!</code></p>\n<p>让我们来检查一下<code>main</code>的链接情况：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost src]# ldd main</span><br><span class=\"line\">        linux-vdso.so.1 =&gt;  (0x00007ffdb59ea000)</span><br><span class=\"line\">        libhello.so.1 =&gt; /usr/local/lib/libhello.so.1 (0x00007fe24b577000)</span><br><span class=\"line\">        libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fe24b18e000)</span><br><span class=\"line\">        /lib64/ld-linux-x86-64.so.2 (0x00007fe24b77a000)</span><br></pre></td></tr></table></figure>\n<p>可以清楚的看到<code>main</code>确实链接了共享库<code>libhello</code>，而且链接的是动态库<br><code>libhello.so.1</code></p>\n<p>那如何链接到静态库呢？方法很简单：将<code>TARGET_LINK_LIBRRARIES</code>指令修改为:</p>\n<p><code>TARGET_LINK_LIBRARIES(main libhello.a)</code></p>\n<p>重新构建后再来看一下<code>main</code>的链接情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost src]# ldd main</span><br><span class=\"line\">        linux-vdso.so.1 =&gt;  (0x00007fffa2597000)</span><br><span class=\"line\">        libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fb216c97000)</span><br><span class=\"line\">        /lib64/ld-linux-x86-64.so.2 (0x00007fb217080000)</span><br></pre></td></tr></table></figure>\n<p>说明<code>main</code>确实链接到了静态库<code>libhello.a</code>。</p>\n<h4 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>本节我们探讨了:</p>\n<ul>\n<li>如何通过<code>INCLUDE_DIRECTORIES</code>指令加入非标准的头文件搜索路径。</li>\n<li>如何通过<code>LINK_DIRECTORIES</code>指令加入非标准的库文件搜索路径。</li>\n<li>如果通过<code>TARGET_LINK_LIBRARIES</code>为库或可执行二进制加入库链接。</li>\n</ul>\n<p>到这里为止，您应该基本可以使用<code>cmake</code>工作了，但是还有很多高级的话题没有探讨，比如<strong>编译条件检查</strong>、<strong>编译器定义</strong>、<strong>平台判断</strong>等等。</p>\n<p>到这里，或许你可以理解前面讲到的“cmake的使用过程其实就是学习cmake语言并编写cmake程序的过程”，既然是“cmake语言”，自然涉及到变量、语法等。</p>\n<p>下一节，我们将抛开程序的话题，看看常用的CMAKE变量以及一些基本的控制语法规则。</p>\n<h2 id=\"CMake常用变量和常用环境变量\"><a href=\"#CMake常用变量和常用环境变量\" class=\"headerlink\" title=\"CMake常用变量和常用环境变量\"></a>CMake常用变量和常用环境变量</h2><p>使用<code>${}</code>进行变量的引用。在IF等语句中，是直接使用变量名而不通过<code>${}</code>取值。</p>\n<h4 id=\"CMake常用变量\"><a href=\"#CMake常用变量\" class=\"headerlink\" title=\"CMake常用变量\"></a>CMake常用变量</h4><ul>\n<li><p><code>CMAKE_BINARY_DIR</code></p>\n<p>  <code>PROJECT_BINARY_DIR</code></p>\n<p>  <code>&lt;projectname&gt;_BINARY_DIR</code></p>\n<p>  这三个变量指代的内容是一致的，如果是<code>in source</code>编译，指得就是工程顶层目录，如果是<code>out-of-source</code>编译，指的是工程编译发生的目录。<code>PROJECT_BINARY_DIR</code>跟其他指令稍有区别，现在，你可以理解为他们是一致的。</p>\n</li>\n<li><p><code>CMAKE_SOURCE_DIR</code></p>\n<p>  <code>PROJECT_SOURCE_DIR</code></p>\n<p>  <code>&lt;projectname&gt;_SOURCE_DIR</code></p>\n<p>  这三个变量指代的内容是一致的，不论采用何种编译方式，都是工程顶层目录。也就是在<code>in source</code>编译时，他跟<code>CMAKE_BINARY_DIR</code>等变量一致。<code>PROJECT_SOURCE_DIR</code>跟其他指令稍有区别，现在，你可以理解为他们是一致的。</p>\n</li>\n<li><p><code>CMAKE_CURRENT_SOURCE_DIR</code></p>\n</li>\n</ul>\n<p>指的是当前处理的<code>CMakeLists.txt</code>所在的路径，比如上面我们提到的src子目录。</p>\n<ul>\n<li><code>CMAKE_CURRRENT_BINARY_DIR</code></li>\n</ul>\n<p>如果是<code>in-source</code>编译，它跟<code>CMAKE_CURRENT_SOURCE_DIR</code>一致，如果是<code>out-ofsource</code>编译，他指的是<code>target</code>编译目录。使用我们上面提到的<code>ADD_SUBDIRECTORY(src bin)</code>可以更改这个变量的值。<br>使用<code>SET(EXECUTABLE_OUTPUT_PATH &lt;新路径&gt;)</code>并不会对这个变量造成影响，它仅仅修改了最终目标文件存放的路径。</p>\n<ul>\n<li><code>CMAKE_MODULE_PATH</code></li>\n</ul>\n<p>这个变量用来定义自己的 cmake 模块所在的路径。如果你的工程比较复杂，有可能会自己编写一些 cmake 模块，这些 cmake 模块是随你的工程发布的，为了让 cmake 在处理CMakeLists.txt 时找到这些模块，你需要通过 SET 指令，将自己的 cmake 模块路径设置一下。<br>比如</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span>(CMAKE_MODULE_PATH <span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/cmake)</span><br></pre></td></tr></table></figure>\n<p>这时候你就可以通过<code>INCLUDE</code>指令来调用自己的模块了。</p>\n<h4 id=\"CMake调用环境变量\"><a href=\"#CMake调用环境变量\" class=\"headerlink\" title=\"CMake调用环境变量\"></a>CMake调用环境变量</h4><p>使用<code>$ENV{NAME}</code>指令就可以调用系统的环境变量了。</p>\n<p>比如</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">MESSAGE</span>(STATUS <span class=\"string\">\"HOME dir: $ENV&#123;HOME&#125;\"</span>)</span><br></pre></td></tr></table></figure>\n<p>设置环境变量的方式是：</p>\n<p><code>SET(ENV{KEY} VALUE)</code></p>\n<h4 id=\"主要开关选项\"><a href=\"#主要开关选项\" class=\"headerlink\" title=\"主要开关选项\"></a>主要开关选项</h4><ul>\n<li><code>BUILD_SHARED_LIBS</code></li>\n</ul>\n<p>这个开关用来控制默认的库编译方式，如果不进行设置，使用 ADD_LIBRARY并没有指定库类型的情况下，默认编译生成的库都是静态库。<br>如果<code>SET(BUILD_SHARED_LIBS ON)</code>后，默认生成的为动态库。</p>\n<ul>\n<li><code>CMAKE_C_FLAGS</code></li>\n</ul>\n<p>设置C编译选项，也可以通过指令<code>ADD_DEFINITIONS()</code>添加。</p>\n<ul>\n<li><code>CMAKE_CXX_FLAGS</code></li>\n</ul>\n<p>设置C++编译选项，也可以通过指令<code>ADD_DEFINITIONS()</code>添加。</p>\n<h2 id=\"CMake常用指令\"><a href=\"#CMake常用指令\" class=\"headerlink\" title=\"CMake常用指令\"></a>CMake常用指令</h2><h4 id=\"基本指令\"><a href=\"#基本指令\" class=\"headerlink\" title=\"基本指令\"></a>基本指令</h4><ul>\n<li><code>ADD_DEFINITIONS</code></li>\n</ul>\n<p>向C/C++编译器添加-D定义，比如:<code>ADD_DEFINITIONS(-DENABLE_DEBUG -DABC)</code>，参数之间用空格分割。如果你的代码中定义了<code>#ifdef ENABLE_DEBUG #endif</code>，这个代码块就会生效。如果要添加其他的编译器开关，可以通过<code>CMAKE_C_FLAGS</code>变量和<code>CMAKE_CXX_FLAGS</code>变量设置</p>\n<ul>\n<li><code>ADD_DEPENDENCIES</code></li>\n</ul>\n<p>定义target依赖的其他target，确保在编译本target之前，其他的 target 已经被构建。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD_DEPENDENCIES</span>(target-name depend-target1</span><br><span class=\"line\">                 depend-target2 ...)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>ADD_TEST</code>与<code>ENABLE_TESTING</code></li>\n</ul>\n<p><code>ENABLE_TESTING</code>指令用来控制Makefile是否构建test目标，涉及工程所有目录。语法很简单，没有任何参数，ENABLE_TESTING()，一般情况这个指令放在工程的主CMakeLists.txt中。</p>\n<p><code>ADD_TEST</code>指令的语法是:<code>ADD_TEST(testname Exename arg1 arg2 ...)</code></p>\n<p>testname是自定义的test名称，Exename可以是构建的目标文件也可以是外部脚本等等。后面连接传递给可执行文件的参数。如果没有在同一个CMakeLists.txt 中打开<code>ENABLE_TESTING()</code>指令，任何<code>ADD_TEST</code>都是无效的。</p>\n<p>比如我们前面的Helloworld例子，可以在工程主CMakeLists.txt 中添加</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD_TEST</span>(mytest <span class=\"variable\">$&#123;PROJECT_BINARY_DIR&#125;</span>/bin/main)</span><br><span class=\"line\"><span class=\"keyword\">ENABLE_TESTING</span>()</span><br></pre></td></tr></table></figure>\n<p>生成<code>Makefile</code>后，就可以运行<code>make test</code>来执行测试了。</p>\n<ul>\n<li><code>AUX_SOURCE_DIRECTORY</code></li>\n</ul>\n<p>基本语法：<code>AUX_SOURCE_DIRECTORY(dir VARIABLE)</code></p>\n<p>作用是发现一个目录下所有的源代码文件并将列表存储在一个变量中，这个指令临时被用来自动构建源文件列表。因为目前 cmake 还不能自动发现新添加的源文件。</p>\n<p>比如</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">AUX_SOURCE_DIRECTORY</span>(. SRC_LIST)</span><br><span class=\"line\"><span class=\"keyword\">ADD_EXECUTABLE</span>(main <span class=\"variable\">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure>\n<p>你也可以通过后面提到的<code>FOREACH</code>指令来处理这个<code>LIST</code></p>\n<ul>\n<li><code>CMAKE_MINIMUM_REQUIRED</code></li>\n</ul>\n<p>其语法为<code>CMAKE_MINIMUM_REQUIRED(VERSION versionNumber [FATAL_ERROR])</code> 比如 <code>CMAKE_MINIMUM_REQUIRED(VERSION 2.5 FATAL_ERROR)</code> 如果cmake版本小与 2.5，则出现严重错误，整个过程中止。</p>\n<ul>\n<li><code>EXEC_PROGRAM</code></li>\n</ul>\n<p>在CMakeLists.txt处理过程中执行命令，并不会在生成的Makefile中执行。具体语法为：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXEC_PROGRAM</span>(Executable [directory in which to run]</span><br><span class=\"line\">            [ARGS &lt;arguments to executable&gt;]</span><br><span class=\"line\">            [OUTPUT_VARIABLE &lt;var&gt;]</span><br><span class=\"line\">            [RETURN_VALUE &lt;var&gt;])</span><br></pre></td></tr></table></figure>\n<p>用于在指定的目录运行某个程序，通过ARGS添加参数，如果要获取输出和返回值，可通过<code>OUTPUT_VARIABLE</code>和<code>RETURN_VALUE</code>分别定义两个变量。</p>\n<p>这个指令可以帮助你在<code>CMakeLists.txt</code>处理过程中支持任何命令，比如根据系统情况去修改代码文件等等。</p>\n<p>举个简单的例子，我们要在src目录执行ls命令，并把结果和返回值存下来。</p>\n<p>可以直接在src/CMakeLists.txt中添加：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXEC_PROGRAM</span>(ls ARGS <span class=\"string\">\"*.c\"</span> OUTPUT_VARIABLE LS_OUTPUT RETURN_VALUE LS_RVALUE)</span><br><span class=\"line\"><span class=\"keyword\">IF</span>(not LS_RVALUE)</span><br><span class=\"line\">    <span class=\"keyword\">MESSAGE</span>(STATUS <span class=\"string\">\"ls result: \"</span> <span class=\"variable\">$&#123;LS_OUTPUT&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>(not LS_RVALUE)</span><br></pre></td></tr></table></figure>\n<p>在cmake生成Makefile的过程中，就会执行ls命令，如果返回0，则说明成功执行，那么就输出 ls *.c 的结果。关于IF语句，后面的控制指令会提到。</p>\n<ul>\n<li><p><code>FILE</code></p>\n<ul>\n<li>FILE(WRITE filename “message to write”… )</li>\n<li>FILE(APPEND filename “message to write”… )</li>\n<li>FILE(READ filename variable)</li>\n<li>FILE(GLOB variable [RELATIVE path] [globbing expressions]…)</li>\n<li>FILE(GLOB_RECURSE variable [RELATIVE path] [globbing expressions]…)</li>\n<li>FILE(REMOVE [directory]…)</li>\n<li>FILE(REMOVE_RECURSE [directory]…)</li>\n<li>FILE(MAKE_DIRECTORY [directory]…)</li>\n<li>FILE(RELATIVE_PATH variable directory file)</li>\n<li>FILE(TO_CMAKE_PATH path result)</li>\n<li>FILE(TO_NATIVE_PATH path result)</li>\n</ul>\n</li>\n</ul>\n<p>这里的语法都比较简单，不在展开介绍了。</p>\n<ul>\n<li><code>INCLUDE</code></li>\n</ul>\n<p>用来载入CMakeLists.txt文件，也用于载入预定义的cmake模块。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INCLUDE</span>(file1 [OPTIONAL])</span><br><span class=\"line\"><span class=\"keyword\">INCLUDE</span>(module [OPTIONAL])</span><br></pre></td></tr></table></figure>\n<p>OPTIONAL参数的作用是文件不存在也不会产生错误。你可以指定载入一个文件，如果定义的是一个模块，那么将在<code>CMAKE_MODULE_PATH</code>中搜索这个模块并载入。载入的内容将在处理到INCLUDE语句是直接执行。</p>\n<ul>\n<li><p><code>FILE_</code>指令</p>\n<ul>\n<li><p>FIND_FILE(<var> name1 path1 path2 …)</var></p>\n<p>  VAR 变量代表找到的文件全路径，包含文件名</p>\n</li>\n<li><p>FIND_LIBRARY(<var> name1 path1 path2 …)</var></p>\n<p>  VAR 变量表示找到的库全路径，包含库文件名</p>\n</li>\n<li><p>FIND_PATH(<var> name1 path1 path2 …)</var></p>\n<p>  VAR 变量代表包含这个文件的路径。</p>\n</li>\n<li><p>FIND_PROGRAM(<var> name1 path1 path2 …)</var></p>\n<p>  VAR 变量代表包含这个程序的全路径。</p>\n</li>\n<li><p>FIND_PACKAGE(<name> [major.minor] [QUIET] [NO_MODULE] [[REQUIRED|COMPONENTS] [componets…]])</name></p>\n<p>  用来调用预定义在 CMAKE_MODULE_PATH 下的 Find<name>.cmake 模块，你也可以自己定义<code>Find&lt;name&gt;</code>模块，通过<code>SET(CMAKE_MODULE_PATH dir)</code>将其放入工程的某个目录中供工程使用，我们在后面的章节会详细介绍<code>FIND_PACKAGE</code>的使用方法和<code>Find</code>模块的编写。</name></p>\n<p>  FIND_LIBRARY 示例：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FIND_LIBRARY</span>(libX X11 /usr/lib)</span><br><span class=\"line\"><span class=\"keyword\">IF</span>(NOT libX)</span><br><span class=\"line\">    <span class=\"keyword\">MESSAGE</span>(FATAL_ERROR “libX not found”)</span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>(NOT libX)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"控制命令\"><a href=\"#控制命令\" class=\"headerlink\" title=\"控制命令\"></a>控制命令</h4><ul>\n<li><code>IF</code></li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span>(expression)</span><br><span class=\"line\">    <span class=\"comment\"># THEN section.</span></span><br><span class=\"line\">    COMMAND1(ARGS ...)</span><br><span class=\"line\">    COMMAND2(ARGS ...)</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"keyword\">ELSE</span>(expression)</span><br><span class=\"line\">    <span class=\"comment\"># ELSE section.</span></span><br><span class=\"line\">    COMMAND1(ARGS ...)</span><br><span class=\"line\">    COMMAND2(ARGS ...)</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>(expression)</span><br></pre></td></tr></table></figure>\n<p>另外一个指令是<code>ELSEIF</code>，总体把握一个原则，凡是出现IF的地方一定要有对应的ENDIF。出现 ELSEIF 的地方，ENDIF是可选的。</p>\n<p>表达式的使用方法如下:</p>\n<p>IF(var)，如果变量不是：空，0，N, NO, OFF, FALSE, NOTFOUND 或<br><var>_NOTFOUND 时，表达式为真。</var></p>\n<p>IF(NOT var )，与上述条件相反。</p>\n<p>IF(var1 AND var2)，当两个变量都为真是为真。</p>\n<p>IF(var1 OR var2)，当两个变量其中一个为真时为真。</p>\n<p>IF(COMMAND cmd)，当给定的 cmd 确实是命令并可以调用是为真。</p>\n<p>IF(EXISTS dir)或者 IF(EXISTS file)，当目录名或者文件名存在时为真。</p>\n<p>IF(file1 IS_NEWER_THAN file2)，当 file1 比 file2 新，或者 file1/file2 其中有一个不存在时为真，文件名请使用完整路径。</p>\n<p>IF(IS_DIRECTORY dirname)，当 dirname 是目录时，为真。</p>\n<p>IF(variable MATCHES regex)</p>\n<p>IF(string MATCHES regex)<br>当给定的变量或者字符串能够匹配正则表达式 regex 时为真。比如：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span>(<span class=\"string\">\"hello\"</span> <span class=\"keyword\">MATCHES</span> <span class=\"string\">\"ell\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">MESSAGE</span>(<span class=\"string\">\"true\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>(<span class=\"string\">\"hello\"</span> <span class=\"keyword\">MATCHES</span> <span class=\"string\">\"ell\"</span>)</span><br></pre></td></tr></table></figure>\n<p>数字比较表达式:</p>\n<ul>\n<li>IF(variable LESS number)</li>\n<li>IF(string LESS number)</li>\n<li>IF(variable GREATER number)</li>\n<li>IF(string GREATER number)</li>\n<li>IF(variable EQUAL number)</li>\n<li>IF(string EQUAL number)</li>\n</ul>\n<p>按照字母序的排列进行比较:</p>\n<ul>\n<li>IF(variable STRLESS string)</li>\n<li>IF(string STRLESS string)</li>\n<li>IF(variable STRGREATER string)</li>\n<li>IF(string STRGREATER string)</li>\n<li>IF(variable STREQUAL string)</li>\n<li>IF(string STREQUAL string)</li>\n</ul>\n<p>IF(DEFINED variable)，如果变量被定义，为真。</p>\n<p>一个小例子，用来判断平台差异：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span>(WIN32)</span><br><span class=\"line\">    <span class=\"keyword\">MESSAGE</span>(STATUS “This is windows.”)</span><br><span class=\"line\">    <span class=\"comment\">#作一些 Windows 相关的操作</span></span><br><span class=\"line\"><span class=\"keyword\">ELSE</span>(WIN32)</span><br><span class=\"line\">    <span class=\"keyword\">MESSAGE</span>(STATUS “This is not windows”)</span><br><span class=\"line\">    <span class=\"comment\">#作一些非 Windows 相关的操作</span></span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>(WIN32)</span><br></pre></td></tr></table></figure>\n<p>上述代码用来控制在不同的平台进行不同的控制，但是，阅读起来却并不是那么舒服，ELSE(WIN32)之类的语句很容易引起歧义。</p>\n<p>这就用到了我们在“常用变量”一节提到的<code>CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS</code>开<br>关。可以<code>SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)</code><br>这时候就可以写成:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span>(WIN32)</span><br><span class=\"line\"><span class=\"keyword\">ELSE</span>()</span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>()</span><br></pre></td></tr></table></figure>\n<p>如果配合 ELSEIF 使用，可能的写法是这样:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span>(WIN32)</span><br><span class=\"line\">    <span class=\"comment\">#do something related to WIN32</span></span><br><span class=\"line\"><span class=\"keyword\">ELSEIF</span>(UNIX)</span><br><span class=\"line\">    <span class=\"comment\">#do something related to UNIX</span></span><br><span class=\"line\"><span class=\"keyword\">ELSEIF</span>(APPLE)</span><br><span class=\"line\">    <span class=\"comment\">#do something related to APPLE</span></span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>(WIN32)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>WHILE</code></li>\n</ul>\n<p>WHILE 指令的语法是：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHILE</span>(condition)</span><br><span class=\"line\">    COMMAND1(ARGS ...)</span><br><span class=\"line\">    COMMAND2(ARGS ...)</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"keyword\">ENDWHILE</span>(condition)</span><br></pre></td></tr></table></figure>\n<p>其真假判断条件可以参考 IF 指令。</p>\n<ul>\n<li><code>FOREACH</code></li>\n</ul>\n<p>FOREACH 指令的使用方法有三种形式：</p>\n<ol>\n<li><p>列表</p>\n <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FOREACH</span>(loop_var arg1 arg2 ...)</span><br><span class=\"line\">    COMMAND1(ARGS ...)</span><br><span class=\"line\">    COMMAND2(ARGS ...)</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"keyword\">ENDFOREACH</span>(loop_var)</span><br></pre></td></tr></table></figure>\n<p> 像我们前面使用的<code>AUX_SOURCE_DIRECTORY</code>的例子</p>\n <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">AUX_SOURCE_DIRECTORY</span>(. SRC_LIST)</span><br><span class=\"line\"><span class=\"keyword\">FOREACH</span>(F <span class=\"variable\">$&#123;SRC_LIST&#125;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">MESSAGE</span>(<span class=\"variable\">$&#123;F&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">ENDFOREACH</span>(F)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>范围</p>\n <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FOREACH</span>(loop_var RANGE total)</span><br><span class=\"line\"><span class=\"keyword\">ENDFOREACH</span>(loop_var)</span><br></pre></td></tr></table></figure>\n<p> 从 0 到 total 以1为步进</p>\n<p> 举例如下：</p>\n <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FOREACH</span>(VAR RANGE <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">MESSAGE</span>(<span class=\"variable\">$&#123;VAR&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">ENDFOREACH</span>(VAR)</span><br><span class=\"line\">最终得到的输出是：</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>范围和步进</p>\n</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FOREACH</span>(loop_var RANGE start stop [step])</span><br><span class=\"line\"><span class=\"keyword\">ENDFOREACH</span>(loop_var)</span><br></pre></td></tr></table></figure>\n<p>从start开始到stop结束，以step为步进，举例如下:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FOREACH</span>(A RANGE <span class=\"number\">5</span> <span class=\"number\">15</span> <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">MESSAGE</span>(<span class=\"variable\">$&#123;A&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">ENDFOREACH</span>(A)</span><br></pre></td></tr></table></figure>\n<p>最终得到的结果是：5 8 11 14</p>\n<p>这个指令需要注意的是，知道遇到<code>ENDFOREACH</code>指令，整个语句块才会得到真正的执行。</p>\n<h2 id=\"模块的使用和自定义模块\"><a href=\"#模块的使用和自定义模块\" class=\"headerlink\" title=\"模块的使用和自定义模块\"></a>模块的使用和自定义模块</h2><p>本章我们将着重介绍系统预定义的<code>Find</code>模块的使用以及自己编写<code>Find</code>模块，系统中提供了其他各种模块，一般情况需要使用<code>INCLUDE</code>指令显式的调用，<code>FIND_PACKAGE</code>指令是一个特例，可以直接调用预定义的模块。</p>\n<p>在本章，我们基于我们前面的libhello共享库，编写一个FindHello.cmake模块。</p>\n<p>对于系统预定义的<code>Find&lt;name&gt;.cmake</code>模块，每一个模块都会定义以下几个变量：</p>\n<ul>\n<li><code>&lt;name&gt;_FOUND</code></li>\n<li><code>&lt;name&gt;_INCLUDE_DIR</code> or <code>&lt;name&gt;_INCLUDES</code></li>\n<li><code>&lt;name&gt;_LIBRARY</code> or <code>&lt;name&gt;_LIBRARIES</code></li>\n</ul>\n<p>你可以通过<code>&lt;name&gt;_FOUND</code>来判断模块是否被找到，如果没有找到，按照工程的需要关闭某些特性、给出提醒或者中止编译。</p>\n<p>如果<code>&lt;name&gt;_FOUND</code>为真，则将<code>&lt;name&gt;_INCLUDE_DIR</code>加入<code>INCLUDE_DIRECTORIES</code>，将<code>&lt;name&gt;_LIBRARY</code>加入 <code>TARGET_LINK_LIBRARIES</code>中。</p>\n<h4 id=\"编写FindHello模块\"><a href=\"#编写FindHello模块\" class=\"headerlink\" title=\"编写FindHello模块\"></a>编写FindHello模块</h4><p>我们在此前的test3实例中，演示了构建动态库、静态库的过程并进行了安装。接下来，我们在test6示例中演示如何自定义<code>FindHello</code>模块并使用这个模块构建工程：</p>\n<p>请在建立<code>/home/workspace/cmake_practice</code>中建立test6目录，并在其中建立cmake目录用于存放我们自己定义的<code>FindHello.cmake</code>模块，同时建立<code>src</code>目录，用于存放我们的源文件。</p>\n<p>定义<code>cmake/FindHello.cmake</code>模块</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FIND_PATH</span>(HELLO_INCLUDE_DIR hello.h /usr/local/<span class=\"keyword\">include</span>/hello /usr/<span class=\"keyword\">include</span>/hello)</span><br><span class=\"line\"><span class=\"keyword\">FIND_LIBRARY</span>(HELLO_LIBRARY NAMES hello PATH /usr/local/lib /usr/lib)</span><br><span class=\"line\"><span class=\"keyword\">IF</span>(HELLO_INCLUDE_DIR <span class=\"keyword\">AND</span> HELLO_LIBRARY)</span><br><span class=\"line\">        <span class=\"keyword\">SET</span>(HELLO_FOUND <span class=\"keyword\">TRUE</span>)</span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>()</span><br><span class=\"line\"><span class=\"keyword\">IF</span>(HELLO_FOUND)</span><br><span class=\"line\">        <span class=\"keyword\">IF</span>(NOT Hello_FIND_QUIETLY)</span><br><span class=\"line\">                <span class=\"keyword\">MESSAGE</span>(STATUS <span class=\"string\">\"Found Hello: $&#123;HELLO_LIBRARY&#125;\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">ENDIF</span>()</span><br><span class=\"line\"><span class=\"keyword\">ELSE</span>()</span><br><span class=\"line\">        <span class=\"keyword\">IF</span>(Hello_FIND_REQUIRED)</span><br><span class=\"line\">                <span class=\"keyword\">MESSAGE</span>(FATAL_ERROR <span class=\"string\">\"Cound not find hello library\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">ENDIF</span>()</span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>()</span><br></pre></td></tr></table></figure>\n<p><code>QUIET</code>参数，对应与我们编写的<code>FindHello</code>中的 <code>HELLO_FIND_QUIETLY</code>，如果不指定这个参数，就会执行：<br><code>MESSAGE(STATUS &quot;Found Hello: ${HELLO_LIBRARY}&quot;)</code></p>\n<p><code>REQUIRED</code>参数，其含义是指这个共享库是否是工程必须的，如果使用了这个参数，说明这个链接库是必备库，如果找不到这个链接库，则工程不能编译。对应于<code>FindHello.cmake</code>模块中的<code>HELLO_FIND_REQUIRED</code>变量。<br>同样，我们在上面的模块中定义了<code>HELLO_FOUND</code>,<code>HELLO_INCLUDE_DIR</code>,<code>HELLO_LIBRARY</code>变量供开发者在<code>FIND_PACKAGE</code>指令中使用。</p>\n<p>在src/main.c中写入如下内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;hello.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        print_hello();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>建立src/CMakeLists.txt文件，内容如下：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FIND_PACKAGE</span>(Hello)</span><br><span class=\"line\"><span class=\"keyword\">IF</span>(HELLO_FOUND)</span><br><span class=\"line\">        <span class=\"keyword\">ADD_EXECUTABLE</span>(hello main.c)</span><br><span class=\"line\">        <span class=\"keyword\">INCLUDE_DIRECTORIES</span>(<span class=\"variable\">$&#123;HELLO_INCLUDE_DIR&#125;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">TARGET_LINK_LIBRARIES</span>(hello <span class=\"variable\">$&#123;HELLO_LIBRARY&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>(HELLO_FOUND)</span><br></pre></td></tr></table></figure>\n<p>为了能够让工程找到<code>FindHello.cmake</code>模块(存放在工程中的cmake目录)我们在主工程文件CMakeLists.txt中加入：<br><code>SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)</code></p>\n<p>仍然采用外部编译的方式，建立build目录，进入目录运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake ..</span><br></pre></td></tr></table></figure>\n<p>我们可以从输出中看到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- Found Hello: /usr/local/lib/libhello.so</span><br></pre></td></tr></table></figure>\n<p>如果没有找到hello library呢？</p>\n<p>我们可以尝试将/usr/local/lib/libhello.x 移动到/tmp目录，这样，按照FindHello模块的定义，就找不到hello library了，我们再来看一下构建结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake ..</span><br></pre></td></tr></table></figure>\n<p>仍然可以成功进行构建，但是这时候是没有办法编译的。修改 <code>FIND_PACKAGE(HELLO)</code>为<code>FIND_PACKAGE(HELLO REQUIRED)</code>，将 hello library定义为工程必须的共享库。</p>\n<p>这时候再次运行 cmake ..</p>\n<p>我们得到如下输出：</p>\n<p><code>CMake Error: Could not find hello library.</code></p>\n<p>因为找不到libhello.x，所以，整个Makefile生成过程被出错中止。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"CMake\"><a href=\"#CMake\" class=\"headerlink\" title=\"CMake\"></a>CMake</h1><p>在项目或者工作中，会不可避免的使用到cmake来构建我们的项目，所以掌握cmake的基本语法，以及常用的和进阶的使用方法是非常重要的。</p>\n<p>下面我们将从一个简单的<code>hello cmake</code>示例开始，一步步的深入了解cmake的用法。</p>","more":"<p><strong><em>Let’s Go!</em></strong></p>\n<h3 id=\"初探CMake，hello-cmake\"><a href=\"#初探CMake，hello-cmake\" class=\"headerlink\" title=\"初探CMake，hello cmake\"></a>初探CMake，hello cmake</h3><h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p>创建目录 /home/workspace/cmake_practice，我们之后的练习都放到这个目录的子目录下</p>\n<p>在cmake_practice目录下创建test1</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/workspace/cmake_practice</span><br><span class=\"line\">mkdir test1</span><br><span class=\"line\">cd test1</span><br></pre></td></tr></table></figure>\n<p>创建main.c以及CMakeLists.txt</p>\n<p>main.c内容如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello CMake!\\n\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>CMakeLists.txt内容如下</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PROJECT</span>(hello-cmake)</span><br><span class=\"line\"><span class=\"keyword\">SET</span>(SRC_LIST main.c)</span><br><span class=\"line\"><span class=\"keyword\">MESSAGE</span>(STATUS <span class=\"string\">\"This is BINARY dir\"</span> <span class=\"variable\">$&#123;PROJECT_BINARY_DIR&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">MESSAGE</span>(STATUS <span class=\"string\">\"This is SOURCE dir\"</span> <span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">ADD_EXECUTABLE</span>(hello-cmake <span class=\"variable\">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h4><p>在test1目录下执行<code>cmake .</code>(. 代表当前目录)</p>\n<p>这时会在当前目录生成<code>CMakeFiles</code>、<code>cmake_install.cmake</code>、<code>Makefile</code>等文件</p>\n<p>我们只要关心Makefile就可以了，此时执行<code>make</code>，我们就得到了可执行文件<code>hello-cmake</code></p>\n<p>运行<code>./hello-cmake</code></p>\n<p>得到输出</p>\n<p><code>Hello CMake!</code></p>\n<h4 id=\"示例的语法解释\"><a href=\"#示例的语法解释\" class=\"headerlink\" title=\"示例的语法解释\"></a>示例的语法解释</h4><p>cmake的函数可以通过<code>cmake --help-command cmd</code>来查看具体的语法及使用方法</p>\n<ul>\n<li><p>PROJECT</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">project</span>(&lt;projectname&gt; [languageName1 languageName2 ... ] )</span><br></pre></td></tr></table></figure>\n<p>  设置项目名称并可指定工程支持的语言，支持的语言列表是可以忽略的，默认情况表示支持所有语言。这个指令隐式的定义了两个cmake变量:</p>\n<pre><code>- &lt;projectname&gt;_BINARY_DIR\n- &lt;projectname&gt;_SOURCE_DIR\n</code></pre><p>  因为采用的是内部编译，两个变量目前指的都是工程所在路径/home/workspace/cmake_practice/test1，后面我们会讲到外部编译，两者所指代的内容会有所不同。</p>\n<p>  同时 cmake 系统也帮助我们预定义了 <code>PROJECT_BINARY_DIR</code> 和 <code>PROJECT_SOURCE_DIR</code><br>  变量，他们的值分别跟 <code>&lt;projectname&gt;_BINARY_DIR</code> 与 <code>&lt;projectname&gt;_SOURCE_DIR</code> 一致。</p>\n<p>  为了统一起见，建议以后直接使用 <code>PROJECT_BINARY_DIR</code>，<code>PROJECT_SOURCE_DIR</code>，即<br>  使修改了工程名称，也不会影响这两个变量。如果使用了<br>  <code>&lt;projectname&gt;_SOURCE_DIR</code>，修改工程名称后，需要同时修改这些变量。</p>\n</li>\n<li><p>SET</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span>(&lt;variable&gt; &lt;value&gt;</span><br><span class=\"line\">    [[CACHE &lt;type&gt; &lt;docstring&gt; [FORCE]] | PARENT_SCOPE])</span><br></pre></td></tr></table></figure>\n<p>  在初探阶段，我们只需要知道<code>SET</code>命令可以用来显示的定义一个变量。<br>  比如在这个例子中<code>SET(SRC_LIST main.c)</code>，即定义了一个变量<code>SRC_LIST</code>，此变量的值为<code>main.c</code>。当然如果有多个源文件，可以定义为<code>SET(SRC_LIST main.c test1.c test2.c)</code>。</p>\n</li>\n<li><p>MESSAGE</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message</span>([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR]</span><br><span class=\"line\">        <span class=\"string\">\"message to display\"</span> ...)</span><br></pre></td></tr></table></figure>\n<p>  可选关键字决定消息的类型：</p>\n<ul>\n<li>none          = 重要信息</li>\n<li>STATUS        = 附带信息</li>\n<li>WARNING       = CMake警告，继续处理</li>\n<li>AUTHOR_WARNING= CMake警告（dev），继续处理</li>\n<li>SEND_ERROR    = CMake错误，继续处理，但跳过生成</li>\n<li>FATAL_ERROR   = CMake错误，停止处理和生成</li>\n</ul>\n</li>\n<li><p>ADD_EXECUTABLE</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD_EXECUTABLE</span>(&lt;name&gt; [WIN32] [MACOSX_BUNDLE]</span><br><span class=\"line\">                [EXCLUDE_FROM_ALL]</span><br><span class=\"line\">                source1 source2 ... sourceN)</span><br></pre></td></tr></table></figure>\n<p>  用于生成可执行的文件，源文件列表为<code>SRC_LIST</code>定义的源文件。在本例中我们使用<code>${}</code>来引用变量，这个cmake的变量使用方式。</p>\n</li>\n</ul>\n<h4 id=\"基本语法规则\"><a href=\"#基本语法规则\" class=\"headerlink\" title=\"基本语法规则\"></a>基本语法规则</h4><p>本例中使用的基本语法规则有：</p>\n<ol>\n<li>变量使用<code>${}</code>方式取值，但是在<code>IF</code>控制语句中是直接使用变量名</li>\n<li><p>COMMAND(param1 param2 …)，参数间用<em>空格</em>或者<em>分号</em>分隔</p>\n<p> e.g.</p>\n<ul>\n<li>ADD(hello-cmake main.c func.c)</li>\n<li>ADD(hello-cmake main.c;func.c)</li>\n</ul>\n</li>\n<li>command是大小写无关的，但是参数和变量是大小写敏感的</li>\n</ol>\n<h4 id=\"内部构建与外部构建\"><a href=\"#内部构建与外部构建\" class=\"headerlink\" title=\"内部构建与外部构建\"></a>内部构建与外部构建</h4><p>在本例中我们使用的是内部构建，即在<code>CMakeLists.txt</code>同级的目录下执行<code>cmake .</code>。内部构建会在SOURCE_DIR下生成很多临时的中间文件，不方便删除，也影响的源代码的阅读。</p>\n<p>所以我们推荐外部构建，所谓外部构建就是在一个单独的文件夹下面执行cmake，生成的中间文件和结果都在此文件夹下。</p>\n<p>对于本例，使用外部构建过程如下：</p>\n<ol>\n<li>首先清除test1目录下除<code>main.c</code>、<code>CMakeLists.txt</code>外的所有文件及文件夹，最关键的是CMakeCache.txt，如果不清除cache，还是会构建到之前的构建目录下。</li>\n<li>在test1目录下创建build文件夹</li>\n<li>进入build文件夹，执行<code>cmake ..</code>(<code>..</code>代表上一层目录，即CMakeLists所在的文件夹)</li>\n<li>运行make，即可在build文件夹下生成对应的可执行文件</li>\n</ol>\n<p>上述过程即为out-of-source外部编译。一个最大的好处是，对于原有的工程没有任何影响，所有动作全部发生在编译目录。</p>\n<p>通过外部编译进行工程构建，<code>PROJECT_SOURCE_DIR</code>仍然指代工程路径，即CMakeLists所在路径，<br>而<code>PROJECT_BINARY_DIR</code>则指代编译路径，即<code>/home/workspace/cmake_practice/test1/build</code>。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>本结我们通过一个简单的hello cmake示例，介绍了最基本的CMakeLists编写，以及一些基本的语法和命令用法。同时介绍了内部编译和外部编译，及外部编译的好处。</p>\n<p>下一节我们将丰富我们的hello cmake示例，使其看起来更像一个项目。</p>\n<h2 id=\"更像一个项目的hello-cmake\"><a href=\"#更像一个项目的hello-cmake\" class=\"headerlink\" title=\"更像一个项目的hello cmake\"></a>更像一个项目的hello cmake</h2><p>本节的目标是让上一节的hello cmake更像一个项目，我们接下来要做的是:</p>\n<ol>\n<li>为工程添加一个子目录，用来放置项目的源代码</li>\n<li>添加一个子目录doc，用来工程文档<code>hello.txt</code></li>\n<li>在工程目录添加COPYRIGHT和README</li>\n<li>在工程目录添加一个run_hello_cmake.sh脚本，用来调用<code>hello_cmake</code>可执行文件</li>\n<li>将构建的结果放置构建目录的bin子目录</li>\n<li>最终安装这些文件，将<code>hello_cmake</code>二进制文件以及<code>run_hello_cmake.sh</code>安装至<code>/usr/bin</code>目录下，将doc目录下的文件以及COPYRIGHT、README安装至<code>/usr/share/doc/cmake_practice/test1</code>目录下</li>\n</ol>\n<h4 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p>在<code>/home/workspace/cmake_practice</code>目录下建立<code>test2</code>目录，将上一节中的<code>main.c CMakeLists.txt</code>拷贝到test2目录</p>\n<h4 id=\"添加子目录src\"><a href=\"#添加子目录src\" class=\"headerlink\" title=\"添加子目录src\"></a>添加子目录src</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir src</span><br><span class=\"line\">mv main.c src</span><br></pre></td></tr></table></figure>\n<p>现在工程中有一个子目录<code>src</code>以及<code>CMakeLists.txt</code>。进入子目录，添加CMakeList如下</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD_EXECUTABLE</span>(hello_cmake main.c)</span><br></pre></td></tr></table></figure>\n<p>将test2工程的CMakeLists修改为</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PROJECT</span>(hello-cmake)</span><br><span class=\"line\"><span class=\"keyword\">ADD_SUBDIRECTORY</span>(src bin)</span><br></pre></td></tr></table></figure>\n<p>然后建立build目录，进入build，执行<code>cmake .. &amp; make</code>，构建完成后，目标文件hello-cmake位于<code>build/bin</code>目录下。</p>\n<h4 id=\"语法解释\"><a href=\"#语法解释\" class=\"headerlink\" title=\"语法解释\"></a>语法解释</h4><ul>\n<li><p>ADD_SUBDIRECTORY</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD_SUBDIRECTORY</span>(source_dir [binary_dir]</span><br><span class=\"line\">                [EXCLUDE_FROM_ALL])</span><br></pre></td></tr></table></figure>\n<p>  用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置。</p>\n<p>  <code>EXCLUDE_FROM_ALL</code>参数的含义是将这个目录从编译过程中排除，比如，工程的<code>example</code>，可能需要工程构建完成之后，再进入<code>example</code>目录单独进行构建。</p>\n</li>\n</ul>\n<p>上面的例子定义了将src子目录加入工程，并指定了编译输出路径为bin目录。如果不指定bin目录，那么编译的结果都将存放在build/src目录</p>\n<h4 id=\"换个地方保存目标二进制\"><a href=\"#换个地方保存目标二进制\" class=\"headerlink\" title=\"换个地方保存目标二进制\"></a>换个地方保存目标二进制</h4><p>我们可以通过SET指令重新定义<code>EXECUTABLE_OUTPUT_PATH</code>和<code>LIBRARY_OUTPUT_PATH</code>变量，来指定最终的目标二进制的位置(指最终生成的 hello_cmake或者最终的共享库，不包含编译生成的中间文件)</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span>(EXECUTABLE_OUTPUT_PATH <span class=\"variable\">$&#123;PROJECT_BINARY_PATH&#125;</span>/bin)</span><br><span class=\"line\"><span class=\"keyword\">SET</span>(LIBRARY_OUTPUT_PATH <span class=\"variable\">$&#123;PROJECT_BINARY_PATH&#125;</span>/lib)</span><br></pre></td></tr></table></figure>\n<p>在第一节我们提到了<code>&lt;projectname&gt;_BINARY_DIR</code>和<code>PROJECT_BINARY_DIR</code>变量，他们指的编译发生的当前目录，如果是内部编译，就相当于<code>PROJECT_SOURCE_DIR</code>也就是工程代码所在目录，如果是外部编译，指的是外部编译所在目录，也就是本例中的<code>build</code>目录。</p>\n<p>所以，上面两个指令分别定义了：可执行二进制的输出路径为<code>build/bin</code>和库的输出路径为<code>build/lib</code>。</p>\n<p>至于将这两条指令写在工程的CMakeLists中还是src目录下的CMakeList，只需要按照一个原则：在哪里<code>ADD_EXECUTABLE</code>或<code>ADD_LIBRARY</code>，如果需要改变目标存放的路径，就在其上加入上述定义。</p>\n<h4 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h4><p>安装的需要有两种，一种是从代码编译后直接<code>make install</code>安装，一种是打包时的指定目录安装。</p>\n<p>那我们的hello_cmake应该怎么进行安装呢？</p>\n<p>这里我们要用到一个新的cmake指令<code>INSTALL</code>和一个非常有用的变量<code>CMAKE_INSTALL_PREFIX</code></p>\n<ul>\n<li><p><code>CMAKE_INSTALL_PREFIX</code>变量类似于configure脚本的–prefix，常见的使用方法形如：</p>\n<p>  <code>cmake -DCMAKE_INSTALL_PREFIX=/usr .</code></p>\n</li>\n<li><code>INSTALL</code>指令用于定义安装规则，安装的内容可以包括<ol>\n<li>目标二进制</li>\n<li>动态库</li>\n<li>静态库</li>\n<li>文件、目录、脚本</li>\n</ol>\n</li>\n</ul>\n<p>INSTALL指令包含了各种安装类型，我们需要一个个分开解释</p>\n<ul>\n<li><p>目标文件的安装</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">install</span>(TARGETS targets...</span><br><span class=\"line\">        [[ARCHIVE|LIBRARY|RUNTIME]</span><br><span class=\"line\">        [DESTINATION &lt;dir&gt;]</span><br><span class=\"line\">        [PERMISSIONS permissions...]</span><br><span class=\"line\">        [CONFIGURATIONS [Debug|Release|...]]</span><br><span class=\"line\">        [COMPONENT &lt;component&gt;]</span><br><span class=\"line\">        [OPTIONAL]</span><br><span class=\"line\">        ] [...])</span><br></pre></td></tr></table></figure>\n<p>  参数中的<code>TARGETS</code>后面跟的就是我们通过<code>ADD_EXECUTABLE</code>或者<code>ADD_LIBRARY</code>定义的目标文件，可能是可执行二进制、动态库、静态库。</p>\n<p>  目标类型也就相对应的有三种，<code>ARCHIVE</code>特指静态库，<code>LIBRARY</code>特指动态库，<code>RUNTIME</code>特指可执行目标二进制。</p>\n<p>  <code>DESTINATION</code>定义了安装的路径，如果路径以/开头，那么指的是绝对路径，这时候<code>CMAKE_INSTALL_PREFIX</code>其实就无效了。如果你希望使用<code>CMAKE_INSTALL_PREFIX</code>来定义安装路径，就要写成相对路径，即不要以/开头，那么安装后的路径就是<code>${CMAKE_INSTALL_PREFIX}/&lt;DESTINATION 定义的路径&gt;</code></p>\n<p>  e.g.</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">install</span>(TARGETS myExe mySharedLib myStaticLib</span><br><span class=\"line\">        RUNTIME DESTINATION bin</span><br><span class=\"line\">        LIBRARY DESTINATION lib</span><br><span class=\"line\">        ARCHIVE DESTINATION lib/static)</span><br></pre></td></tr></table></figure>\n<p>  将会把</p>\n<p>  <code>myExe</code>安装到<code>${CMAKE_INSTALL_PREFIX}/bin</code><br>  <code>mySharedLib</code>安装到<code>${CMAKE_INSTALL_PREFIX}/lib</code><br>  <code>myStaticLib</code>安装到<code>${CMAKE_INSTALL_PREFIX}/lib/static</code></p>\n</li>\n<li><p>普通文件的安装</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">install</span>(FILES files... DESTINATION &lt;dir&gt;</span><br><span class=\"line\">        [PERMISSIONS permissions...]</span><br><span class=\"line\">        [CONFIGURATIONS [Debug|Release|...]]</span><br><span class=\"line\">        [COMPONENT &lt;component&gt;]</span><br><span class=\"line\">        [RENAME &lt;name&gt;] [OPTIONAL])</span><br></pre></td></tr></table></figure>\n<p>  可用于安装一般文件，并可以指定访问权限，文件名是此指令所在路径下的相对路径。如果默认不定义权限<code>PERMISSIONS</code>，安装后的权限为：</p>\n<p>  <code>OWNER_WRITE</code>, <code>OWNER_READ</code>, <code>GROUP_READ</code>,和 <code>WORLD_READ</code>，即 644 权限</p>\n</li>\n<li><p>非目标文件的</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">install</span>(PROGRAMS files... DESTINATION &lt;dir&gt;</span><br><span class=\"line\">        [PERMISSIONS permissions...]</span><br><span class=\"line\">        [CONFIGURATIONS [Debug|Release|...]]</span><br><span class=\"line\">        [COMPONENT &lt;component&gt;]</span><br><span class=\"line\">        [RENAME &lt;name&gt;] [OPTIONAL])</span><br></pre></td></tr></table></figure>\n<p>  跟上面的 FILES 指令使用方法一样，唯一的不同是安装后权限为:<br><code>OWNER_EXECUTE</code>, <code>GROUP_EXECUTE</code>, 和 <code>WORLD_EXECUTE</code>，即 755 权限</p>\n</li>\n<li><p>目录的安装</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">install</span>(DIRECTORY dirs... DESTINATION &lt;dir&gt;</span><br><span class=\"line\">        [FILE_PERMISSIONS permissions...]</span><br><span class=\"line\">        [DIRECTORY_PERMISSIONS permissions...]</span><br><span class=\"line\">        [USE_SOURCE_PERMISSIONS] [OPTIONAL]</span><br><span class=\"line\">        [CONFIGURATIONS [Debug|Release|...]]</span><br><span class=\"line\">        [COMPONENT &lt;component&gt;] [FILES_MATCHING]</span><br><span class=\"line\">        [[PATTERN &lt;pattern&gt; | REGEX &lt;regex&gt;]</span><br><span class=\"line\">        [EXCLUDE] [PERMISSIONS permissions...]] [...])</span><br></pre></td></tr></table></figure>\n<p>  这里主要介绍其中的<code>DIRECTORY</code>、<code>PATTERN</code>、<code>PERMISSIONS</code>参数。</p>\n<ul>\n<li>DIRECTORY：后面链接的是所在source目录的相对路径。但是abc和abc/有很大区别。如果目录名不以/结尾，那么这个目录将被安装为目标路径下的abc；如果目录名以/结尾，代表将这个目录中的内容安装到目标路径，但不包括这个目录本身。</li>\n<li><p>PATTERN：用于使用正则表达式进行过滤，<code>PERMISSIONS</code>用于指定PATTERN过滤后的文件权限。</p>\n<p>e.g.</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSTALL</span>(DIRECTORY icons scripts/ DESTINATION share/myproj</span><br><span class=\"line\">        PATTERN <span class=\"string\">\"CVS\"</span> EXCLUDE</span><br><span class=\"line\">        PATTERN <span class=\"string\">\"scripts/*\"</span></span><br><span class=\"line\">        PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ</span><br><span class=\"line\">            GROUP_EXECUTE GROUP_READ)</span><br></pre></td></tr></table></figure>\n<p>这条指令的执行结果是：<br>将<code>icons</code>目录安装到<code>&lt;prefix&gt;/share/myproj</code>，将<code>scripts/</code>中的内容安装到<code>&lt;prefix&gt;/share/myproj</code>不包含目录名为 CVS 的目录，对于 <code>scripts/*</code>文件指定权限为OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ.</p>\n</li>\n</ul>\n</li>\n<li><p>安装时CMAKE脚本的执行</p>\n<p>  语法：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">install</span>([[SCRIPT &lt;file&gt;] [CODE &lt;code&gt;]] [...])</span><br></pre></td></tr></table></figure>\n<p>  SCRIPT参数用于在安装时调用cmake脚本文件（<code>也就是&lt;abc&gt;.cmake</code>文件）CODE 参数用于执行CMAKE指令，必须以双引号括起来。比如：<br>  <code>INSTALL(CODE &quot;MESSAGE(\\&quot;Sample install message.\\&quot;)&quot;)</code></p>\n</li>\n</ul>\n<h4 id=\"让我们的hello-cmake支持安装\"><a href=\"#让我们的hello-cmake支持安装\" class=\"headerlink\" title=\"让我们的hello cmake支持安装\"></a>让我们的hello cmake支持安装</h4><p>安装本节开始的要求，下面改写各个目录的CMakeLists</p>\n<ol>\n<li>安装COPYRIGHT/README，直接修改主工程文件CMakeLists.txt，加入以下指令：<code>INSTALL(FILES COPYRIGHT README DESTINATION share/doc/cmake_practice/test2)</code></li>\n<li>安装<code>hello_cmake</code>、<code>run_hello_cmake.sh</code>，修改主工程文件CMakeLists.txt，加入以下指令：<code>INSTALL(PROGRAMS run_hello_cmake.sh DESTINATION bin)</code>；修改src目录下CMakeLists.txt，加入以下命令：<code>INSTALL(PROGRAMS ${PROJECT_BINARY_DIR}/bin/hello_cmake DESTINATION bin)</code></li>\n<li>安装doc中的hello.txt，这里有两种方式：一是通过在 doc 目录建立CMakeLists.txt并将<code>doc</code>目录通过<code>ADD_SUBDIRECTORY</code>加入工程来完成。另一种方法是直接在工程目录通过<code>INSTALL(DIRECTORY 来完成)</code>。我们来尝试后者，顺便演示一下<code>DIRECTORY</code>的安装。因为<code>hello.txt</code>要安装到<code>/&lt;prefix&gt;/share/doc/cmake_practice/test2</code>，所以我们不能直接安装整个doc目录，这里采用的方式是安装doc目录中的内容，也就是使用”doc/“在工程文件中添加<code>INSTALL(DIRECTORY doc/hello.txt DESTINATION share/doc/cmake_practice/test2)</code></li>\n</ol>\n<p>如果没有定义<code>CMAKE_INSTALL_PREFIX</code>，会默认安装到/usr/local下</p>\n<h4 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>本小节主要描述了如何在工程中使用多目录、各种安装指令以及<code>CMAKE_INSTALL_PREFIX</code>变量。</p>\n<p>在下一小节，我们将探讨如何在cmake中构建动态库和静态库，以及如何使用外部头文件和外部共享库。</p>\n<h2 id=\"静态库与动态库\"><a href=\"#静态库与动态库\" class=\"headerlink\" title=\"静态库与动态库\"></a>静态库与动态库</h2><p>静态库与动态库的创建知识点并不多，主要新引入了一个新的命令如下：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD_LIBRARY</span>(&lt;name&gt; [STATIC | SHARED | MODULE]</span><br><span class=\"line\">            [EXCLUDE_FROM_ALL]</span><br><span class=\"line\">            source1 source2 ... sourceN)</span><br></pre></td></tr></table></figure>\n<p>类型有三种：</p>\n<ol>\n<li><code>SHARED</code> : 动态库</li>\n<li><code>STATIC</code> : 静态库</li>\n<li><code>MODULE</code> : 在使用dyld的系统有效，如果不支持dyld，则被当作SHARED对待</li>\n</ol>\n<p><code>EXCLUDE_FROM_ALL</code>参数的意思是这个库不会被默认构建，除非有其他的组建依赖或者手工构建</p>\n<h4 id=\"名字相同的动态库和静态库同时存在\"><a href=\"#名字相同的动态库和静态库同时存在\" class=\"headerlink\" title=\"名字相同的动态库和静态库同时存在\"></a>名字相同的动态库和静态库同时存在</h4><p>在同一个CMake中，如果<code>ADD_LIBRARY</code>的target名称相同，则后一个目标会覆盖前一个目标。如果我们想让名字相同的静态库和动态库同时存在，需要用到另外一个命令：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET_TARGET_PROPERTIES</span>(target1 target2 ...</span><br><span class=\"line\">                      PROPERTIES prop1 value1</span><br><span class=\"line\">                      prop2 value2 ...)</span><br></pre></td></tr></table></figure>\n<p>这条指令可以用来设置输出的名称，对于动态库，还可以用来指定<code>动态库版本</code>和<code>API版本</code>。</p>\n<p>只需要在CMakeLists.txt中加如<code>SET_TARGET_PROPERTIES(hello_static PROPERTIES OUTPUT_NAME &quot;hello&quot;)</code>，就可以同时得到libhello.a/libhello.so两个库了。</p>\n<h4 id=\"动态库版本号\"><a href=\"#动态库版本号\" class=\"headerlink\" title=\"动态库版本号\"></a>动态库版本号</h4><p>为了实现动态库版本号，我们仍然需要使用<code>SET_TARGET_PROPERTIES</code>指令。具体使用方法：<code>SET_TARGET_PROPERTIES(hello PROPERTIES VERSION 1.2 SOVERSION 1)</code></p>\n<p><code>VERSION</code>指代动态库版本，<code>SOVERSION</code>指代 API 版本。</p>\n<p>加如CMakeLists重新构建，在build目录下会生成：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libhello.so.1.2</span><br><span class=\"line\">libhello.so.1-&gt;libhello.so.1.2</span><br><span class=\"line\">libhello.so -&gt;libhello.so.1</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装共享库和头文件\"><a href=\"#安装共享库和头文件\" class=\"headerlink\" title=\"安装共享库和头文件\"></a>安装共享库和头文件</h4><p>利用上一节提到的<code>INSTALL</code>指令，我们将动态库以及静态库安装到指定的目录</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSTALL</span>(TARGETS hello hello_static</span><br><span class=\"line\">        LIBRARY DESTINATION lib</span><br><span class=\"line\">        ARCHIVE DESTINATION lib)</span><br></pre></td></tr></table></figure>\n<h4 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>本小节，我们谈到了：</p>\n<ol>\n<li>如何通过<code>ADD_LIBRARY</code>指令构建动态库和静态库。</li>\n<li>如何通过<code>SET_TARGET_PROPERTIES</code>同时构建同名的动态库和静态库。</li>\n<li>如何通过<code>SET_TARGET_PROPERTIES</code>控制动态库版本</li>\n<li>最终使用上一节谈到的<code>INSTALL</code>指令来安装动态、静态库。</li>\n</ol>\n<h2 id=\"如何使用外部共享库和头文件\"><a href=\"#如何使用外部共享库和头文件\" class=\"headerlink\" title=\"如何使用外部共享库和头文件\"></a>如何使用外部共享库和头文件</h2><h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><p>在<code>/home/workspace/cmake_practice</code>目录下建立test4目录，按照上一节，编写CMakeLists，生成自己的hello动态库静态库以及头文件，并安装到/usr/local下。</p>\n<h4 id=\"源文件和CMakeLists\"><a href=\"#源文件和CMakeLists\" class=\"headerlink\" title=\"源文件和CMakeLists\"></a>源文件和CMakeLists</h4><p>重复以前的步骤，建立<code>src</code>目录，编写源文件<code>main.c</code>，内容如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;hello.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    print_hello();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写工程主文件<code>CMakeLists.txt</code></p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PROJECT</span>(NEWHELLO)</span><br><span class=\"line\"><span class=\"keyword\">ADD_SUBDIRECTORY</span>(src)</span><br></pre></td></tr></table></figure>\n<p>编写<code>src/CMakeLists.txt</code></p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD_EXECUTABLE</span>(main main.c)</span><br></pre></td></tr></table></figure>\n<h4 id=\"外部构建\"><a href=\"#外部构建\" class=\"headerlink\" title=\"外部构建\"></a>外部构建</h4><p>按照习惯，仍然建立 build 目录，使用 cmake ..方式构建。<br>过程：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake ..</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<p>构建失败，如果需要查看细节，可以用<code>make VERBOSE=1</code>来构建</p>\n<p>错误输出是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/workspace/cmake_practice/test4/src/main.c:1:19: fatal error: hello.h: No such file or directory</span><br></pre></td></tr></table></figure>\n<h4 id=\"引入头文件搜索路径\"><a href=\"#引入头文件搜索路径\" class=\"headerlink\" title=\"引入头文件搜索路径\"></a>引入头文件搜索路径</h4><p>hello.h位于<code>/usr/local/include/hello</code>目录中，并没有位于系统标准的头文件路径。</p>\n<p>为了让我们的工程能够找到<code>hello.h</code>头文件，我们需要引入一个新的指令<br><code>INCLUDE_DIRECTORIES</code>，其完整语法为：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include_directories</span>([AFTER|BEFORE] [SYSTEM] dir1 dir2 ...)</span><br></pre></td></tr></table></figure>\n<p>这条指令可以用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割，如果路径中包含了空格，可以使用双引号将它括起来，默认的行为是追加到当前的头文件搜索路径的后面。</p>\n<p>现在我们在<code>src/CMakeLists.txt</code>中添加一个头文件搜索路径，方式很简单，加入：<code>INCLUDE_DIRECTORIES(/usr/local/include/hello)</code></p>\n<p>进入build目录，重新进行构建，这时找不到hello.h的错误已经消失，但是出现了一个新的错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main.c:(.text+0xa): undefined reference to `print_hello&apos;</span><br></pre></td></tr></table></figure>\n<p>因为我们并没有link到共享库libhello上</p>\n<h4 id=\"为target添加共享库\"><a href=\"#为target添加共享库\" class=\"headerlink\" title=\"为target添加共享库\"></a>为target添加共享库</h4><p>我们现在需要完成的任务是将目标文件链接到libhello，这里我们需要引入两个新的指令：</p>\n<p><code>LINK_DIRECTORIES</code>和<code>TARGET_LINK_LIBRARIES</code></p>\n<p>LINK_DIRECTORIES的语法是：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">link_directories</span>(directory1 directory2 ...)</span><br></pre></td></tr></table></figure>\n<p>这个指令非常简单，添加非标准的共享库搜索路径，比如，在工程内部同时存在共享库和可执行二进制，在编译时就需要指定一下这些共享库的路径。这个例子中我们没有用到这个指令。</p>\n<p>TARGET_LINK_LIBRARIES的语法是:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">TARGET_LINK_LIBRARIES</span>(target library1</span><br><span class=\"line\">                      &lt;debug | optimized&gt; library2</span><br><span class=\"line\">                      ...)</span><br></pre></td></tr></table></figure>\n<p>这个指令可以用来为<code>target</code>添加需要链接的共享库，本例中是一个可执行文件，但是同样可以用于为自己编写的共享库添加共享库链接。</p>\n<p>为了解决我们前面遇到的<code>print_hello</code>未定义错误，我们需要作的是向<br>src/CMakeLists.txt中添加如下指令：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">LINK_DIRECTORIES</span>(/usr/local/lib)</span><br><span class=\"line\"><span class=\"keyword\">TARGET_LINK_LIBRARIES</span>(main hello)</span><br></pre></td></tr></table></figure>\n<p>这里的hello指的是我们上一节构建的共享库libhello。</p>\n<p>进入build目录重新进行构建。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake ..</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<p>这是我们就得到了一个连接到libhello的可执行程序 main，位于 build/src目录，运行main的结果是输出：</p>\n<p><code>Hello CMake!</code></p>\n<p>让我们来检查一下<code>main</code>的链接情况：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost src]# ldd main</span><br><span class=\"line\">        linux-vdso.so.1 =&gt;  (0x00007ffdb59ea000)</span><br><span class=\"line\">        libhello.so.1 =&gt; /usr/local/lib/libhello.so.1 (0x00007fe24b577000)</span><br><span class=\"line\">        libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fe24b18e000)</span><br><span class=\"line\">        /lib64/ld-linux-x86-64.so.2 (0x00007fe24b77a000)</span><br></pre></td></tr></table></figure>\n<p>可以清楚的看到<code>main</code>确实链接了共享库<code>libhello</code>，而且链接的是动态库<br><code>libhello.so.1</code></p>\n<p>那如何链接到静态库呢？方法很简单：将<code>TARGET_LINK_LIBRRARIES</code>指令修改为:</p>\n<p><code>TARGET_LINK_LIBRARIES(main libhello.a)</code></p>\n<p>重新构建后再来看一下<code>main</code>的链接情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost src]# ldd main</span><br><span class=\"line\">        linux-vdso.so.1 =&gt;  (0x00007fffa2597000)</span><br><span class=\"line\">        libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fb216c97000)</span><br><span class=\"line\">        /lib64/ld-linux-x86-64.so.2 (0x00007fb217080000)</span><br></pre></td></tr></table></figure>\n<p>说明<code>main</code>确实链接到了静态库<code>libhello.a</code>。</p>\n<h4 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>本节我们探讨了:</p>\n<ul>\n<li>如何通过<code>INCLUDE_DIRECTORIES</code>指令加入非标准的头文件搜索路径。</li>\n<li>如何通过<code>LINK_DIRECTORIES</code>指令加入非标准的库文件搜索路径。</li>\n<li>如果通过<code>TARGET_LINK_LIBRARIES</code>为库或可执行二进制加入库链接。</li>\n</ul>\n<p>到这里为止，您应该基本可以使用<code>cmake</code>工作了，但是还有很多高级的话题没有探讨，比如<strong>编译条件检查</strong>、<strong>编译器定义</strong>、<strong>平台判断</strong>等等。</p>\n<p>到这里，或许你可以理解前面讲到的“cmake的使用过程其实就是学习cmake语言并编写cmake程序的过程”，既然是“cmake语言”，自然涉及到变量、语法等。</p>\n<p>下一节，我们将抛开程序的话题，看看常用的CMAKE变量以及一些基本的控制语法规则。</p>\n<h2 id=\"CMake常用变量和常用环境变量\"><a href=\"#CMake常用变量和常用环境变量\" class=\"headerlink\" title=\"CMake常用变量和常用环境变量\"></a>CMake常用变量和常用环境变量</h2><p>使用<code>${}</code>进行变量的引用。在IF等语句中，是直接使用变量名而不通过<code>${}</code>取值。</p>\n<h4 id=\"CMake常用变量\"><a href=\"#CMake常用变量\" class=\"headerlink\" title=\"CMake常用变量\"></a>CMake常用变量</h4><ul>\n<li><p><code>CMAKE_BINARY_DIR</code></p>\n<p>  <code>PROJECT_BINARY_DIR</code></p>\n<p>  <code>&lt;projectname&gt;_BINARY_DIR</code></p>\n<p>  这三个变量指代的内容是一致的，如果是<code>in source</code>编译，指得就是工程顶层目录，如果是<code>out-of-source</code>编译，指的是工程编译发生的目录。<code>PROJECT_BINARY_DIR</code>跟其他指令稍有区别，现在，你可以理解为他们是一致的。</p>\n</li>\n<li><p><code>CMAKE_SOURCE_DIR</code></p>\n<p>  <code>PROJECT_SOURCE_DIR</code></p>\n<p>  <code>&lt;projectname&gt;_SOURCE_DIR</code></p>\n<p>  这三个变量指代的内容是一致的，不论采用何种编译方式，都是工程顶层目录。也就是在<code>in source</code>编译时，他跟<code>CMAKE_BINARY_DIR</code>等变量一致。<code>PROJECT_SOURCE_DIR</code>跟其他指令稍有区别，现在，你可以理解为他们是一致的。</p>\n</li>\n<li><p><code>CMAKE_CURRENT_SOURCE_DIR</code></p>\n</li>\n</ul>\n<p>指的是当前处理的<code>CMakeLists.txt</code>所在的路径，比如上面我们提到的src子目录。</p>\n<ul>\n<li><code>CMAKE_CURRRENT_BINARY_DIR</code></li>\n</ul>\n<p>如果是<code>in-source</code>编译，它跟<code>CMAKE_CURRENT_SOURCE_DIR</code>一致，如果是<code>out-ofsource</code>编译，他指的是<code>target</code>编译目录。使用我们上面提到的<code>ADD_SUBDIRECTORY(src bin)</code>可以更改这个变量的值。<br>使用<code>SET(EXECUTABLE_OUTPUT_PATH &lt;新路径&gt;)</code>并不会对这个变量造成影响，它仅仅修改了最终目标文件存放的路径。</p>\n<ul>\n<li><code>CMAKE_MODULE_PATH</code></li>\n</ul>\n<p>这个变量用来定义自己的 cmake 模块所在的路径。如果你的工程比较复杂，有可能会自己编写一些 cmake 模块，这些 cmake 模块是随你的工程发布的，为了让 cmake 在处理CMakeLists.txt 时找到这些模块，你需要通过 SET 指令，将自己的 cmake 模块路径设置一下。<br>比如</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span>(CMAKE_MODULE_PATH <span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/cmake)</span><br></pre></td></tr></table></figure>\n<p>这时候你就可以通过<code>INCLUDE</code>指令来调用自己的模块了。</p>\n<h4 id=\"CMake调用环境变量\"><a href=\"#CMake调用环境变量\" class=\"headerlink\" title=\"CMake调用环境变量\"></a>CMake调用环境变量</h4><p>使用<code>$ENV{NAME}</code>指令就可以调用系统的环境变量了。</p>\n<p>比如</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">MESSAGE</span>(STATUS <span class=\"string\">\"HOME dir: $ENV&#123;HOME&#125;\"</span>)</span><br></pre></td></tr></table></figure>\n<p>设置环境变量的方式是：</p>\n<p><code>SET(ENV{KEY} VALUE)</code></p>\n<h4 id=\"主要开关选项\"><a href=\"#主要开关选项\" class=\"headerlink\" title=\"主要开关选项\"></a>主要开关选项</h4><ul>\n<li><code>BUILD_SHARED_LIBS</code></li>\n</ul>\n<p>这个开关用来控制默认的库编译方式，如果不进行设置，使用 ADD_LIBRARY并没有指定库类型的情况下，默认编译生成的库都是静态库。<br>如果<code>SET(BUILD_SHARED_LIBS ON)</code>后，默认生成的为动态库。</p>\n<ul>\n<li><code>CMAKE_C_FLAGS</code></li>\n</ul>\n<p>设置C编译选项，也可以通过指令<code>ADD_DEFINITIONS()</code>添加。</p>\n<ul>\n<li><code>CMAKE_CXX_FLAGS</code></li>\n</ul>\n<p>设置C++编译选项，也可以通过指令<code>ADD_DEFINITIONS()</code>添加。</p>\n<h2 id=\"CMake常用指令\"><a href=\"#CMake常用指令\" class=\"headerlink\" title=\"CMake常用指令\"></a>CMake常用指令</h2><h4 id=\"基本指令\"><a href=\"#基本指令\" class=\"headerlink\" title=\"基本指令\"></a>基本指令</h4><ul>\n<li><code>ADD_DEFINITIONS</code></li>\n</ul>\n<p>向C/C++编译器添加-D定义，比如:<code>ADD_DEFINITIONS(-DENABLE_DEBUG -DABC)</code>，参数之间用空格分割。如果你的代码中定义了<code>#ifdef ENABLE_DEBUG #endif</code>，这个代码块就会生效。如果要添加其他的编译器开关，可以通过<code>CMAKE_C_FLAGS</code>变量和<code>CMAKE_CXX_FLAGS</code>变量设置</p>\n<ul>\n<li><code>ADD_DEPENDENCIES</code></li>\n</ul>\n<p>定义target依赖的其他target，确保在编译本target之前，其他的 target 已经被构建。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD_DEPENDENCIES</span>(target-name depend-target1</span><br><span class=\"line\">                 depend-target2 ...)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>ADD_TEST</code>与<code>ENABLE_TESTING</code></li>\n</ul>\n<p><code>ENABLE_TESTING</code>指令用来控制Makefile是否构建test目标，涉及工程所有目录。语法很简单，没有任何参数，ENABLE_TESTING()，一般情况这个指令放在工程的主CMakeLists.txt中。</p>\n<p><code>ADD_TEST</code>指令的语法是:<code>ADD_TEST(testname Exename arg1 arg2 ...)</code></p>\n<p>testname是自定义的test名称，Exename可以是构建的目标文件也可以是外部脚本等等。后面连接传递给可执行文件的参数。如果没有在同一个CMakeLists.txt 中打开<code>ENABLE_TESTING()</code>指令，任何<code>ADD_TEST</code>都是无效的。</p>\n<p>比如我们前面的Helloworld例子，可以在工程主CMakeLists.txt 中添加</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD_TEST</span>(mytest <span class=\"variable\">$&#123;PROJECT_BINARY_DIR&#125;</span>/bin/main)</span><br><span class=\"line\"><span class=\"keyword\">ENABLE_TESTING</span>()</span><br></pre></td></tr></table></figure>\n<p>生成<code>Makefile</code>后，就可以运行<code>make test</code>来执行测试了。</p>\n<ul>\n<li><code>AUX_SOURCE_DIRECTORY</code></li>\n</ul>\n<p>基本语法：<code>AUX_SOURCE_DIRECTORY(dir VARIABLE)</code></p>\n<p>作用是发现一个目录下所有的源代码文件并将列表存储在一个变量中，这个指令临时被用来自动构建源文件列表。因为目前 cmake 还不能自动发现新添加的源文件。</p>\n<p>比如</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">AUX_SOURCE_DIRECTORY</span>(. SRC_LIST)</span><br><span class=\"line\"><span class=\"keyword\">ADD_EXECUTABLE</span>(main <span class=\"variable\">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure>\n<p>你也可以通过后面提到的<code>FOREACH</code>指令来处理这个<code>LIST</code></p>\n<ul>\n<li><code>CMAKE_MINIMUM_REQUIRED</code></li>\n</ul>\n<p>其语法为<code>CMAKE_MINIMUM_REQUIRED(VERSION versionNumber [FATAL_ERROR])</code> 比如 <code>CMAKE_MINIMUM_REQUIRED(VERSION 2.5 FATAL_ERROR)</code> 如果cmake版本小与 2.5，则出现严重错误，整个过程中止。</p>\n<ul>\n<li><code>EXEC_PROGRAM</code></li>\n</ul>\n<p>在CMakeLists.txt处理过程中执行命令，并不会在生成的Makefile中执行。具体语法为：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXEC_PROGRAM</span>(Executable [directory in which to run]</span><br><span class=\"line\">            [ARGS &lt;arguments to executable&gt;]</span><br><span class=\"line\">            [OUTPUT_VARIABLE &lt;var&gt;]</span><br><span class=\"line\">            [RETURN_VALUE &lt;var&gt;])</span><br></pre></td></tr></table></figure>\n<p>用于在指定的目录运行某个程序，通过ARGS添加参数，如果要获取输出和返回值，可通过<code>OUTPUT_VARIABLE</code>和<code>RETURN_VALUE</code>分别定义两个变量。</p>\n<p>这个指令可以帮助你在<code>CMakeLists.txt</code>处理过程中支持任何命令，比如根据系统情况去修改代码文件等等。</p>\n<p>举个简单的例子，我们要在src目录执行ls命令，并把结果和返回值存下来。</p>\n<p>可以直接在src/CMakeLists.txt中添加：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXEC_PROGRAM</span>(ls ARGS <span class=\"string\">\"*.c\"</span> OUTPUT_VARIABLE LS_OUTPUT RETURN_VALUE LS_RVALUE)</span><br><span class=\"line\"><span class=\"keyword\">IF</span>(not LS_RVALUE)</span><br><span class=\"line\">    <span class=\"keyword\">MESSAGE</span>(STATUS <span class=\"string\">\"ls result: \"</span> <span class=\"variable\">$&#123;LS_OUTPUT&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>(not LS_RVALUE)</span><br></pre></td></tr></table></figure>\n<p>在cmake生成Makefile的过程中，就会执行ls命令，如果返回0，则说明成功执行，那么就输出 ls *.c 的结果。关于IF语句，后面的控制指令会提到。</p>\n<ul>\n<li><p><code>FILE</code></p>\n<ul>\n<li>FILE(WRITE filename “message to write”… )</li>\n<li>FILE(APPEND filename “message to write”… )</li>\n<li>FILE(READ filename variable)</li>\n<li>FILE(GLOB variable [RELATIVE path] [globbing expressions]…)</li>\n<li>FILE(GLOB_RECURSE variable [RELATIVE path] [globbing expressions]…)</li>\n<li>FILE(REMOVE [directory]…)</li>\n<li>FILE(REMOVE_RECURSE [directory]…)</li>\n<li>FILE(MAKE_DIRECTORY [directory]…)</li>\n<li>FILE(RELATIVE_PATH variable directory file)</li>\n<li>FILE(TO_CMAKE_PATH path result)</li>\n<li>FILE(TO_NATIVE_PATH path result)</li>\n</ul>\n</li>\n</ul>\n<p>这里的语法都比较简单，不在展开介绍了。</p>\n<ul>\n<li><code>INCLUDE</code></li>\n</ul>\n<p>用来载入CMakeLists.txt文件，也用于载入预定义的cmake模块。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INCLUDE</span>(file1 [OPTIONAL])</span><br><span class=\"line\"><span class=\"keyword\">INCLUDE</span>(module [OPTIONAL])</span><br></pre></td></tr></table></figure>\n<p>OPTIONAL参数的作用是文件不存在也不会产生错误。你可以指定载入一个文件，如果定义的是一个模块，那么将在<code>CMAKE_MODULE_PATH</code>中搜索这个模块并载入。载入的内容将在处理到INCLUDE语句是直接执行。</p>\n<ul>\n<li><p><code>FILE_</code>指令</p>\n<ul>\n<li><p>FIND_FILE(<var> name1 path1 path2 …)</var></p>\n<p>  VAR 变量代表找到的文件全路径，包含文件名</p>\n</li>\n<li><p>FIND_LIBRARY(<var> name1 path1 path2 …)</var></p>\n<p>  VAR 变量表示找到的库全路径，包含库文件名</p>\n</li>\n<li><p>FIND_PATH(<var> name1 path1 path2 …)</var></p>\n<p>  VAR 变量代表包含这个文件的路径。</p>\n</li>\n<li><p>FIND_PROGRAM(<var> name1 path1 path2 …)</var></p>\n<p>  VAR 变量代表包含这个程序的全路径。</p>\n</li>\n<li><p>FIND_PACKAGE(<name> [major.minor] [QUIET] [NO_MODULE] [[REQUIRED|COMPONENTS] [componets…]])</name></p>\n<p>  用来调用预定义在 CMAKE_MODULE_PATH 下的 Find<name>.cmake 模块，你也可以自己定义<code>Find&lt;name&gt;</code>模块，通过<code>SET(CMAKE_MODULE_PATH dir)</code>将其放入工程的某个目录中供工程使用，我们在后面的章节会详细介绍<code>FIND_PACKAGE</code>的使用方法和<code>Find</code>模块的编写。</name></p>\n<p>  FIND_LIBRARY 示例：</p>\n  <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FIND_LIBRARY</span>(libX X11 /usr/lib)</span><br><span class=\"line\"><span class=\"keyword\">IF</span>(NOT libX)</span><br><span class=\"line\">    <span class=\"keyword\">MESSAGE</span>(FATAL_ERROR “libX not found”)</span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>(NOT libX)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"控制命令\"><a href=\"#控制命令\" class=\"headerlink\" title=\"控制命令\"></a>控制命令</h4><ul>\n<li><code>IF</code></li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span>(expression)</span><br><span class=\"line\">    <span class=\"comment\"># THEN section.</span></span><br><span class=\"line\">    COMMAND1(ARGS ...)</span><br><span class=\"line\">    COMMAND2(ARGS ...)</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"keyword\">ELSE</span>(expression)</span><br><span class=\"line\">    <span class=\"comment\"># ELSE section.</span></span><br><span class=\"line\">    COMMAND1(ARGS ...)</span><br><span class=\"line\">    COMMAND2(ARGS ...)</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>(expression)</span><br></pre></td></tr></table></figure>\n<p>另外一个指令是<code>ELSEIF</code>，总体把握一个原则，凡是出现IF的地方一定要有对应的ENDIF。出现 ELSEIF 的地方，ENDIF是可选的。</p>\n<p>表达式的使用方法如下:</p>\n<p>IF(var)，如果变量不是：空，0，N, NO, OFF, FALSE, NOTFOUND 或<br><var>_NOTFOUND 时，表达式为真。</var></p>\n<p>IF(NOT var )，与上述条件相反。</p>\n<p>IF(var1 AND var2)，当两个变量都为真是为真。</p>\n<p>IF(var1 OR var2)，当两个变量其中一个为真时为真。</p>\n<p>IF(COMMAND cmd)，当给定的 cmd 确实是命令并可以调用是为真。</p>\n<p>IF(EXISTS dir)或者 IF(EXISTS file)，当目录名或者文件名存在时为真。</p>\n<p>IF(file1 IS_NEWER_THAN file2)，当 file1 比 file2 新，或者 file1/file2 其中有一个不存在时为真，文件名请使用完整路径。</p>\n<p>IF(IS_DIRECTORY dirname)，当 dirname 是目录时，为真。</p>\n<p>IF(variable MATCHES regex)</p>\n<p>IF(string MATCHES regex)<br>当给定的变量或者字符串能够匹配正则表达式 regex 时为真。比如：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span>(<span class=\"string\">\"hello\"</span> <span class=\"keyword\">MATCHES</span> <span class=\"string\">\"ell\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">MESSAGE</span>(<span class=\"string\">\"true\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>(<span class=\"string\">\"hello\"</span> <span class=\"keyword\">MATCHES</span> <span class=\"string\">\"ell\"</span>)</span><br></pre></td></tr></table></figure>\n<p>数字比较表达式:</p>\n<ul>\n<li>IF(variable LESS number)</li>\n<li>IF(string LESS number)</li>\n<li>IF(variable GREATER number)</li>\n<li>IF(string GREATER number)</li>\n<li>IF(variable EQUAL number)</li>\n<li>IF(string EQUAL number)</li>\n</ul>\n<p>按照字母序的排列进行比较:</p>\n<ul>\n<li>IF(variable STRLESS string)</li>\n<li>IF(string STRLESS string)</li>\n<li>IF(variable STRGREATER string)</li>\n<li>IF(string STRGREATER string)</li>\n<li>IF(variable STREQUAL string)</li>\n<li>IF(string STREQUAL string)</li>\n</ul>\n<p>IF(DEFINED variable)，如果变量被定义，为真。</p>\n<p>一个小例子，用来判断平台差异：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span>(WIN32)</span><br><span class=\"line\">    <span class=\"keyword\">MESSAGE</span>(STATUS “This is windows.”)</span><br><span class=\"line\">    <span class=\"comment\">#作一些 Windows 相关的操作</span></span><br><span class=\"line\"><span class=\"keyword\">ELSE</span>(WIN32)</span><br><span class=\"line\">    <span class=\"keyword\">MESSAGE</span>(STATUS “This is not windows”)</span><br><span class=\"line\">    <span class=\"comment\">#作一些非 Windows 相关的操作</span></span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>(WIN32)</span><br></pre></td></tr></table></figure>\n<p>上述代码用来控制在不同的平台进行不同的控制，但是，阅读起来却并不是那么舒服，ELSE(WIN32)之类的语句很容易引起歧义。</p>\n<p>这就用到了我们在“常用变量”一节提到的<code>CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS</code>开<br>关。可以<code>SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)</code><br>这时候就可以写成:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span>(WIN32)</span><br><span class=\"line\"><span class=\"keyword\">ELSE</span>()</span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>()</span><br></pre></td></tr></table></figure>\n<p>如果配合 ELSEIF 使用，可能的写法是这样:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span>(WIN32)</span><br><span class=\"line\">    <span class=\"comment\">#do something related to WIN32</span></span><br><span class=\"line\"><span class=\"keyword\">ELSEIF</span>(UNIX)</span><br><span class=\"line\">    <span class=\"comment\">#do something related to UNIX</span></span><br><span class=\"line\"><span class=\"keyword\">ELSEIF</span>(APPLE)</span><br><span class=\"line\">    <span class=\"comment\">#do something related to APPLE</span></span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>(WIN32)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>WHILE</code></li>\n</ul>\n<p>WHILE 指令的语法是：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHILE</span>(condition)</span><br><span class=\"line\">    COMMAND1(ARGS ...)</span><br><span class=\"line\">    COMMAND2(ARGS ...)</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"keyword\">ENDWHILE</span>(condition)</span><br></pre></td></tr></table></figure>\n<p>其真假判断条件可以参考 IF 指令。</p>\n<ul>\n<li><code>FOREACH</code></li>\n</ul>\n<p>FOREACH 指令的使用方法有三种形式：</p>\n<ol>\n<li><p>列表</p>\n <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FOREACH</span>(loop_var arg1 arg2 ...)</span><br><span class=\"line\">    COMMAND1(ARGS ...)</span><br><span class=\"line\">    COMMAND2(ARGS ...)</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"keyword\">ENDFOREACH</span>(loop_var)</span><br></pre></td></tr></table></figure>\n<p> 像我们前面使用的<code>AUX_SOURCE_DIRECTORY</code>的例子</p>\n <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">AUX_SOURCE_DIRECTORY</span>(. SRC_LIST)</span><br><span class=\"line\"><span class=\"keyword\">FOREACH</span>(F <span class=\"variable\">$&#123;SRC_LIST&#125;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">MESSAGE</span>(<span class=\"variable\">$&#123;F&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">ENDFOREACH</span>(F)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>范围</p>\n <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FOREACH</span>(loop_var RANGE total)</span><br><span class=\"line\"><span class=\"keyword\">ENDFOREACH</span>(loop_var)</span><br></pre></td></tr></table></figure>\n<p> 从 0 到 total 以1为步进</p>\n<p> 举例如下：</p>\n <figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FOREACH</span>(VAR RANGE <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">MESSAGE</span>(<span class=\"variable\">$&#123;VAR&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">ENDFOREACH</span>(VAR)</span><br><span class=\"line\">最终得到的输出是：</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>范围和步进</p>\n</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FOREACH</span>(loop_var RANGE start stop [step])</span><br><span class=\"line\"><span class=\"keyword\">ENDFOREACH</span>(loop_var)</span><br></pre></td></tr></table></figure>\n<p>从start开始到stop结束，以step为步进，举例如下:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FOREACH</span>(A RANGE <span class=\"number\">5</span> <span class=\"number\">15</span> <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">MESSAGE</span>(<span class=\"variable\">$&#123;A&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">ENDFOREACH</span>(A)</span><br></pre></td></tr></table></figure>\n<p>最终得到的结果是：5 8 11 14</p>\n<p>这个指令需要注意的是，知道遇到<code>ENDFOREACH</code>指令，整个语句块才会得到真正的执行。</p>\n<h2 id=\"模块的使用和自定义模块\"><a href=\"#模块的使用和自定义模块\" class=\"headerlink\" title=\"模块的使用和自定义模块\"></a>模块的使用和自定义模块</h2><p>本章我们将着重介绍系统预定义的<code>Find</code>模块的使用以及自己编写<code>Find</code>模块，系统中提供了其他各种模块，一般情况需要使用<code>INCLUDE</code>指令显式的调用，<code>FIND_PACKAGE</code>指令是一个特例，可以直接调用预定义的模块。</p>\n<p>在本章，我们基于我们前面的libhello共享库，编写一个FindHello.cmake模块。</p>\n<p>对于系统预定义的<code>Find&lt;name&gt;.cmake</code>模块，每一个模块都会定义以下几个变量：</p>\n<ul>\n<li><code>&lt;name&gt;_FOUND</code></li>\n<li><code>&lt;name&gt;_INCLUDE_DIR</code> or <code>&lt;name&gt;_INCLUDES</code></li>\n<li><code>&lt;name&gt;_LIBRARY</code> or <code>&lt;name&gt;_LIBRARIES</code></li>\n</ul>\n<p>你可以通过<code>&lt;name&gt;_FOUND</code>来判断模块是否被找到，如果没有找到，按照工程的需要关闭某些特性、给出提醒或者中止编译。</p>\n<p>如果<code>&lt;name&gt;_FOUND</code>为真，则将<code>&lt;name&gt;_INCLUDE_DIR</code>加入<code>INCLUDE_DIRECTORIES</code>，将<code>&lt;name&gt;_LIBRARY</code>加入 <code>TARGET_LINK_LIBRARIES</code>中。</p>\n<h4 id=\"编写FindHello模块\"><a href=\"#编写FindHello模块\" class=\"headerlink\" title=\"编写FindHello模块\"></a>编写FindHello模块</h4><p>我们在此前的test3实例中，演示了构建动态库、静态库的过程并进行了安装。接下来，我们在test6示例中演示如何自定义<code>FindHello</code>模块并使用这个模块构建工程：</p>\n<p>请在建立<code>/home/workspace/cmake_practice</code>中建立test6目录，并在其中建立cmake目录用于存放我们自己定义的<code>FindHello.cmake</code>模块，同时建立<code>src</code>目录，用于存放我们的源文件。</p>\n<p>定义<code>cmake/FindHello.cmake</code>模块</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FIND_PATH</span>(HELLO_INCLUDE_DIR hello.h /usr/local/<span class=\"keyword\">include</span>/hello /usr/<span class=\"keyword\">include</span>/hello)</span><br><span class=\"line\"><span class=\"keyword\">FIND_LIBRARY</span>(HELLO_LIBRARY NAMES hello PATH /usr/local/lib /usr/lib)</span><br><span class=\"line\"><span class=\"keyword\">IF</span>(HELLO_INCLUDE_DIR <span class=\"keyword\">AND</span> HELLO_LIBRARY)</span><br><span class=\"line\">        <span class=\"keyword\">SET</span>(HELLO_FOUND <span class=\"keyword\">TRUE</span>)</span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>()</span><br><span class=\"line\"><span class=\"keyword\">IF</span>(HELLO_FOUND)</span><br><span class=\"line\">        <span class=\"keyword\">IF</span>(NOT Hello_FIND_QUIETLY)</span><br><span class=\"line\">                <span class=\"keyword\">MESSAGE</span>(STATUS <span class=\"string\">\"Found Hello: $&#123;HELLO_LIBRARY&#125;\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">ENDIF</span>()</span><br><span class=\"line\"><span class=\"keyword\">ELSE</span>()</span><br><span class=\"line\">        <span class=\"keyword\">IF</span>(Hello_FIND_REQUIRED)</span><br><span class=\"line\">                <span class=\"keyword\">MESSAGE</span>(FATAL_ERROR <span class=\"string\">\"Cound not find hello library\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">ENDIF</span>()</span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>()</span><br></pre></td></tr></table></figure>\n<p><code>QUIET</code>参数，对应与我们编写的<code>FindHello</code>中的 <code>HELLO_FIND_QUIETLY</code>，如果不指定这个参数，就会执行：<br><code>MESSAGE(STATUS &quot;Found Hello: ${HELLO_LIBRARY}&quot;)</code></p>\n<p><code>REQUIRED</code>参数，其含义是指这个共享库是否是工程必须的，如果使用了这个参数，说明这个链接库是必备库，如果找不到这个链接库，则工程不能编译。对应于<code>FindHello.cmake</code>模块中的<code>HELLO_FIND_REQUIRED</code>变量。<br>同样，我们在上面的模块中定义了<code>HELLO_FOUND</code>,<code>HELLO_INCLUDE_DIR</code>,<code>HELLO_LIBRARY</code>变量供开发者在<code>FIND_PACKAGE</code>指令中使用。</p>\n<p>在src/main.c中写入如下内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;hello.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        print_hello();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>建立src/CMakeLists.txt文件，内容如下：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FIND_PACKAGE</span>(Hello)</span><br><span class=\"line\"><span class=\"keyword\">IF</span>(HELLO_FOUND)</span><br><span class=\"line\">        <span class=\"keyword\">ADD_EXECUTABLE</span>(hello main.c)</span><br><span class=\"line\">        <span class=\"keyword\">INCLUDE_DIRECTORIES</span>(<span class=\"variable\">$&#123;HELLO_INCLUDE_DIR&#125;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">TARGET_LINK_LIBRARIES</span>(hello <span class=\"variable\">$&#123;HELLO_LIBRARY&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>(HELLO_FOUND)</span><br></pre></td></tr></table></figure>\n<p>为了能够让工程找到<code>FindHello.cmake</code>模块(存放在工程中的cmake目录)我们在主工程文件CMakeLists.txt中加入：<br><code>SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)</code></p>\n<p>仍然采用外部编译的方式，建立build目录，进入目录运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake ..</span><br></pre></td></tr></table></figure>\n<p>我们可以从输出中看到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- Found Hello: /usr/local/lib/libhello.so</span><br></pre></td></tr></table></figure>\n<p>如果没有找到hello library呢？</p>\n<p>我们可以尝试将/usr/local/lib/libhello.x 移动到/tmp目录，这样，按照FindHello模块的定义，就找不到hello library了，我们再来看一下构建结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake ..</span><br></pre></td></tr></table></figure>\n<p>仍然可以成功进行构建，但是这时候是没有办法编译的。修改 <code>FIND_PACKAGE(HELLO)</code>为<code>FIND_PACKAGE(HELLO REQUIRED)</code>，将 hello library定义为工程必须的共享库。</p>\n<p>这时候再次运行 cmake ..</p>\n<p>我们得到如下输出：</p>\n<p><code>CMake Error: Could not find hello library.</code></p>\n<p>因为找不到libhello.x，所以，整个Makefile生成过程被出错中止。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Sep 10 2018 21:18:07 GMT+0800 (中国标准时间)","title":"CMake语言和语法","path":"CMake进阶学习/","eyeCatchImage":null,"excerpt":"<h1 id=\"CMake\"><a href=\"#CMake\" class=\"headerlink\" title=\"CMake\"></a>CMake</h1><p>在项目或者工作中，会不可避免的使用到cmake来构建我们的项目，所以掌握cmake的基本语法，以及常用的和进阶的使用方法是非常重要的。</p>\n<p>下面我们将从一个简单的<code>hello cmake</code>示例开始，一步步的深入了解cmake的用法。</p>","date":"2018-04-04T16:00:00.000Z","pv":0,"totalPV":0,"categories":"基础知识/技能","tags":["CMake"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"layout":"post","title":"Google Python 编程风格","subtitle":"养成良好的编程习惯和风格，让代码像诗一样优美","date":"2018-05-19T16:00:00.000Z","copyright":true,"photos":["images/tabs-or-spaces.png"],"_content":"\n# Google Python Code Style\n\nPython相较于C++来说，语法和写法都比较简单，所以不像C++一样有那么多的规范，主要从*语言规范*和*风格规范*两个方面制定规范。\n\n<!-- more -->\n\n## 语言规范\n\n#### Lint\n\n> Tip: 对你的代码运行pylint\n\n- 定义\n\n    pylint是一个在Python源代码中查找bug的工具. 对于C和C++这样的不那么动态的语言, 这些bug通常由编译器来捕获. 由于Python的动态特性, 有些警告可能不对. 不过伪告警应该很少.\n\n- 优点\n\n    可以捕获容易忽视的错误, 例如输入错误, 使用未赋值的变量等.\n\n- 缺点\n\n    pylint不完美. 要利用其优势, 我们有时侯需要:\n    - 围绕着它来写代码\n    - 抑制其告警\n    - 改进它\n    - 忽略它.\n\n- 结论\n\n    确保对你的代码运行pylint.抑制不准确的警告,以便能够将其他警告暴露出来。\n\n    你可以通过设置一个行注释来抑制告警. 例如:\n\n    ```Python\n    dict = 'something awful'  # Bad Idea... pylint: disable=redefined-builtin\n    ```\n\n    pylint警告是以一个数字编号(如 `C0112` )和一个符号名(如 `empty-docstring` )来标识的. 在编写新代码或更新已有代码时对告警进行抑制, 推荐使用符号名来标识.\n\n    如果警告的符号名不够见名知意，那么请对其增加一个详细解释。\n\n    采用这种抑制方式的好处是我们可以轻松查找抑制并回顾它们.\n\n    你可以使用命令 `pylint --list-msgs` 来获取pylint告警列表. 你可以使用命令 `pylint --help-msg=C6409` , 以获取关于特定消息的更多信息.\n\n    相比较于之前使用的 `pylint: disable-msg` , 本文推荐使用 `pylint: disable` .\n\n    要抑制”参数未使用”告警, 你可以用”_”作为参数标识符, 或者在参数名前加”unused_”. 遇到不能改变参数名的情况, 你可以通过在函数开头”提到”它们来消除告警. 例如:\n\n    ```Python\n    def foo(a, unused_b, unused_c, d=None, e=None):\n        _ = d, e\n        return a\n    ```\n\n## 导入\n\n> Tip: 仅对包和模块使用导入\n\n- 定义\n\n    模块间共享代码的重用机制.\n\n- 优点\n\n    命名空间管理约定十分简单. 每个标识符的源都用一种一致的方式指示. x.Obj表示Obj对象定义在模块x中.\n\n- 缺点\n\n    模块名仍可能冲突. 有些模块名太长, 不太方便.\n\n- 结论\n\n    - **不要**使用`from x import *`\n    - 使用`import x`来导入包和模块.\n    - 使用`from x import y`, 其中x是包前缀, y是不带前缀的模块名.\n    - 使用`from x import y as z`, 如果两个要导入的模块都叫做y或者y太长了.\n    - 例如, 模块`sound.effects.echo`可以用如下方式导入:\n\n        ```Python\n        from sound.effects import echo\n        ...\n        echo.EchoFilter(input, output, delay=0.7, atten=4)\n        ```\n    导入时不要使用相对名称. 即使模块在同一个包中, 也要使用完整包名. 这能帮助你避免无意间导入一个包两次.\n\n## 包\n\n> Tip: 使用模块的全路径名来导入每个模块\n\n- 优点\n\n    避免模块名冲突. 查找包更容易.\n\n- 缺点\n\n    部署代码变难, 因为你必须复制包层次.\n\n- 结论\n\n    所有的新代码都应该用完整包名来导入每个模块.\n\n    应该像下面这样导入:\n\n    ```Python\n    # Reference in code with complete name.\n    import sound.effects.echo\n\n    # Reference in code with just module name (preferred).\n    from sound.effects import echo\n    ```\n\n#### 异常\n\n> Tip: 允许使用异常, 但必须小心\n\n- 定义\n\n    异常是一种跳出代码块的正常控制流来处理错误或者其它异常条件的方式.\n\n- 优点\n\n    正常操作代码的控制流不会和错误处理代码混在一起. 当某种条件发生时, 它也允许控制流跳过多个框架. 例如, 一步跳出N个嵌套的函数, 而不必继续执行错误的代码.\n\n- 缺点\n\n    可能会导致让人困惑的控制流. 调用库时容易错过错误情况.\n\n- 结论\n\n    异常必须遵守特定条件:\n\n    - 像这样触发异常:`raise MyException(\"Error message\")`或者`raise MyException`. 不要使用两个参数的形式(`raise MyException, \"Error message\"`)或者过时的字符串异常(`raise \"Error message\"`).\n    - 模块或包应该定义自己的特定域的异常基类, 这个基类应该从内建的Exception类继承. 模块的异常基类应该叫做”Error”.\n\n        ```Python\n        class Error(Exception):\n            pass\n        ```\n    - 永远不要使用`except:`语句来捕获所有异常, 也不要捕获`Exception`或者`StandardError`, 除非你打算重新触发该异常, 或者你已经在当前线程的最外层(记得还是要打印一条错误消息). 在异常这方面, Python非常宽容,`except:`真的会捕获包括Python语法错误在内的任何错误. 使用`except:`很容易隐藏真正的bug.\n    - 尽量减少`try/except`块中的代码量. `try`块的体积越大, 期望之外的异常就越容易被触发. 这种情况下, `try/except`块将隐藏真正的错误.\n    - 使用finally子句来执行那些无论try块中有没有异常都应该被执行的代码. 这对于清理资源常常很有用, 例如关闭文件.\n    - 当捕获异常时, 使用 as 而不要用逗号. 例如\n\n        ```Python\n        try:\n            raise Error\n        except Error as error:\n            pass\n        ```\n\n#### 全局变量\n\n> Tip: 避免全局变量\n\n- 定义\n\n    定义在模块级的变量.\n\n- 优点\n\n    偶尔有用.\n\n- 缺点\n\n    导入时可能改变模块行为, 因为导入模块时会对模块级变量赋值.\n\n- 结论\n\n    避免使用全局变量, 用类变量来代替. 但也有一些例外:\n\n    - 脚本的默认选项.\n    - 模块级常量. 例如:`PI = 3.14159`. 常量应该全大写, 用下划线连接.\n    - 有时候用全局变量来缓存值或者作为函数返回值很有用.\n    - 如果需要, 全局变量应该仅在模块内部可用, 并通过模块级的公共函数来访问.\n\n#### 嵌套/局部/内部类或函数\n\n> Tip: 鼓励使用嵌套/本地/内部类或函数\n\n- 定义\n\n    类可以定义在方法, 函数或者类中. 函数可以定义在方法或函数中. 封闭区间中定义的变量对嵌套函数是只读的.\n\n- 优点\n\n    允许定义仅用于有效范围的工具类和函数.\n\n- 缺点\n\n    嵌套类或局部类的实例不能序列化(pickled).\n\n- 结论\n\n    推荐使用.\n\n#### 列表推导(List Comprehensions)\n\n> Tip: 可以在简单情况下使用\n\n- 定义\n\n    列表推导(list comprehensions)与生成器表达式(generator expression)提供了一种简洁高效的方式来创建列表和迭代器, 而不必借助`map()`, `filter()`, 或者`lambda`.\n\n- 优点\n\n    简单的列表推导可以比其它的列表创建方法更加清晰简单. 生成器表达式可以十分高效, 因为它们避免了创建整个列表.\n\n- 缺点\n\n    复杂的列表推导或者生成器表达式可能难以阅读.\n\n- 结论\n\n    适用于简单情况. 每个部分应该单独置于一行: 映射表达式, for语句, 过滤器表达式. 禁止多重for语句或过滤器表达式. 复杂情况下还是使用循环.\n\n    ```Python\n    Yes:\n    result = []\n    for x in range(10):\n        for y in range(5):\n            if x * y > 10:\n                result.append((x, y))\n\n    for x in xrange(5):\n        for y in xrange(5):\n            if x != y:\n                for z in xrange(5):\n                    if y != z:\n                        yield (x, y, z)\n\n    return ((x, complicated_transform(x))\n            for x in long_generator_function(parameter)\n            if x is not None)\n\n    squares = [x * x for x in range(10)]\n\n    eat(jelly_bean for jelly_bean in jelly_beans\n        if jelly_bean.color == 'black')\n    ```\n\n    ```Python\n    No:\n    result = [(x, y) for x in range(10) for y in range(5) if x * y > 10]\n\n    return ((x, y, z)\n            for x in xrange(5)\n            for y in xrange(5)\n            if x != y\n            for z in xrange(5)\n            if y != z)\n    ```\n\n#### 默认迭代器和操作符\n\n> Tip: 如果类型支持, 就使用默认迭代器和操作符. 比如列表, 字典及文件等.\n\n- 定义\n\n    容器类型, 像字典和列表, 定义了默认的迭代器和关系测试操作符(`in`和`not in`)\n\n- 优点\n\n    默认操作符和迭代器简单高效, 它们直接表达了操作, 没有额外的方法调用. 使用默认操作符的函数是通用的. 它可以用于支持该操作的任何类型.\n\n- 缺点\n\n    你没法通过阅读方法名来区分对象的类型(例如, has_key()意味着字典). 不过这也是优点.\n\n- 结论\n\n    如果类型支持, 就使用默认迭代器和操作符, 例如列表, 字典和文件. 内建类型也定义了迭代器方法. 优先考虑这些方法, 而不是那些返回列表的方法. 当然，这样遍历容器时，你将不能修改容器.\n\n    ```Python\n    Yes:    for key in adict: ...\n            if key not in adict: ...\n            if obj in alist: ...\n            for line in afile: ...\n            for k, v in dict.iteritems(): ...\n    ```\n\n    ```Python\n    No:     for key in adict.keys(): ...\n            if not adict.has_key(key): ...\n            for line in afile.readlines(): ...\n    ```\n\n#### 生成器\n\n> Tip: 按需使用生成器.\n\n- 定义\n\n    所谓生成器函数, 就是每当它执行一次生成(yield)语句, 它就返回一个迭代器, 这个迭代器生成一个值. 生成值后, 生成器函数的运行状态将被挂起, 直到下一次生成.\n\n- 优点\n\n    简化代码, 因为每次调用时, 局部变量和控制流的状态都会被保存. 比起一次创建一系列值的函数, 生成器使用的内存更少.\n\n- 缺点\n\n    无\n\n- 结论\n\n    鼓励使用. 注意在生成器函数的文档字符串中使用`Yields:`而不是`Returns:`.\n\n#### Lambda函数\n\n> Tip: 适用于单行函数\n\n- 定义\n\n    与语句相反, lambda在一个表达式中定义匿名函数. 常用于为`map()`和`filter()`之类的高阶函数定义回调函数或者操作符.\n\n- 优点\n\n    方便\n\n- 缺点\n\n    比本地函数更难阅读和调试. 没有函数名意味着堆栈跟踪更难理解. 由于lambda函数通常只包含一个表达式, 因此其表达能力有限.\n\n- 结论\n\n    适用于单行函数. 如果代码超过60-80个字符, 最好还是定义成常规(嵌套)函数.\n\n    对于常见的操作符，例如乘法操作符，使用`operator`模块中的函数以代替`lambda`函数. 例如, 推荐使用 `operator.mul`, 而不是`lambda x, y: x * y`.\n\n#### 条件表达式\n\n> Tip: 适用于单行函数\n\n- 定义\n\n    条件表达式是对于if语句的一种更为简短的句法规则. 例如:`x = 1 if cond else 2`.\n\n- 优点\n\n    比if语句更加简短和方便.\n\n- 缺点\n\n    比if语句更加简短和方便.\n\n- 结论\n\n    适用于单行函数. 在其他情况下，推荐使用完整的if语句.\n\n#### 默认参数值\n\n> Tip: 适用于大部分情况.\n\n- 定义\n\n    你可以在函数参数列表的最后指定变量的值, 例如, def `foo(a, b = 0):`. 如果调用foo时只带一个参数, 则b被设为0. 如果带两个参数, 则b的值等于第二个参数.\n\n- 优点\n\n    你经常会碰到一些使用大量默认值的函数, 但偶尔(比较少见)你想要覆盖这些默认值. 默认参数值提供了一种简单的方法来完成这件事, 你不需要为这些罕见的例外定义大量函数. 同时, Python也不支持重载方法和函数, 默认参数是一种”仿造”重载行为的简单方式.\n\n- 缺点\n\n    默认参数只在模块加载时求值一次. 如果参数是列表或字典之类的可变类型, 这可能会导致问题. 如果函数修改了对象(例如向列表追加项), 默认值就被修改了.\n\n- 结论\n\n    鼓励使用, 不过有如下注意事项:\n\n    不要在函数或方法定义中使用可变对象作为默认值.\n\n    ```Python\n    Yes: def foo(a, b=None):\n            if b is None:\n                b = []\n    ```\n\n    ```Python\n    No:  def foo(a, b=[]):\n            ...\n    No:  def foo(a, b=time.time()):  # The time the module was loaded???\n            ...\n    No:  def foo(a, b=FLAGS.my_thing):  # sys.argv has not yet been parsed...\n            ...\n    ```\n\n#### 属性(properties)\n\n> Tip: 访问和设置数据成员时, 你通常会使用简单, 轻量级的访问和设置函数. 建议用属性（properties）来代替它们.\n\n- 定义\n\n    一种用于包装方法调用的方式. 当运算量不大, 它是获取和设置属性(attribute)的标准方式.\n\n- 优点\n\n    通过消除简单的属性(attribute)访问时显式的get和set方法调用, 可读性提高了. 允许懒惰的计算. 用Pythonic的方式来维护类的接口. 就性能而言, 当直接访问变量是合理的, 添加访问方法就显得琐碎而无意义. 使用属性(properties)可以绕过这个问题. 将来也可以在不破坏接口的情况下将访问方法加上.\n\n- 缺点\n\n    属性(properties)是在get和set方法声明后指定, 这需要使用者在接下来的代码中注意: set和get是用于属性(properties)的(除了用`@property`装饰器创建的只读属性). 必须继承自object类. 可能隐藏比如操作符重载之类的副作用. 继承时可能会让人困惑.\n\n- 结论\n\n    你通常习惯于使用访问或设置方法来访问或设置数据, 它们简单而轻量. 不过我们建议你在新的代码中使用属性. 只读属性应该用`@property`装饰器 来创建.\n\n    ```Python\n    class Student(object):\n\n    @property\n    def score(self):\n        return self._score\n\n    @score.setter\n    def score(self, value):\n        if not isinstance(value, int):\n            raise ValueError('score must be an integer!')\n        if value < 0 or value > 100:\n            raise ValueError('score must between 0 ~ 100!')\n        self._score = value\n    ```\n\n#### True/False的求值\n\n> Tip: 尽可能使用隐式false\n\n- 定义\n\n    Python在布尔上下文中会将某些值求值为false. 按简单的直觉来讲, 就是所有的”空”值都被认为是false. 因此`0`，`None`,`[]`,`{}`,`\"\"`都被认为是false.\n\n- 优点\n\n    使用Python布尔值的条件语句更易读也更不易犯错. 大部分情况下, 也更快.\n\n- 缺点\n\n    对C/C++开发人员来说, 可能看起来有点怪.\n\n- 结论\n\n    尽可能使用隐式的false, 例如: 使用`if foo:`而不是 `if foo != []:`. 不过还是有一些注意事项需要你铭记在心:\n\n    - 永远不要用==或者!=来比较单件, 比如`None`. 使用`is`或者`is not`.\n    - 注意: 当你写下`if x:`时, 你其实表示的是`if x is not None`. 例如: 当你要测试一个默认值是None的变量或参数是否被设为其它值. 这个值在布尔语义下可能是false!\n    - 永远不要用`==`将一个布尔量与false相比较. 使用`if not x:`代替. 如果你需要区分`false`和`None`, 你应该用像`if not x and x is not None:`这样的语句.\n    - 对于序列(字符串, 列表, 元组), 要注意空序列是false. 因此`if not seq:`或者`if seq:`比`if len(seq):`或`if not len(seq):`要更好.\n    - 处理整数时, 使用隐式false可能会得不偿失(即不小心将None当做0来处理). 你可以将一个已知是整型(且不是len()的返回结果)的值与0比较.\n\n        ```Python\n        Yes:    if not users:\n                    print 'no users'\n\n                if foo == 0:\n                    self.handle_zero()\n\n                if i % 10 == 0:\n                    self.handle_multiple_of_ten()\n        ```\n\n        ```Python\n        No:     if len(users) == 0:\n                    print 'no users'\n\n                if foo is not None and not foo:\n                    self.handle_zero()\n\n                if not i % 10:\n                    self.handle_multiple_of_ten()\n        ```\n    - 注意'0'(字符串)会被当做true.\n\n#### 过时的语言特性\n\n> Tip: 尽可能使用字符串方法取代字符串模块. 使用函数调用语法取代apply(). 使用列表推导, for循环取代filter(), map()以及reduce().\n\n- 定义\n\n    当前版本的Python提供了大家通常更喜欢的替代品.\n\n- 结论\n\n    我们不使用不支持这些特性的Python版本, 所以没理由不用新的方式.\n\n    ```Python\n    Yes:    words = foo.split(':')\n\n            [x[1] for x in my_list if x[2] == 5]\n\n            map(math.sqrt, data)    # Ok. No inlined lambda expression.\n\n            fn(*args, **kwargs)\n    ```\n\n    ```Python\n    No:     words = string.split(foo, ':')\n\n            map(lambda x: x[1], filter(lambda x: x[2] == 5, my_list))\n\n            apply(fn, args, kwargs)\n    ```\n\n#### 词法作用域(Lexical Scoping)\n\n> Tip: 推荐使用\n\n- 定义\n\n    嵌套的Python函数可以引用外层函数中定义的变量, 但是不能够对它们赋值. 变量绑定的解析是使用词法作用域, 也就是基于静态的程序文本. 对一个块中的某个名称的任何赋值都会导致Python将对该名称的全部引用当做局部变量, 甚至是赋值前的处理. 如果碰到global声明, 该名称就会被视作全局变量.\n\n    一个使用这个特性的例子:\n\n    ```Python\n    def get_adder():\n        \"\"\"Returns a function that adds numbers to a given number.\"\"\"\n        def adder(summand1, summand2):\n            return summand1 + summand2\n\n        return adder\n    ```\n\n- 优点\n\n    通常可以带来更加清晰, 优雅的代码. 尤其会让有经验的Lisp和Scheme(还有Haskell, ML等)程序员感到欣慰.\n\n- 缺点\n\n    可能导致让人迷惑的bug. 例如下面这个依据 PEP-0227 的例子:\n\n    ```Python\n    i = 4\n    def foo(x):\n        def bar():\n            print i,\n        # ...\n        # A bunch of code here\n        # ...\n        for i in x:  # Ah, i *is* local to Foo, so this is what Bar sees\n            print i,\n        bar()\n    ```\n\n    因此`foo([1, 2, 3])`会打印`1 2 3 3`, 不是`1 2 3 4`. x是一个列表, for循环其实是将x中的值依次赋给i.这样对i的赋值就隐式的发生了, 整个foo函数体中的i都会被当做局部变量, 包括bar()中的那个.\n\n- 结论\n\n    鼓励使用\n\n#### 函数与方法装饰器\n\n> Tip: 如果好处很显然, 就明智而谨慎的使用装饰器\n\n- 定义\n\n    用于函数及方法的装饰器 (也就是@标记). 最常见的装饰器是`@classmethod`和`@staticmethod`, 用于将常规函数转换成类方法或静态方法. 不过, 装饰器语法也允许用户自定义装饰器. 特别地, 对于某个函数`my_decorator`, 下面的两段代码是等效的:\n\n    ```Python\n    class C(object):\n        @my_decorator\n        def method(self):\n            # method body ...\n    ```\n\n    ```Python\n    class C(object):\n        def method(self):\n            # method body ...\n        method = my_decorator(method)\n    ```\n\n- 优点\n\n    优雅的在函数上指定一些转换. 该转换可能减少一些重复代码, 保持已有函数不变(enforce invariants), 等.\n\n- 缺点\n\n    装饰器可以在函数的参数或返回值上执行任何操作, 这可能导致让人惊异的隐藏行为. 而且, 装饰器在导入时执行. 从装饰器代码的失败中恢复更加不可能.\n\n- 结论\n\n    如果好处很显然, 就明智而谨慎的使用装饰器. 装饰器应该遵守和函数一样的导入和命名规则. 装饰器的python文档应该清晰的说明该函数是一个装饰器. 请为装饰器编写单元测试.\n\n    避免装饰器自身对外界的依赖(即不要依赖于文件, socket, 数据库连接等), 因为装饰器运行时这些资源可能不可用(由 pydoc 或其它工具导入). 应该保证一个用有效参数调用的装饰器在所有情况下都是成功的.\n\n#### 线程\n\n> Tip: 不要依赖内建类型的原子性.\n\n虽然Python的内建类型例如字典看上去拥有原子操作, 但是在某些情形下它们仍然不是原子的(即: 如果__hash__或__eq__被实现为Python方法)且它们的原子性是靠不住的. 你也不能指望原子变量赋值(因为这个反过来依赖字典).\n\n优先使用Queue模块的`Queue`数据类型作为线程间的数据通信方式. 另外, 使用threading模块及其锁原语(locking primitives). 了解条件变量的合适使用方式, 这样你就可以使用`threading.Condition`来取代低级别的锁了.\n\n#### 威力过大的特性\n\n> Tip: 避免使用这些特性\n\n- 定义\n\n    Python是一种异常灵活的语言, 它为你提供了很多花哨的特性, 诸如元类(metaclasses), 字节码访问, 任意编译(on-the-fly compilation), 动态继承, 对象父类重定义(object reparenting), 导入黑客(import hacks), 反射, 系统内修改(modification of system internals), 等等.\n\n- 优点\n\n    强大的语言特性, 能让你的代码更紧凑.\n\n- 缺点\n\n    使用这些很”酷”的特性十分诱人, 但不是绝对必要. 使用奇技淫巧的代码将更加难以阅读和调试. 开始可能还好(对原作者而言), 但当你回顾代码, 它们可能会比那些稍长一点但是很直接的代码更加难以理解.\n\n- 结论\n\n    在你的代码中避免这些特性.\n\n## 风格规范\n\n#### 分号\n\n> Tip: 不要在行尾加分号, 也不要用分号将两条命令放在同一行.\n\n#### 行长度\n\n> Tip: 每行不超过80个字符\n\n例外:\n\n    1. 长的导入模块语句\n    1. 注释里的URL\n\n不要使用反斜杠连接行.\n\nPython会将`圆括号`,`中括号`和`花括号`中的行隐式的连接起来 , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.\n\n```Python\nYes: foo_bar(self, width, height, color='black', design=None, x='foo',\n             emphasis=None, highlight=0)\n\n     if (width == 0 and height == 0 and\n         color == 'red' and emphasis == 'strong'):\n```\n\n如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接:\n\n```Python\nx = ('This will build a very long long '\n     'long long long long long long string')\n```\n\n在注释中，如果必要，将长的URL放在一行上。\n\n```Python\n Google 开源项目风格指南\nlatest\n\nSearch docs\nGoogle 开源项目风格指南 (中文版)\nC++ 风格指南 - 内容目录\nObjective-C 风格指南 - 内容目录\nPython 风格指南 - 内容目录\n扉页\n背景\nPython语言规范\nPython风格规范\n分号\n行长度\n括号\n缩进\n空行\n空格\nShebang\n注释\n类\n字符串\n文件和sockets\nTODO注释\n导入格式\n语句\n访问控制\n命名\nMain\n临别赠言\nShell 风格指南 - 内容目录\n\nLove Documentation? Write the Docs is a community full of people like you!\nSponsored · Ads served ethically\nGoogle 开源项目风格指南\nDocs » Python 风格指南 - 内容目录 » Python风格规范  Edit on GitHub\nPython风格规范\n分号\nTip\n\n不要在行尾加分号, 也不要用分号将两条命令放在同一行.\n\n行长度\nTip\n\n每行不超过80个字符\n\n例外:\n\n长的导入模块语句\n注释里的URL\n不要使用反斜杠连接行.\n\nPython会将 圆括号, 中括号和花括号中的行隐式的连接起来 , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.\n\n```Python\nYes: foo_bar(self, width, height, color='black', design=None, x='foo',\n             emphasis=None, highlight=0)\n\n     if (width == 0 and height == 0 and\n         color == 'red' and emphasis == 'strong'):\n```\n\n如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接:\n\n```Python\nx = ('This will build a very long long '\n     'long long long long long long string')\n```\n\n在注释中，如果必要，将长的URL放在一行上。\n\n```Python\nYes:  # See details at\n      # http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html\n```\n\n```Python\nNo:  # See details at\n     # http://www.example.com/us/developer/documentation/api/content/\\\n     # v2.0/csv_file_name_extension_full_specification.html\n```\n\n#### 括号\n\n> Tip: 宁缺毋滥的使用括号\n\n除非是用于实现行连接, 否则不要在返回语句或条件语句中使用括号. 不过在元组两边使用括号是可以的.\n\n```Python\nYes: if foo:\n         bar()\n     while x:\n         x = bar()\n     if x and y:\n         bar()\n     if not x:\n         bar()\n     return foo\n     for (x, y) in dict.items(): ...\n```\n\n```Python\nNo:  if (x):\n         bar()\n     if not(x):\n         bar()\n     return (foo)\n```\n\n#### 缩进\n\n> Tip: 用4个空格来缩进代码\n\n绝对不要用tab, 也不要tab和空格混用. 对于行连接的情况, 你应该要么垂直对齐换行的元素, 或者使用4空格的悬挂式缩进(这时第一行不应该有参数):\n\n```Python\nYes:   # Aligned with opening delimiter\n       foo = long_function_name(var_one, var_two,\n                                var_three, var_four)\n\n       # Aligned with opening delimiter in a dictionary\n       foo = {\n           long_dictionary_key: value1 +\n                                value2,\n           ...\n       }\n\n       # 4-space hanging indent; nothing on first line\n       foo = long_function_name(\n           var_one, var_two, var_three,\n           var_four)\n\n       # 4-space hanging indent in a dictionary\n       foo = {\n           long_dictionary_key:\n               long_dictionary_value,\n           ...\n       }\n```\n\n```Python\nNo:    # Stuff on first line forbidden\n      foo = long_function_name(var_one, var_two,\n          var_three, var_four)\n\n      # 2-space hanging indent forbidden\n      foo = long_function_name(\n        var_one, var_two, var_three,\n        var_four)\n\n      # No hanging indent in a dictionary\n      foo = {\n          long_dictionary_key:\n              long_dictionary_value,\n              ...\n      }\n```\n\n#### 空行\n\n> 顶级定义之间空两行, 方法定义之间空一行\n\n顶级定义之间空两行, 比如函数或者类定义. 方法定义, 类定义与第一个方法之间, 都应该空一行. 函数或方法中, 某些地方要是你觉得合适, 就空一行.\n\n#### 空格\n\n> 按照标准的排版规范来使用标点两边的空格\n\n括号内不要有空格.\n\n```Python\nYes: spam(ham[1], {eggs: 2}, [])\nNo:  spam( ham[ 1 ], { eggs: 2 }, [ ] )\n```\n\n不要在逗号, 分号, 冒号前面加空格, 但应该在它们后面加(除了在行尾).\n\n```Python\nYes: if x == 4:\n         print x, y\n     x, y = y, x\nNo:  if x == 4 :\n         print x , y\n     x , y = y , x\n```\n\n参数列表, 索引或切片的左括号前不应加空格.\n\n```Python\nYes: spam(1)\nno: spam (1)\n\nYes: dict['key'] = list[index]\nNo:  dict ['key'] = list [index]\n```\n\n在二元操作符两边都加上一个空格, 比如赋值(=), 比较(==, <, >, !=, <>, <=, >=, in, not in, is, is not), 布尔(and, or, not). 至于算术操作符两边的空格该如何使用, 需要你自己好好判断. 不过两侧务必要保持一致.\n\n```Python\nYes: x == 1\nNo:  x<1\n```\n\n当’=’用于指示关键字参数或默认参数值时, 不要在其两侧使用空格.\n\n```Python\nYes: def complex(real, imag=0.0): return magic(r=real, i=imag)\nNo:  def complex(real, imag = 0.0): return magic(r = real, i = imag)\n```\n\n不要用空格来垂直对齐多行间的标记, 因为这会成为维护的负担(适用于:, #, =等):\n\n```Python\nYes:\n     foo = 1000  # comment\n     long_name = 2  # comment that should not be aligned\n\n     dictionary = {\n         \"foo\": 1,\n         \"long_name\": 2,\n         }\n```\n\n```Python\nNo:\n     foo       = 1000  # comment\n     long_name = 2     # comment that should not be aligned\n\n     dictionary = {\n         \"foo\"      : 1,\n         \"long_name\": 2,\n         }\n```\n\n#### Shebang\n\n> 大部分.py文件不必以#!作为文件的开始. 根据 PEP-394 , 程序的main文件应该以 #!/usr/bin/python2或者 #!/usr/bin/python3开始.\n\n在计算机科学中, Shebang (也称为Hashbang)是一个由井号和叹号构成的字符串行(#!), 其出现在文本文件的第一行的前两个字符. 在文件中存在Shebang的情况下, 类Unix操作系统的程序载入器会分析Shebang后的内容, 将这些内容作为解释器指令, 并调用该指令, 并将载有Shebang的文件路径作为该解释器的参数. 例如, 以指令#!/bin/sh开头的文件在执行时会实际调用/bin/sh程序.\n\n\\#!先用于帮助内核找到Python解释器, 但是在导入模块时, 将会被忽略. 因此只有被直接执行的文件中才有必要加入\\#!.\n\n#### 注释\n\n> 确保对模块, 函数, 方法和行内注释使用正确的风格\n\n##### 文档字符串\n\nPython有一种独一无二的的注释方式: 使用文档字符串. 文档字符串是包, 模块, 类或函数里的第一个语句. 这些字符串可以通过对象的`__doc__`成员被自动提取, 并且被`pydoc`所用. (你可以在你的模块上运行pydoc试一把, 看看它长什么样). 我们对文档字符串的惯例是使用三重双引号`\"\"\"`. 一个文档字符串应该这样组织: 首先是一行以句号, 问号或惊叹号结尾的概述(或者该文档字符串单纯只有一行). 接着是一个空行. 接着是文档字符串剩下的部分, 它应该与文档字符串的第一行的第一个引号对齐. 下面有更多文档字符串的格式化规范.\n\n##### 模块\n\n每个文件应该包含一个许可样板. 根据项目使用的许可(例如, Apache 2.0, BSD, LGPL, GPL), 选择合适的样板.\n\n##### 函数和方法\n\n下文所指的函数,包括函数, 方法, 以及生成器.\n\n一个函数必须要有文档字符串, 除非它满足以下条件:\n\n- 外部不可见\n- 非常短小\n- 简单明了\n\n文档字符串应该包含函数做什么, 以及输入和输出的详细描述. 通常, 不应该描述”怎么做”, 除非是一些复杂的算法. 文档字符串应该提供足够的信息, 当别人编写代码调用该函数时, 他不需要看一行代码, 只要看文档字符串就可以了. 对于复杂的代码, 在代码旁边加注释会比使用文档字符串更有意义.\n\nArgs:\n\n    列出每个参数的名字, 并在名字后使用一个冒号和一个空格, 分隔对该参数的描述.如果描述太长超过了单行80字符,使用2或者4个空格的悬挂缩进(与文件其他部分保持一致). 描述应该包括所需的类型和含义. 如果一个函数接受*foo(可变长度参数列表)或者**bar (任意关键字参数), 应该详细列出*foo和**bar.\n\nReturns: (或者 Yields: 用于生成器)\n\n    描述返回值的类型和语义. 如果函数返回None, 这一部分可以省略.\n\nRaises:\n\n    列出与接口有关的所有异常.\n\n```Python\ndef fetch_bigtable_rows(big_table, keys, other_silly_variable=None):\n    \"\"\"Fetches rows from a Bigtable.\n\n    Retrieves rows pertaining to the given keys from the Table instance\n    represented by big_table.  Silly things may happen if\n    other_silly_variable is not None.\n\n    Args:\n        big_table: An open Bigtable Table instance.\n        keys: A sequence of strings representing the key of each table row\n            to fetch.\n        other_silly_variable: Another optional variable, that has a much\n            longer name than the other args, and which does nothing.\n\n    Returns:\n        A dict mapping keys to the corresponding table row data\n        fetched. Each row is represented as a tuple of strings. For\n        example:\n\n        {'Serak': ('Rigel VII', 'Preparer'),\n         'Zim': ('Irk', 'Invader'),\n         'Lrrr': ('Omicron Persei 8', 'Emperor')}\n\n        If a key from the keys argument is missing from the dictionary,\n        then that row was not found in the table.\n\n    Raises:\n        IOError: An error occurred accessing the bigtable.Table object.\n    \"\"\"\n    pass\n```\n\n##### 类\n\n类应该在其定义下有一个用于描述该类的文档字符串. 如果你的类有公共属性(Attributes), 那么文档中应该有一个属性(Attributes)段. 并且应该遵守和函数参数相同的格式.\n\n```Python\nclass SampleClass(object):\n    \"\"\"Summary of class here.\n\n    Longer class information....\n    Longer class information....\n\n    Attributes:\n        likes_spam: A boolean indicating if we like SPAM or not.\n        eggs: An integer count of the eggs we have laid.\n    \"\"\"\n\n    def __init__(self, likes_spam=False):\n        \"\"\"Inits SampleClass with blah.\"\"\"\n        self.likes_spam = likes_spam\n        self.eggs = 0\n\n    def public_method(self):\n        \"\"\"Performs operation blah.\"\"\"\n```\n\n##### 块注释和行注释\n\n最需要写注释的是代码中那些技巧性的部分. 如果你在下次代码审查的时候必须解释一下, 那么你应该现在就给它写注释. 对于复杂的操作, 应该在其操作开始前写上若干行注释. 对于不是一目了然的代码, 应在其行尾添加注释.\n\n```Python\n# We use a weighted dictionary search to find out where i is in\n# the array.  We extrapolate position based on the largest num\n# in the array and the array size and then do binary search to\n# get the exact number.\n\nif i & (i-1) == 0:        # true iff i is a power of 2\n```\n\n为了提高可读性, 注释应该至少离开代码2个空格.\n\n另一方面, 绝不要描述代码. 假设阅读代码的人比你更懂Python, 他只是不知道你的代码要做什么.\n\n```Python\n# BAD COMMENT: Now go through the b array and make sure whenever i occurs\n# the next element is i+1\n```\n\n#### 类\n\n> Tip: 如果一个类不继承自其它类, 就显式的从object继承. 嵌套类也一样.\n\n```Python\nYes: class SampleClass(object):\n         pass\n\n\n     class OuterClass(object):\n\n         class InnerClass(object):\n             pass\n\n\n     class ChildClass(ParentClass):\n         \"\"\"Explicitly inherits from another class already.\"\"\"\n```\n\n```Python\nNo: class SampleClass:\n        pass\n\n\n    class OuterClass:\n\n        class InnerClass:\n            pass\n```\n\n继承自`object`是为了使属性(properties)正常工作, 并且这样可以保护你的代码, 使其不受[PEP-3000](https://www.python.org/dev/peps/pep-3000/) 的一个特殊的潜在不兼容性影响. 这样做也定义了一些特殊的方法, 这些方法实现了对象的默认语义, 包括`__new__`, `__init__`, `__delattr__`, `__getattribute__`, `__setattr__`, `__hash__`, `__repr__`, and `__str__` .\n\n#### 字符串\n\n> Tip: 即使参数都是字符串, 使用%操作符或者格式化方法格式化字符串. 不过也不能一概而论, 你需要在+和%之间好好判定.\n\n```Python\nYes: x = a + b\n     x = '%s, %s!' % (imperative, expletive)\n     x = '{}, {}!'.format(imperative, expletive)\n     x = 'name: %s; score: %d' % (name, n)\n     x = 'name: {}; score: {}'.format(name, n)\n```\n\n```Python\nNo: x = '%s%s' % (a, b)  # use + in this case\n    x = '{}{}'.format(a, b)  # use + in this case\n    x = imperative + ', ' + expletive + '!'\n    x = 'name: ' + name + '; score: ' + str(n)\n```\n\n避免在循环中用+和+=操作符来累加字符串. 由于字符串是不可变的, 这样做会创建不必要的临时对象, 并且导致二次方而不是线性的运行时间. 作为替代方案, 你可以将每个子串加入列表, 然后在循环结束后用`.join`连接列表. (也可以将每个子串写入一个`cStringIO.StringIO`缓存中.)\n\n```Python\nNo: employee_table = '<table>'\n    for last_name, first_name in employee_list:\n        employee_table += '<tr><td>%s, %s</td></tr>' % (last_name, first_name)\n    employee_table += '</table>'\n```\n\n在同一个文件中, 保持使用字符串引号的一致性. 使用单引号’或者双引号”之一用以引用字符串, 并在同一文件中沿用. 在字符串内可以使用另外一种引号, 以避免在字符串中使用. PyLint已经加入了这一检查.\n\n为多行字符串使用三重双引号”“”而非三重单引号’‘’. 当且仅当项目中使用单引号’来引用字符串时, 才可能会使用三重’‘’为非文档字符串的多行字符串来标识引用. 文档字符串必须使用三重双引号”“”. 不过要注意, 通常用隐式行连接更清晰, 因为多行字符串与程序其他部分的缩进方式不一致.\n\n```Python\nYes:\n    print (\"This is much nicer.\\n\"\n           \"Do it this way.\\n\")\nNo:\n      print \"\"\"This is pretty ugly.\n  Don't do this.\n  \"\"\"\n```\n\n#### 文件和sockets\n\n> Tip: 在文件和sockets结束时, 显式的关闭它.\n\n除文件外, sockets或其他类似文件的对象在没有必要的情况下打开, 会有许多副作用, 例如:\n\n1. 它们可能会消耗有限的系统资源, 如文件描述符. 如果这些资源在使用后没有及时归还系统, 那么用于处理这些对象的代码会将资源消耗殆尽.\n1. 持有文件将会阻止对于文件的其他诸如移动、删除之类的操作.\n1. 仅仅是从逻辑上关闭文件和sockets, 那么它们仍然可能会被其共享的程序在无意中进行读或者写操作. 只有当它们真正被关闭后, 对于它们尝试进行读或者写操作将会抛出异常, 并使得问题快速显现出来.\n\n而且, 幻想当文件对象析构时, 文件和sockets会自动关闭, 试图将文件对象的生命周期和文件的状态绑定在一起的想法, 都是不现实的. 因为有如下原因:\n\n1. 没有任何方法可以确保运行环境会真正的执行文件的析构. 不同的Python实现采用不同的内存管理技术, 比如延时垃圾处理机制. 延时垃圾处理机制可能会导致对象生命周期被任意无限制的延长.\n1. 对于文件意外的引用,会导致对于文件的持有时间超出预期(比如对于异常的跟踪, 包含有全局变量等).\n\n推荐使用`\"with\"`语句 以管理文件:\n\n```Python\nwith open(\"hello.txt\") as hello_file:\n    for line in hello_file:\n        print line\n```\n\n对于不支持使用`\"with\"`语句的类似文件的对象,使用 contextlib.closing():\n\n```Python\nimport contextlib\n\nwith contextlib.closing(urllib.urlopen(\"http://www.python.org/\")) as front_page:\n    for line in front_page:\n        print line\n```\n\n#### TODO注释\n\n> Tip: 为临时代码使用TODO注释, 它是一种短期解决方案. 不算完美, 但够好了.\n\nTODO注释应该在所有开头处包含`\"TODO\"`字符串, 紧跟着是用括号括起来的你的名字, email地址或其它标识符. 然后是一个可选的冒号. 接着必须有一行注释, 解释要做什么. 主要目的是为了有一个统一的TODO格式, 这样添加注释的人就可以搜索到(并可以按需提供更多细节). 写了TODO注释并不保证写的人会亲自解决问题. 当你写了一个TODO, 请注上你的名字.\n\n```Python\n# TODO(kl@gmail.com): Use a \"*\" here for string repetition.\n# TODO(Zeke) Change this to use relations.\n```\n\n如果你的TODO是”将来做某事”的形式, 那么请确保你包含了一个指定的日期(“2009年11月解决”)或者一个特定的事件(“等到所有的客户都可以处理XML请求就移除这些代码”).\n\n#### 导入格式\n\n> 每个导入应该独占一行\n\n```Python\nYes: import os\n     import sys\nNo:  import os, sys\n```\n\n导入总应该放在文件顶部, 位于模块注释和文档字符串之后, 模块全局变量和常量之前. 导入应该按照从最通用到最不通用的顺序分组:\n\n1. 标准库导入\n1. 第三方库导入\n1. 应用程序指定导入\n\n每种分组中, 应该根据每个模块的完整包路径按字典序排序, 忽略大小写.\n\n```Python\nimport foo\nfrom foo import bar\nfrom foo.bar import baz\nfrom foo.bar import Quux\nfrom Foob import ar\n```\n\n#### 访问控制\n\n> 在Python中, 对于琐碎又不太重要的访问函数, 你应该直接使用公有变量来取代它们, 这样可以避免额外的函数调用开销. 当添加更多功能时, 你可以用属性(property)来保持语法的一致性.\n\n另一方面, 如果访问更复杂, 或者变量的访问开销很显著, 那么你应该使用像 get_foo() 和 set_foo() 这样的函数调用. 如果之前的代码行为允许通过属性(property)访问 , 那么就不要将新的访问函数与属性绑定. 这样, 任何试图通过老方法访问变量的代码就没法运行, 使用者也就会意识到复杂性发生了变化.\n\n#### 命名\n\n> Tip: module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name.\n\n应该避免的名称\n\n- 单字符名称, 除了计数器和迭代器.\n- 包/模块名中的连字符(-)\n- 双下划线开头并结尾的名称(Python保留, 例如__init__)\n\n命名约定\n\n- 所谓”内部(Internal)”表示仅模块内可用, 或者, 在类内是保护或私有的.\n- 用单下划线(_)开头表示模块变量或函数是protected的(使用`from x import x`时不会包含).\n- 用双下划线(__)开头的实例变量或方法表示类内私有.\n- 将相关的类和顶级函数放在同一个模块里. 不像Java, 没必要限制一个类一个模块.\n- 对类名使用大写字母开头的单词(如CapWords, 即Pascal风格), 但是模块名应该用小写加下划线的方式(如lower_with_under.py). 尽管已经有很多现存的模块使用类似于CapWords.py这样的命名, 但现在已经不鼓励这样做, 因为如果模块名碰巧和类名一致, 这会让人困扰.\n\nPython之父Guido推荐的规范\n\n|   Type    |   Public  |   Internal    |\n|   :-:     |   :-:     |   :-:         |\n|Modules    |lower_with_under|_lower_with_under|\n|Packages   |lower_with_under||\n|Classes    |CapWords|_CapWords|\n|Exceptions |CapWords||\n|Functions  |lower_with_under()|_lower_with_under()|\n|Global/Class Constants|CAPS_WITH_UNDER|_CAPS_WITH_UNDER|\n|Global/Class Variables|lower_with_under|_lower_with_under|\n|Instance Variables|lower_with_under|_lower_with_under (protected) or __lower_with_under (private)|\n|Method Names|lower_with_under()|_lower_with_under() (protected) or __lower_with_under() (private)|\n|Function/Method Parameters|lower_with_under|\n|Local Variables|lower_with_under||\n\n#### Main\n\n> Tip: 即使是一个打算被用作脚本的文件, 也应该是可导入的. 并且简单的导入不应该导致这个脚本的主功能(main functionality)被执行, 这是一种副作用. 主功能应该放在一个main()函数中.\n\n在Python中, pydoc以及单元测试要求模块必须是可导入的. 你的代码应该在执行主程序前总是检查`if __name__ == '__main__'`, 这样当模块被导入时主程序就不会被执行.\n\n```Python\ndef main():\n      ...\n\nif __name__ == '__main__':\n    main()\n```\n\n所有的顶级代码在模块导入时都会被执行. 要小心不要去调用函数, 创建对象, 或者执行那些不应该在使用pydoc时执行的操作.\n\n## 总结\n\n请务必保持代码的一致性。\n\n如果你正在编辑代码, 花几分钟看一下周边代码, 然后决定风格. 如果它们在所有的算术操作符两边都使用空格, 那么你也应该这样做. 如果它们的注释都用标记包围起来, 那么你的注释也要这样.\n\n制定风格指南的目的在于让代码有规可循, 这样人们就可以专注于”你在说什么”, 而不是”你在怎么说”. 我们在这里给出的是全局的规范, 但是本地的规范同样重要. 如果你加到一个文件里的代码和原有代码大相径庭, 它会让读者不知所措. 避免这种情况.","source":"_posts/Google Python风格指南.md","raw":"---\nlayout: post\ntitle: Google Python 编程风格\nsubtitle: 养成良好的编程习惯和风格，让代码像诗一样优美\ndate: 2018-05-20\ncopyright: true\nphotos:\n  - images/tabs-or-spaces.png\ntags:\n  - Python\n  - 代码风格\ncategories:\n  - 编码技能\n---\n\n# Google Python Code Style\n\nPython相较于C++来说，语法和写法都比较简单，所以不像C++一样有那么多的规范，主要从*语言规范*和*风格规范*两个方面制定规范。\n\n<!-- more -->\n\n## 语言规范\n\n#### Lint\n\n> Tip: 对你的代码运行pylint\n\n- 定义\n\n    pylint是一个在Python源代码中查找bug的工具. 对于C和C++这样的不那么动态的语言, 这些bug通常由编译器来捕获. 由于Python的动态特性, 有些警告可能不对. 不过伪告警应该很少.\n\n- 优点\n\n    可以捕获容易忽视的错误, 例如输入错误, 使用未赋值的变量等.\n\n- 缺点\n\n    pylint不完美. 要利用其优势, 我们有时侯需要:\n    - 围绕着它来写代码\n    - 抑制其告警\n    - 改进它\n    - 忽略它.\n\n- 结论\n\n    确保对你的代码运行pylint.抑制不准确的警告,以便能够将其他警告暴露出来。\n\n    你可以通过设置一个行注释来抑制告警. 例如:\n\n    ```Python\n    dict = 'something awful'  # Bad Idea... pylint: disable=redefined-builtin\n    ```\n\n    pylint警告是以一个数字编号(如 `C0112` )和一个符号名(如 `empty-docstring` )来标识的. 在编写新代码或更新已有代码时对告警进行抑制, 推荐使用符号名来标识.\n\n    如果警告的符号名不够见名知意，那么请对其增加一个详细解释。\n\n    采用这种抑制方式的好处是我们可以轻松查找抑制并回顾它们.\n\n    你可以使用命令 `pylint --list-msgs` 来获取pylint告警列表. 你可以使用命令 `pylint --help-msg=C6409` , 以获取关于特定消息的更多信息.\n\n    相比较于之前使用的 `pylint: disable-msg` , 本文推荐使用 `pylint: disable` .\n\n    要抑制”参数未使用”告警, 你可以用”_”作为参数标识符, 或者在参数名前加”unused_”. 遇到不能改变参数名的情况, 你可以通过在函数开头”提到”它们来消除告警. 例如:\n\n    ```Python\n    def foo(a, unused_b, unused_c, d=None, e=None):\n        _ = d, e\n        return a\n    ```\n\n## 导入\n\n> Tip: 仅对包和模块使用导入\n\n- 定义\n\n    模块间共享代码的重用机制.\n\n- 优点\n\n    命名空间管理约定十分简单. 每个标识符的源都用一种一致的方式指示. x.Obj表示Obj对象定义在模块x中.\n\n- 缺点\n\n    模块名仍可能冲突. 有些模块名太长, 不太方便.\n\n- 结论\n\n    - **不要**使用`from x import *`\n    - 使用`import x`来导入包和模块.\n    - 使用`from x import y`, 其中x是包前缀, y是不带前缀的模块名.\n    - 使用`from x import y as z`, 如果两个要导入的模块都叫做y或者y太长了.\n    - 例如, 模块`sound.effects.echo`可以用如下方式导入:\n\n        ```Python\n        from sound.effects import echo\n        ...\n        echo.EchoFilter(input, output, delay=0.7, atten=4)\n        ```\n    导入时不要使用相对名称. 即使模块在同一个包中, 也要使用完整包名. 这能帮助你避免无意间导入一个包两次.\n\n## 包\n\n> Tip: 使用模块的全路径名来导入每个模块\n\n- 优点\n\n    避免模块名冲突. 查找包更容易.\n\n- 缺点\n\n    部署代码变难, 因为你必须复制包层次.\n\n- 结论\n\n    所有的新代码都应该用完整包名来导入每个模块.\n\n    应该像下面这样导入:\n\n    ```Python\n    # Reference in code with complete name.\n    import sound.effects.echo\n\n    # Reference in code with just module name (preferred).\n    from sound.effects import echo\n    ```\n\n#### 异常\n\n> Tip: 允许使用异常, 但必须小心\n\n- 定义\n\n    异常是一种跳出代码块的正常控制流来处理错误或者其它异常条件的方式.\n\n- 优点\n\n    正常操作代码的控制流不会和错误处理代码混在一起. 当某种条件发生时, 它也允许控制流跳过多个框架. 例如, 一步跳出N个嵌套的函数, 而不必继续执行错误的代码.\n\n- 缺点\n\n    可能会导致让人困惑的控制流. 调用库时容易错过错误情况.\n\n- 结论\n\n    异常必须遵守特定条件:\n\n    - 像这样触发异常:`raise MyException(\"Error message\")`或者`raise MyException`. 不要使用两个参数的形式(`raise MyException, \"Error message\"`)或者过时的字符串异常(`raise \"Error message\"`).\n    - 模块或包应该定义自己的特定域的异常基类, 这个基类应该从内建的Exception类继承. 模块的异常基类应该叫做”Error”.\n\n        ```Python\n        class Error(Exception):\n            pass\n        ```\n    - 永远不要使用`except:`语句来捕获所有异常, 也不要捕获`Exception`或者`StandardError`, 除非你打算重新触发该异常, 或者你已经在当前线程的最外层(记得还是要打印一条错误消息). 在异常这方面, Python非常宽容,`except:`真的会捕获包括Python语法错误在内的任何错误. 使用`except:`很容易隐藏真正的bug.\n    - 尽量减少`try/except`块中的代码量. `try`块的体积越大, 期望之外的异常就越容易被触发. 这种情况下, `try/except`块将隐藏真正的错误.\n    - 使用finally子句来执行那些无论try块中有没有异常都应该被执行的代码. 这对于清理资源常常很有用, 例如关闭文件.\n    - 当捕获异常时, 使用 as 而不要用逗号. 例如\n\n        ```Python\n        try:\n            raise Error\n        except Error as error:\n            pass\n        ```\n\n#### 全局变量\n\n> Tip: 避免全局变量\n\n- 定义\n\n    定义在模块级的变量.\n\n- 优点\n\n    偶尔有用.\n\n- 缺点\n\n    导入时可能改变模块行为, 因为导入模块时会对模块级变量赋值.\n\n- 结论\n\n    避免使用全局变量, 用类变量来代替. 但也有一些例外:\n\n    - 脚本的默认选项.\n    - 模块级常量. 例如:`PI = 3.14159`. 常量应该全大写, 用下划线连接.\n    - 有时候用全局变量来缓存值或者作为函数返回值很有用.\n    - 如果需要, 全局变量应该仅在模块内部可用, 并通过模块级的公共函数来访问.\n\n#### 嵌套/局部/内部类或函数\n\n> Tip: 鼓励使用嵌套/本地/内部类或函数\n\n- 定义\n\n    类可以定义在方法, 函数或者类中. 函数可以定义在方法或函数中. 封闭区间中定义的变量对嵌套函数是只读的.\n\n- 优点\n\n    允许定义仅用于有效范围的工具类和函数.\n\n- 缺点\n\n    嵌套类或局部类的实例不能序列化(pickled).\n\n- 结论\n\n    推荐使用.\n\n#### 列表推导(List Comprehensions)\n\n> Tip: 可以在简单情况下使用\n\n- 定义\n\n    列表推导(list comprehensions)与生成器表达式(generator expression)提供了一种简洁高效的方式来创建列表和迭代器, 而不必借助`map()`, `filter()`, 或者`lambda`.\n\n- 优点\n\n    简单的列表推导可以比其它的列表创建方法更加清晰简单. 生成器表达式可以十分高效, 因为它们避免了创建整个列表.\n\n- 缺点\n\n    复杂的列表推导或者生成器表达式可能难以阅读.\n\n- 结论\n\n    适用于简单情况. 每个部分应该单独置于一行: 映射表达式, for语句, 过滤器表达式. 禁止多重for语句或过滤器表达式. 复杂情况下还是使用循环.\n\n    ```Python\n    Yes:\n    result = []\n    for x in range(10):\n        for y in range(5):\n            if x * y > 10:\n                result.append((x, y))\n\n    for x in xrange(5):\n        for y in xrange(5):\n            if x != y:\n                for z in xrange(5):\n                    if y != z:\n                        yield (x, y, z)\n\n    return ((x, complicated_transform(x))\n            for x in long_generator_function(parameter)\n            if x is not None)\n\n    squares = [x * x for x in range(10)]\n\n    eat(jelly_bean for jelly_bean in jelly_beans\n        if jelly_bean.color == 'black')\n    ```\n\n    ```Python\n    No:\n    result = [(x, y) for x in range(10) for y in range(5) if x * y > 10]\n\n    return ((x, y, z)\n            for x in xrange(5)\n            for y in xrange(5)\n            if x != y\n            for z in xrange(5)\n            if y != z)\n    ```\n\n#### 默认迭代器和操作符\n\n> Tip: 如果类型支持, 就使用默认迭代器和操作符. 比如列表, 字典及文件等.\n\n- 定义\n\n    容器类型, 像字典和列表, 定义了默认的迭代器和关系测试操作符(`in`和`not in`)\n\n- 优点\n\n    默认操作符和迭代器简单高效, 它们直接表达了操作, 没有额外的方法调用. 使用默认操作符的函数是通用的. 它可以用于支持该操作的任何类型.\n\n- 缺点\n\n    你没法通过阅读方法名来区分对象的类型(例如, has_key()意味着字典). 不过这也是优点.\n\n- 结论\n\n    如果类型支持, 就使用默认迭代器和操作符, 例如列表, 字典和文件. 内建类型也定义了迭代器方法. 优先考虑这些方法, 而不是那些返回列表的方法. 当然，这样遍历容器时，你将不能修改容器.\n\n    ```Python\n    Yes:    for key in adict: ...\n            if key not in adict: ...\n            if obj in alist: ...\n            for line in afile: ...\n            for k, v in dict.iteritems(): ...\n    ```\n\n    ```Python\n    No:     for key in adict.keys(): ...\n            if not adict.has_key(key): ...\n            for line in afile.readlines(): ...\n    ```\n\n#### 生成器\n\n> Tip: 按需使用生成器.\n\n- 定义\n\n    所谓生成器函数, 就是每当它执行一次生成(yield)语句, 它就返回一个迭代器, 这个迭代器生成一个值. 生成值后, 生成器函数的运行状态将被挂起, 直到下一次生成.\n\n- 优点\n\n    简化代码, 因为每次调用时, 局部变量和控制流的状态都会被保存. 比起一次创建一系列值的函数, 生成器使用的内存更少.\n\n- 缺点\n\n    无\n\n- 结论\n\n    鼓励使用. 注意在生成器函数的文档字符串中使用`Yields:`而不是`Returns:`.\n\n#### Lambda函数\n\n> Tip: 适用于单行函数\n\n- 定义\n\n    与语句相反, lambda在一个表达式中定义匿名函数. 常用于为`map()`和`filter()`之类的高阶函数定义回调函数或者操作符.\n\n- 优点\n\n    方便\n\n- 缺点\n\n    比本地函数更难阅读和调试. 没有函数名意味着堆栈跟踪更难理解. 由于lambda函数通常只包含一个表达式, 因此其表达能力有限.\n\n- 结论\n\n    适用于单行函数. 如果代码超过60-80个字符, 最好还是定义成常规(嵌套)函数.\n\n    对于常见的操作符，例如乘法操作符，使用`operator`模块中的函数以代替`lambda`函数. 例如, 推荐使用 `operator.mul`, 而不是`lambda x, y: x * y`.\n\n#### 条件表达式\n\n> Tip: 适用于单行函数\n\n- 定义\n\n    条件表达式是对于if语句的一种更为简短的句法规则. 例如:`x = 1 if cond else 2`.\n\n- 优点\n\n    比if语句更加简短和方便.\n\n- 缺点\n\n    比if语句更加简短和方便.\n\n- 结论\n\n    适用于单行函数. 在其他情况下，推荐使用完整的if语句.\n\n#### 默认参数值\n\n> Tip: 适用于大部分情况.\n\n- 定义\n\n    你可以在函数参数列表的最后指定变量的值, 例如, def `foo(a, b = 0):`. 如果调用foo时只带一个参数, 则b被设为0. 如果带两个参数, 则b的值等于第二个参数.\n\n- 优点\n\n    你经常会碰到一些使用大量默认值的函数, 但偶尔(比较少见)你想要覆盖这些默认值. 默认参数值提供了一种简单的方法来完成这件事, 你不需要为这些罕见的例外定义大量函数. 同时, Python也不支持重载方法和函数, 默认参数是一种”仿造”重载行为的简单方式.\n\n- 缺点\n\n    默认参数只在模块加载时求值一次. 如果参数是列表或字典之类的可变类型, 这可能会导致问题. 如果函数修改了对象(例如向列表追加项), 默认值就被修改了.\n\n- 结论\n\n    鼓励使用, 不过有如下注意事项:\n\n    不要在函数或方法定义中使用可变对象作为默认值.\n\n    ```Python\n    Yes: def foo(a, b=None):\n            if b is None:\n                b = []\n    ```\n\n    ```Python\n    No:  def foo(a, b=[]):\n            ...\n    No:  def foo(a, b=time.time()):  # The time the module was loaded???\n            ...\n    No:  def foo(a, b=FLAGS.my_thing):  # sys.argv has not yet been parsed...\n            ...\n    ```\n\n#### 属性(properties)\n\n> Tip: 访问和设置数据成员时, 你通常会使用简单, 轻量级的访问和设置函数. 建议用属性（properties）来代替它们.\n\n- 定义\n\n    一种用于包装方法调用的方式. 当运算量不大, 它是获取和设置属性(attribute)的标准方式.\n\n- 优点\n\n    通过消除简单的属性(attribute)访问时显式的get和set方法调用, 可读性提高了. 允许懒惰的计算. 用Pythonic的方式来维护类的接口. 就性能而言, 当直接访问变量是合理的, 添加访问方法就显得琐碎而无意义. 使用属性(properties)可以绕过这个问题. 将来也可以在不破坏接口的情况下将访问方法加上.\n\n- 缺点\n\n    属性(properties)是在get和set方法声明后指定, 这需要使用者在接下来的代码中注意: set和get是用于属性(properties)的(除了用`@property`装饰器创建的只读属性). 必须继承自object类. 可能隐藏比如操作符重载之类的副作用. 继承时可能会让人困惑.\n\n- 结论\n\n    你通常习惯于使用访问或设置方法来访问或设置数据, 它们简单而轻量. 不过我们建议你在新的代码中使用属性. 只读属性应该用`@property`装饰器 来创建.\n\n    ```Python\n    class Student(object):\n\n    @property\n    def score(self):\n        return self._score\n\n    @score.setter\n    def score(self, value):\n        if not isinstance(value, int):\n            raise ValueError('score must be an integer!')\n        if value < 0 or value > 100:\n            raise ValueError('score must between 0 ~ 100!')\n        self._score = value\n    ```\n\n#### True/False的求值\n\n> Tip: 尽可能使用隐式false\n\n- 定义\n\n    Python在布尔上下文中会将某些值求值为false. 按简单的直觉来讲, 就是所有的”空”值都被认为是false. 因此`0`，`None`,`[]`,`{}`,`\"\"`都被认为是false.\n\n- 优点\n\n    使用Python布尔值的条件语句更易读也更不易犯错. 大部分情况下, 也更快.\n\n- 缺点\n\n    对C/C++开发人员来说, 可能看起来有点怪.\n\n- 结论\n\n    尽可能使用隐式的false, 例如: 使用`if foo:`而不是 `if foo != []:`. 不过还是有一些注意事项需要你铭记在心:\n\n    - 永远不要用==或者!=来比较单件, 比如`None`. 使用`is`或者`is not`.\n    - 注意: 当你写下`if x:`时, 你其实表示的是`if x is not None`. 例如: 当你要测试一个默认值是None的变量或参数是否被设为其它值. 这个值在布尔语义下可能是false!\n    - 永远不要用`==`将一个布尔量与false相比较. 使用`if not x:`代替. 如果你需要区分`false`和`None`, 你应该用像`if not x and x is not None:`这样的语句.\n    - 对于序列(字符串, 列表, 元组), 要注意空序列是false. 因此`if not seq:`或者`if seq:`比`if len(seq):`或`if not len(seq):`要更好.\n    - 处理整数时, 使用隐式false可能会得不偿失(即不小心将None当做0来处理). 你可以将一个已知是整型(且不是len()的返回结果)的值与0比较.\n\n        ```Python\n        Yes:    if not users:\n                    print 'no users'\n\n                if foo == 0:\n                    self.handle_zero()\n\n                if i % 10 == 0:\n                    self.handle_multiple_of_ten()\n        ```\n\n        ```Python\n        No:     if len(users) == 0:\n                    print 'no users'\n\n                if foo is not None and not foo:\n                    self.handle_zero()\n\n                if not i % 10:\n                    self.handle_multiple_of_ten()\n        ```\n    - 注意'0'(字符串)会被当做true.\n\n#### 过时的语言特性\n\n> Tip: 尽可能使用字符串方法取代字符串模块. 使用函数调用语法取代apply(). 使用列表推导, for循环取代filter(), map()以及reduce().\n\n- 定义\n\n    当前版本的Python提供了大家通常更喜欢的替代品.\n\n- 结论\n\n    我们不使用不支持这些特性的Python版本, 所以没理由不用新的方式.\n\n    ```Python\n    Yes:    words = foo.split(':')\n\n            [x[1] for x in my_list if x[2] == 5]\n\n            map(math.sqrt, data)    # Ok. No inlined lambda expression.\n\n            fn(*args, **kwargs)\n    ```\n\n    ```Python\n    No:     words = string.split(foo, ':')\n\n            map(lambda x: x[1], filter(lambda x: x[2] == 5, my_list))\n\n            apply(fn, args, kwargs)\n    ```\n\n#### 词法作用域(Lexical Scoping)\n\n> Tip: 推荐使用\n\n- 定义\n\n    嵌套的Python函数可以引用外层函数中定义的变量, 但是不能够对它们赋值. 变量绑定的解析是使用词法作用域, 也就是基于静态的程序文本. 对一个块中的某个名称的任何赋值都会导致Python将对该名称的全部引用当做局部变量, 甚至是赋值前的处理. 如果碰到global声明, 该名称就会被视作全局变量.\n\n    一个使用这个特性的例子:\n\n    ```Python\n    def get_adder():\n        \"\"\"Returns a function that adds numbers to a given number.\"\"\"\n        def adder(summand1, summand2):\n            return summand1 + summand2\n\n        return adder\n    ```\n\n- 优点\n\n    通常可以带来更加清晰, 优雅的代码. 尤其会让有经验的Lisp和Scheme(还有Haskell, ML等)程序员感到欣慰.\n\n- 缺点\n\n    可能导致让人迷惑的bug. 例如下面这个依据 PEP-0227 的例子:\n\n    ```Python\n    i = 4\n    def foo(x):\n        def bar():\n            print i,\n        # ...\n        # A bunch of code here\n        # ...\n        for i in x:  # Ah, i *is* local to Foo, so this is what Bar sees\n            print i,\n        bar()\n    ```\n\n    因此`foo([1, 2, 3])`会打印`1 2 3 3`, 不是`1 2 3 4`. x是一个列表, for循环其实是将x中的值依次赋给i.这样对i的赋值就隐式的发生了, 整个foo函数体中的i都会被当做局部变量, 包括bar()中的那个.\n\n- 结论\n\n    鼓励使用\n\n#### 函数与方法装饰器\n\n> Tip: 如果好处很显然, 就明智而谨慎的使用装饰器\n\n- 定义\n\n    用于函数及方法的装饰器 (也就是@标记). 最常见的装饰器是`@classmethod`和`@staticmethod`, 用于将常规函数转换成类方法或静态方法. 不过, 装饰器语法也允许用户自定义装饰器. 特别地, 对于某个函数`my_decorator`, 下面的两段代码是等效的:\n\n    ```Python\n    class C(object):\n        @my_decorator\n        def method(self):\n            # method body ...\n    ```\n\n    ```Python\n    class C(object):\n        def method(self):\n            # method body ...\n        method = my_decorator(method)\n    ```\n\n- 优点\n\n    优雅的在函数上指定一些转换. 该转换可能减少一些重复代码, 保持已有函数不变(enforce invariants), 等.\n\n- 缺点\n\n    装饰器可以在函数的参数或返回值上执行任何操作, 这可能导致让人惊异的隐藏行为. 而且, 装饰器在导入时执行. 从装饰器代码的失败中恢复更加不可能.\n\n- 结论\n\n    如果好处很显然, 就明智而谨慎的使用装饰器. 装饰器应该遵守和函数一样的导入和命名规则. 装饰器的python文档应该清晰的说明该函数是一个装饰器. 请为装饰器编写单元测试.\n\n    避免装饰器自身对外界的依赖(即不要依赖于文件, socket, 数据库连接等), 因为装饰器运行时这些资源可能不可用(由 pydoc 或其它工具导入). 应该保证一个用有效参数调用的装饰器在所有情况下都是成功的.\n\n#### 线程\n\n> Tip: 不要依赖内建类型的原子性.\n\n虽然Python的内建类型例如字典看上去拥有原子操作, 但是在某些情形下它们仍然不是原子的(即: 如果__hash__或__eq__被实现为Python方法)且它们的原子性是靠不住的. 你也不能指望原子变量赋值(因为这个反过来依赖字典).\n\n优先使用Queue模块的`Queue`数据类型作为线程间的数据通信方式. 另外, 使用threading模块及其锁原语(locking primitives). 了解条件变量的合适使用方式, 这样你就可以使用`threading.Condition`来取代低级别的锁了.\n\n#### 威力过大的特性\n\n> Tip: 避免使用这些特性\n\n- 定义\n\n    Python是一种异常灵活的语言, 它为你提供了很多花哨的特性, 诸如元类(metaclasses), 字节码访问, 任意编译(on-the-fly compilation), 动态继承, 对象父类重定义(object reparenting), 导入黑客(import hacks), 反射, 系统内修改(modification of system internals), 等等.\n\n- 优点\n\n    强大的语言特性, 能让你的代码更紧凑.\n\n- 缺点\n\n    使用这些很”酷”的特性十分诱人, 但不是绝对必要. 使用奇技淫巧的代码将更加难以阅读和调试. 开始可能还好(对原作者而言), 但当你回顾代码, 它们可能会比那些稍长一点但是很直接的代码更加难以理解.\n\n- 结论\n\n    在你的代码中避免这些特性.\n\n## 风格规范\n\n#### 分号\n\n> Tip: 不要在行尾加分号, 也不要用分号将两条命令放在同一行.\n\n#### 行长度\n\n> Tip: 每行不超过80个字符\n\n例外:\n\n    1. 长的导入模块语句\n    1. 注释里的URL\n\n不要使用反斜杠连接行.\n\nPython会将`圆括号`,`中括号`和`花括号`中的行隐式的连接起来 , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.\n\n```Python\nYes: foo_bar(self, width, height, color='black', design=None, x='foo',\n             emphasis=None, highlight=0)\n\n     if (width == 0 and height == 0 and\n         color == 'red' and emphasis == 'strong'):\n```\n\n如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接:\n\n```Python\nx = ('This will build a very long long '\n     'long long long long long long string')\n```\n\n在注释中，如果必要，将长的URL放在一行上。\n\n```Python\n Google 开源项目风格指南\nlatest\n\nSearch docs\nGoogle 开源项目风格指南 (中文版)\nC++ 风格指南 - 内容目录\nObjective-C 风格指南 - 内容目录\nPython 风格指南 - 内容目录\n扉页\n背景\nPython语言规范\nPython风格规范\n分号\n行长度\n括号\n缩进\n空行\n空格\nShebang\n注释\n类\n字符串\n文件和sockets\nTODO注释\n导入格式\n语句\n访问控制\n命名\nMain\n临别赠言\nShell 风格指南 - 内容目录\n\nLove Documentation? Write the Docs is a community full of people like you!\nSponsored · Ads served ethically\nGoogle 开源项目风格指南\nDocs » Python 风格指南 - 内容目录 » Python风格规范  Edit on GitHub\nPython风格规范\n分号\nTip\n\n不要在行尾加分号, 也不要用分号将两条命令放在同一行.\n\n行长度\nTip\n\n每行不超过80个字符\n\n例外:\n\n长的导入模块语句\n注释里的URL\n不要使用反斜杠连接行.\n\nPython会将 圆括号, 中括号和花括号中的行隐式的连接起来 , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.\n\n```Python\nYes: foo_bar(self, width, height, color='black', design=None, x='foo',\n             emphasis=None, highlight=0)\n\n     if (width == 0 and height == 0 and\n         color == 'red' and emphasis == 'strong'):\n```\n\n如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接:\n\n```Python\nx = ('This will build a very long long '\n     'long long long long long long string')\n```\n\n在注释中，如果必要，将长的URL放在一行上。\n\n```Python\nYes:  # See details at\n      # http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html\n```\n\n```Python\nNo:  # See details at\n     # http://www.example.com/us/developer/documentation/api/content/\\\n     # v2.0/csv_file_name_extension_full_specification.html\n```\n\n#### 括号\n\n> Tip: 宁缺毋滥的使用括号\n\n除非是用于实现行连接, 否则不要在返回语句或条件语句中使用括号. 不过在元组两边使用括号是可以的.\n\n```Python\nYes: if foo:\n         bar()\n     while x:\n         x = bar()\n     if x and y:\n         bar()\n     if not x:\n         bar()\n     return foo\n     for (x, y) in dict.items(): ...\n```\n\n```Python\nNo:  if (x):\n         bar()\n     if not(x):\n         bar()\n     return (foo)\n```\n\n#### 缩进\n\n> Tip: 用4个空格来缩进代码\n\n绝对不要用tab, 也不要tab和空格混用. 对于行连接的情况, 你应该要么垂直对齐换行的元素, 或者使用4空格的悬挂式缩进(这时第一行不应该有参数):\n\n```Python\nYes:   # Aligned with opening delimiter\n       foo = long_function_name(var_one, var_two,\n                                var_three, var_four)\n\n       # Aligned with opening delimiter in a dictionary\n       foo = {\n           long_dictionary_key: value1 +\n                                value2,\n           ...\n       }\n\n       # 4-space hanging indent; nothing on first line\n       foo = long_function_name(\n           var_one, var_two, var_three,\n           var_four)\n\n       # 4-space hanging indent in a dictionary\n       foo = {\n           long_dictionary_key:\n               long_dictionary_value,\n           ...\n       }\n```\n\n```Python\nNo:    # Stuff on first line forbidden\n      foo = long_function_name(var_one, var_two,\n          var_three, var_four)\n\n      # 2-space hanging indent forbidden\n      foo = long_function_name(\n        var_one, var_two, var_three,\n        var_four)\n\n      # No hanging indent in a dictionary\n      foo = {\n          long_dictionary_key:\n              long_dictionary_value,\n              ...\n      }\n```\n\n#### 空行\n\n> 顶级定义之间空两行, 方法定义之间空一行\n\n顶级定义之间空两行, 比如函数或者类定义. 方法定义, 类定义与第一个方法之间, 都应该空一行. 函数或方法中, 某些地方要是你觉得合适, 就空一行.\n\n#### 空格\n\n> 按照标准的排版规范来使用标点两边的空格\n\n括号内不要有空格.\n\n```Python\nYes: spam(ham[1], {eggs: 2}, [])\nNo:  spam( ham[ 1 ], { eggs: 2 }, [ ] )\n```\n\n不要在逗号, 分号, 冒号前面加空格, 但应该在它们后面加(除了在行尾).\n\n```Python\nYes: if x == 4:\n         print x, y\n     x, y = y, x\nNo:  if x == 4 :\n         print x , y\n     x , y = y , x\n```\n\n参数列表, 索引或切片的左括号前不应加空格.\n\n```Python\nYes: spam(1)\nno: spam (1)\n\nYes: dict['key'] = list[index]\nNo:  dict ['key'] = list [index]\n```\n\n在二元操作符两边都加上一个空格, 比如赋值(=), 比较(==, <, >, !=, <>, <=, >=, in, not in, is, is not), 布尔(and, or, not). 至于算术操作符两边的空格该如何使用, 需要你自己好好判断. 不过两侧务必要保持一致.\n\n```Python\nYes: x == 1\nNo:  x<1\n```\n\n当’=’用于指示关键字参数或默认参数值时, 不要在其两侧使用空格.\n\n```Python\nYes: def complex(real, imag=0.0): return magic(r=real, i=imag)\nNo:  def complex(real, imag = 0.0): return magic(r = real, i = imag)\n```\n\n不要用空格来垂直对齐多行间的标记, 因为这会成为维护的负担(适用于:, #, =等):\n\n```Python\nYes:\n     foo = 1000  # comment\n     long_name = 2  # comment that should not be aligned\n\n     dictionary = {\n         \"foo\": 1,\n         \"long_name\": 2,\n         }\n```\n\n```Python\nNo:\n     foo       = 1000  # comment\n     long_name = 2     # comment that should not be aligned\n\n     dictionary = {\n         \"foo\"      : 1,\n         \"long_name\": 2,\n         }\n```\n\n#### Shebang\n\n> 大部分.py文件不必以#!作为文件的开始. 根据 PEP-394 , 程序的main文件应该以 #!/usr/bin/python2或者 #!/usr/bin/python3开始.\n\n在计算机科学中, Shebang (也称为Hashbang)是一个由井号和叹号构成的字符串行(#!), 其出现在文本文件的第一行的前两个字符. 在文件中存在Shebang的情况下, 类Unix操作系统的程序载入器会分析Shebang后的内容, 将这些内容作为解释器指令, 并调用该指令, 并将载有Shebang的文件路径作为该解释器的参数. 例如, 以指令#!/bin/sh开头的文件在执行时会实际调用/bin/sh程序.\n\n\\#!先用于帮助内核找到Python解释器, 但是在导入模块时, 将会被忽略. 因此只有被直接执行的文件中才有必要加入\\#!.\n\n#### 注释\n\n> 确保对模块, 函数, 方法和行内注释使用正确的风格\n\n##### 文档字符串\n\nPython有一种独一无二的的注释方式: 使用文档字符串. 文档字符串是包, 模块, 类或函数里的第一个语句. 这些字符串可以通过对象的`__doc__`成员被自动提取, 并且被`pydoc`所用. (你可以在你的模块上运行pydoc试一把, 看看它长什么样). 我们对文档字符串的惯例是使用三重双引号`\"\"\"`. 一个文档字符串应该这样组织: 首先是一行以句号, 问号或惊叹号结尾的概述(或者该文档字符串单纯只有一行). 接着是一个空行. 接着是文档字符串剩下的部分, 它应该与文档字符串的第一行的第一个引号对齐. 下面有更多文档字符串的格式化规范.\n\n##### 模块\n\n每个文件应该包含一个许可样板. 根据项目使用的许可(例如, Apache 2.0, BSD, LGPL, GPL), 选择合适的样板.\n\n##### 函数和方法\n\n下文所指的函数,包括函数, 方法, 以及生成器.\n\n一个函数必须要有文档字符串, 除非它满足以下条件:\n\n- 外部不可见\n- 非常短小\n- 简单明了\n\n文档字符串应该包含函数做什么, 以及输入和输出的详细描述. 通常, 不应该描述”怎么做”, 除非是一些复杂的算法. 文档字符串应该提供足够的信息, 当别人编写代码调用该函数时, 他不需要看一行代码, 只要看文档字符串就可以了. 对于复杂的代码, 在代码旁边加注释会比使用文档字符串更有意义.\n\nArgs:\n\n    列出每个参数的名字, 并在名字后使用一个冒号和一个空格, 分隔对该参数的描述.如果描述太长超过了单行80字符,使用2或者4个空格的悬挂缩进(与文件其他部分保持一致). 描述应该包括所需的类型和含义. 如果一个函数接受*foo(可变长度参数列表)或者**bar (任意关键字参数), 应该详细列出*foo和**bar.\n\nReturns: (或者 Yields: 用于生成器)\n\n    描述返回值的类型和语义. 如果函数返回None, 这一部分可以省略.\n\nRaises:\n\n    列出与接口有关的所有异常.\n\n```Python\ndef fetch_bigtable_rows(big_table, keys, other_silly_variable=None):\n    \"\"\"Fetches rows from a Bigtable.\n\n    Retrieves rows pertaining to the given keys from the Table instance\n    represented by big_table.  Silly things may happen if\n    other_silly_variable is not None.\n\n    Args:\n        big_table: An open Bigtable Table instance.\n        keys: A sequence of strings representing the key of each table row\n            to fetch.\n        other_silly_variable: Another optional variable, that has a much\n            longer name than the other args, and which does nothing.\n\n    Returns:\n        A dict mapping keys to the corresponding table row data\n        fetched. Each row is represented as a tuple of strings. For\n        example:\n\n        {'Serak': ('Rigel VII', 'Preparer'),\n         'Zim': ('Irk', 'Invader'),\n         'Lrrr': ('Omicron Persei 8', 'Emperor')}\n\n        If a key from the keys argument is missing from the dictionary,\n        then that row was not found in the table.\n\n    Raises:\n        IOError: An error occurred accessing the bigtable.Table object.\n    \"\"\"\n    pass\n```\n\n##### 类\n\n类应该在其定义下有一个用于描述该类的文档字符串. 如果你的类有公共属性(Attributes), 那么文档中应该有一个属性(Attributes)段. 并且应该遵守和函数参数相同的格式.\n\n```Python\nclass SampleClass(object):\n    \"\"\"Summary of class here.\n\n    Longer class information....\n    Longer class information....\n\n    Attributes:\n        likes_spam: A boolean indicating if we like SPAM or not.\n        eggs: An integer count of the eggs we have laid.\n    \"\"\"\n\n    def __init__(self, likes_spam=False):\n        \"\"\"Inits SampleClass with blah.\"\"\"\n        self.likes_spam = likes_spam\n        self.eggs = 0\n\n    def public_method(self):\n        \"\"\"Performs operation blah.\"\"\"\n```\n\n##### 块注释和行注释\n\n最需要写注释的是代码中那些技巧性的部分. 如果你在下次代码审查的时候必须解释一下, 那么你应该现在就给它写注释. 对于复杂的操作, 应该在其操作开始前写上若干行注释. 对于不是一目了然的代码, 应在其行尾添加注释.\n\n```Python\n# We use a weighted dictionary search to find out where i is in\n# the array.  We extrapolate position based on the largest num\n# in the array and the array size and then do binary search to\n# get the exact number.\n\nif i & (i-1) == 0:        # true iff i is a power of 2\n```\n\n为了提高可读性, 注释应该至少离开代码2个空格.\n\n另一方面, 绝不要描述代码. 假设阅读代码的人比你更懂Python, 他只是不知道你的代码要做什么.\n\n```Python\n# BAD COMMENT: Now go through the b array and make sure whenever i occurs\n# the next element is i+1\n```\n\n#### 类\n\n> Tip: 如果一个类不继承自其它类, 就显式的从object继承. 嵌套类也一样.\n\n```Python\nYes: class SampleClass(object):\n         pass\n\n\n     class OuterClass(object):\n\n         class InnerClass(object):\n             pass\n\n\n     class ChildClass(ParentClass):\n         \"\"\"Explicitly inherits from another class already.\"\"\"\n```\n\n```Python\nNo: class SampleClass:\n        pass\n\n\n    class OuterClass:\n\n        class InnerClass:\n            pass\n```\n\n继承自`object`是为了使属性(properties)正常工作, 并且这样可以保护你的代码, 使其不受[PEP-3000](https://www.python.org/dev/peps/pep-3000/) 的一个特殊的潜在不兼容性影响. 这样做也定义了一些特殊的方法, 这些方法实现了对象的默认语义, 包括`__new__`, `__init__`, `__delattr__`, `__getattribute__`, `__setattr__`, `__hash__`, `__repr__`, and `__str__` .\n\n#### 字符串\n\n> Tip: 即使参数都是字符串, 使用%操作符或者格式化方法格式化字符串. 不过也不能一概而论, 你需要在+和%之间好好判定.\n\n```Python\nYes: x = a + b\n     x = '%s, %s!' % (imperative, expletive)\n     x = '{}, {}!'.format(imperative, expletive)\n     x = 'name: %s; score: %d' % (name, n)\n     x = 'name: {}; score: {}'.format(name, n)\n```\n\n```Python\nNo: x = '%s%s' % (a, b)  # use + in this case\n    x = '{}{}'.format(a, b)  # use + in this case\n    x = imperative + ', ' + expletive + '!'\n    x = 'name: ' + name + '; score: ' + str(n)\n```\n\n避免在循环中用+和+=操作符来累加字符串. 由于字符串是不可变的, 这样做会创建不必要的临时对象, 并且导致二次方而不是线性的运行时间. 作为替代方案, 你可以将每个子串加入列表, 然后在循环结束后用`.join`连接列表. (也可以将每个子串写入一个`cStringIO.StringIO`缓存中.)\n\n```Python\nNo: employee_table = '<table>'\n    for last_name, first_name in employee_list:\n        employee_table += '<tr><td>%s, %s</td></tr>' % (last_name, first_name)\n    employee_table += '</table>'\n```\n\n在同一个文件中, 保持使用字符串引号的一致性. 使用单引号’或者双引号”之一用以引用字符串, 并在同一文件中沿用. 在字符串内可以使用另外一种引号, 以避免在字符串中使用. PyLint已经加入了这一检查.\n\n为多行字符串使用三重双引号”“”而非三重单引号’‘’. 当且仅当项目中使用单引号’来引用字符串时, 才可能会使用三重’‘’为非文档字符串的多行字符串来标识引用. 文档字符串必须使用三重双引号”“”. 不过要注意, 通常用隐式行连接更清晰, 因为多行字符串与程序其他部分的缩进方式不一致.\n\n```Python\nYes:\n    print (\"This is much nicer.\\n\"\n           \"Do it this way.\\n\")\nNo:\n      print \"\"\"This is pretty ugly.\n  Don't do this.\n  \"\"\"\n```\n\n#### 文件和sockets\n\n> Tip: 在文件和sockets结束时, 显式的关闭它.\n\n除文件外, sockets或其他类似文件的对象在没有必要的情况下打开, 会有许多副作用, 例如:\n\n1. 它们可能会消耗有限的系统资源, 如文件描述符. 如果这些资源在使用后没有及时归还系统, 那么用于处理这些对象的代码会将资源消耗殆尽.\n1. 持有文件将会阻止对于文件的其他诸如移动、删除之类的操作.\n1. 仅仅是从逻辑上关闭文件和sockets, 那么它们仍然可能会被其共享的程序在无意中进行读或者写操作. 只有当它们真正被关闭后, 对于它们尝试进行读或者写操作将会抛出异常, 并使得问题快速显现出来.\n\n而且, 幻想当文件对象析构时, 文件和sockets会自动关闭, 试图将文件对象的生命周期和文件的状态绑定在一起的想法, 都是不现实的. 因为有如下原因:\n\n1. 没有任何方法可以确保运行环境会真正的执行文件的析构. 不同的Python实现采用不同的内存管理技术, 比如延时垃圾处理机制. 延时垃圾处理机制可能会导致对象生命周期被任意无限制的延长.\n1. 对于文件意外的引用,会导致对于文件的持有时间超出预期(比如对于异常的跟踪, 包含有全局变量等).\n\n推荐使用`\"with\"`语句 以管理文件:\n\n```Python\nwith open(\"hello.txt\") as hello_file:\n    for line in hello_file:\n        print line\n```\n\n对于不支持使用`\"with\"`语句的类似文件的对象,使用 contextlib.closing():\n\n```Python\nimport contextlib\n\nwith contextlib.closing(urllib.urlopen(\"http://www.python.org/\")) as front_page:\n    for line in front_page:\n        print line\n```\n\n#### TODO注释\n\n> Tip: 为临时代码使用TODO注释, 它是一种短期解决方案. 不算完美, 但够好了.\n\nTODO注释应该在所有开头处包含`\"TODO\"`字符串, 紧跟着是用括号括起来的你的名字, email地址或其它标识符. 然后是一个可选的冒号. 接着必须有一行注释, 解释要做什么. 主要目的是为了有一个统一的TODO格式, 这样添加注释的人就可以搜索到(并可以按需提供更多细节). 写了TODO注释并不保证写的人会亲自解决问题. 当你写了一个TODO, 请注上你的名字.\n\n```Python\n# TODO(kl@gmail.com): Use a \"*\" here for string repetition.\n# TODO(Zeke) Change this to use relations.\n```\n\n如果你的TODO是”将来做某事”的形式, 那么请确保你包含了一个指定的日期(“2009年11月解决”)或者一个特定的事件(“等到所有的客户都可以处理XML请求就移除这些代码”).\n\n#### 导入格式\n\n> 每个导入应该独占一行\n\n```Python\nYes: import os\n     import sys\nNo:  import os, sys\n```\n\n导入总应该放在文件顶部, 位于模块注释和文档字符串之后, 模块全局变量和常量之前. 导入应该按照从最通用到最不通用的顺序分组:\n\n1. 标准库导入\n1. 第三方库导入\n1. 应用程序指定导入\n\n每种分组中, 应该根据每个模块的完整包路径按字典序排序, 忽略大小写.\n\n```Python\nimport foo\nfrom foo import bar\nfrom foo.bar import baz\nfrom foo.bar import Quux\nfrom Foob import ar\n```\n\n#### 访问控制\n\n> 在Python中, 对于琐碎又不太重要的访问函数, 你应该直接使用公有变量来取代它们, 这样可以避免额外的函数调用开销. 当添加更多功能时, 你可以用属性(property)来保持语法的一致性.\n\n另一方面, 如果访问更复杂, 或者变量的访问开销很显著, 那么你应该使用像 get_foo() 和 set_foo() 这样的函数调用. 如果之前的代码行为允许通过属性(property)访问 , 那么就不要将新的访问函数与属性绑定. 这样, 任何试图通过老方法访问变量的代码就没法运行, 使用者也就会意识到复杂性发生了变化.\n\n#### 命名\n\n> Tip: module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name.\n\n应该避免的名称\n\n- 单字符名称, 除了计数器和迭代器.\n- 包/模块名中的连字符(-)\n- 双下划线开头并结尾的名称(Python保留, 例如__init__)\n\n命名约定\n\n- 所谓”内部(Internal)”表示仅模块内可用, 或者, 在类内是保护或私有的.\n- 用单下划线(_)开头表示模块变量或函数是protected的(使用`from x import x`时不会包含).\n- 用双下划线(__)开头的实例变量或方法表示类内私有.\n- 将相关的类和顶级函数放在同一个模块里. 不像Java, 没必要限制一个类一个模块.\n- 对类名使用大写字母开头的单词(如CapWords, 即Pascal风格), 但是模块名应该用小写加下划线的方式(如lower_with_under.py). 尽管已经有很多现存的模块使用类似于CapWords.py这样的命名, 但现在已经不鼓励这样做, 因为如果模块名碰巧和类名一致, 这会让人困扰.\n\nPython之父Guido推荐的规范\n\n|   Type    |   Public  |   Internal    |\n|   :-:     |   :-:     |   :-:         |\n|Modules    |lower_with_under|_lower_with_under|\n|Packages   |lower_with_under||\n|Classes    |CapWords|_CapWords|\n|Exceptions |CapWords||\n|Functions  |lower_with_under()|_lower_with_under()|\n|Global/Class Constants|CAPS_WITH_UNDER|_CAPS_WITH_UNDER|\n|Global/Class Variables|lower_with_under|_lower_with_under|\n|Instance Variables|lower_with_under|_lower_with_under (protected) or __lower_with_under (private)|\n|Method Names|lower_with_under()|_lower_with_under() (protected) or __lower_with_under() (private)|\n|Function/Method Parameters|lower_with_under|\n|Local Variables|lower_with_under||\n\n#### Main\n\n> Tip: 即使是一个打算被用作脚本的文件, 也应该是可导入的. 并且简单的导入不应该导致这个脚本的主功能(main functionality)被执行, 这是一种副作用. 主功能应该放在一个main()函数中.\n\n在Python中, pydoc以及单元测试要求模块必须是可导入的. 你的代码应该在执行主程序前总是检查`if __name__ == '__main__'`, 这样当模块被导入时主程序就不会被执行.\n\n```Python\ndef main():\n      ...\n\nif __name__ == '__main__':\n    main()\n```\n\n所有的顶级代码在模块导入时都会被执行. 要小心不要去调用函数, 创建对象, 或者执行那些不应该在使用pydoc时执行的操作.\n\n## 总结\n\n请务必保持代码的一致性。\n\n如果你正在编辑代码, 花几分钟看一下周边代码, 然后决定风格. 如果它们在所有的算术操作符两边都使用空格, 那么你也应该这样做. 如果它们的注释都用标记包围起来, 那么你的注释也要这样.\n\n制定风格指南的目的在于让代码有规可循, 这样人们就可以专注于”你在说什么”, 而不是”你在怎么说”. 我们在这里给出的是全局的规范, 但是本地的规范同样重要. 如果你加到一个文件里的代码和原有代码大相径庭, 它会让读者不知所措. 避免这种情况.","slug":"Google Python风格指南","published":1,"updated":"2018-09-10T13:18:12.236Z","comments":1,"link":"","_id":"cjlwefulz000xqbrtit2vrw86","content":"<h1 id=\"Google-Python-Code-Style\"><a href=\"#Google-Python-Code-Style\" class=\"headerlink\" title=\"Google Python Code Style\"></a>Google Python Code Style</h1><p>Python相较于C++来说，语法和写法都比较简单，所以不像C++一样有那么多的规范，主要从<em>语言规范</em>和<em>风格规范</em>两个方面制定规范。</p>\n<a id=\"more\"></a>\n<h2 id=\"语言规范\"><a href=\"#语言规范\" class=\"headerlink\" title=\"语言规范\"></a>语言规范</h2><h4 id=\"Lint\"><a href=\"#Lint\" class=\"headerlink\" title=\"Lint\"></a>Lint</h4><blockquote>\n<p>Tip: 对你的代码运行pylint</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  pylint是一个在Python源代码中查找bug的工具. 对于C和C++这样的不那么动态的语言, 这些bug通常由编译器来捕获. 由于Python的动态特性, 有些警告可能不对. 不过伪告警应该很少.</p>\n</li>\n<li><p>优点</p>\n<p>  可以捕获容易忽视的错误, 例如输入错误, 使用未赋值的变量等.</p>\n</li>\n<li><p>缺点</p>\n<p>  pylint不完美. 要利用其优势, 我们有时侯需要:</p>\n<ul>\n<li>围绕着它来写代码</li>\n<li>抑制其告警</li>\n<li>改进它</li>\n<li>忽略它.</li>\n</ul>\n</li>\n<li><p>结论</p>\n<p>  确保对你的代码运行pylint.抑制不准确的警告,以便能够将其他警告暴露出来。</p>\n<p>  你可以通过设置一个行注释来抑制告警. 例如:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict = <span class=\"string\">'something awful'</span>  <span class=\"comment\"># Bad Idea... pylint: disable=redefined-builtin</span></span><br></pre></td></tr></table></figure>\n<p>  pylint警告是以一个数字编号(如 <code>C0112</code> )和一个符号名(如 <code>empty-docstring</code> )来标识的. 在编写新代码或更新已有代码时对告警进行抑制, 推荐使用符号名来标识.</p>\n<p>  如果警告的符号名不够见名知意，那么请对其增加一个详细解释。</p>\n<p>  采用这种抑制方式的好处是我们可以轻松查找抑制并回顾它们.</p>\n<p>  你可以使用命令 <code>pylint --list-msgs</code> 来获取pylint告警列表. 你可以使用命令 <code>pylint --help-msg=C6409</code> , 以获取关于特定消息的更多信息.</p>\n<p>  相比较于之前使用的 <code>pylint: disable-msg</code> , 本文推荐使用 <code>pylint: disable</code> .</p>\n<p>  要抑制”参数未使用”告警, 你可以用”<em>”作为参数标识符, 或者在参数名前加”unused</em>”. 遇到不能改变参数名的情况, 你可以通过在函数开头”提到”它们来消除告警. 例如:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(a, unused_b, unused_c, d=None, e=None)</span>:</span></span><br><span class=\"line\">    _ = d, e</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><blockquote>\n<p>Tip: 仅对包和模块使用导入</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  模块间共享代码的重用机制.</p>\n</li>\n<li><p>优点</p>\n<p>  命名空间管理约定十分简单. 每个标识符的源都用一种一致的方式指示. x.Obj表示Obj对象定义在模块x中.</p>\n</li>\n<li><p>缺点</p>\n<p>  模块名仍可能冲突. 有些模块名太长, 不太方便.</p>\n</li>\n<li><p>结论</p>\n<ul>\n<li><strong>不要</strong>使用<code>from x import *</code></li>\n<li>使用<code>import x</code>来导入包和模块.</li>\n<li>使用<code>from x import y</code>, 其中x是包前缀, y是不带前缀的模块名.</li>\n<li>使用<code>from x import y as z</code>, 如果两个要导入的模块都叫做y或者y太长了.</li>\n<li><p>例如, 模块<code>sound.effects.echo</code>可以用如下方式导入:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sound.effects <span class=\"keyword\">import</span> echo</span><br><span class=\"line\">...</span><br><span class=\"line\">echo.EchoFilter(input, output, delay=<span class=\"number\">0.7</span>, atten=<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>导入时不要使用相对名称. 即使模块在同一个包中, 也要使用完整包名. 这能帮助你避免无意间导入一个包两次.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h2><blockquote>\n<p>Tip: 使用模块的全路径名来导入每个模块</p>\n</blockquote>\n<ul>\n<li><p>优点</p>\n<p>  避免模块名冲突. 查找包更容易.</p>\n</li>\n<li><p>缺点</p>\n<p>  部署代码变难, 因为你必须复制包层次.</p>\n</li>\n<li><p>结论</p>\n<p>  所有的新代码都应该用完整包名来导入每个模块.</p>\n<p>  应该像下面这样导入:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Reference in code with complete name.</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sound.effects.echo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Reference in code with just module name (preferred).</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sound.effects <span class=\"keyword\">import</span> echo</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h4><blockquote>\n<p>Tip: 允许使用异常, 但必须小心</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  异常是一种跳出代码块的正常控制流来处理错误或者其它异常条件的方式.</p>\n</li>\n<li><p>优点</p>\n<p>  正常操作代码的控制流不会和错误处理代码混在一起. 当某种条件发生时, 它也允许控制流跳过多个框架. 例如, 一步跳出N个嵌套的函数, 而不必继续执行错误的代码.</p>\n</li>\n<li><p>缺点</p>\n<p>  可能会导致让人困惑的控制流. 调用库时容易错过错误情况.</p>\n</li>\n<li><p>结论</p>\n<p>  异常必须遵守特定条件:</p>\n<ul>\n<li>像这样触发异常:<code>raise MyException(&quot;Error message&quot;)</code>或者<code>raise MyException</code>. 不要使用两个参数的形式(<code>raise MyException, &quot;Error message&quot;</code>)或者过时的字符串异常(<code>raise &quot;Error message&quot;</code>).</li>\n<li><p>模块或包应该定义自己的特定域的异常基类, 这个基类应该从内建的Exception类继承. 模块的异常基类应该叫做”Error”.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Error</span><span class=\"params\">(Exception)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>永远不要使用<code>except:</code>语句来捕获所有异常, 也不要捕获<code>Exception</code>或者<code>StandardError</code>, 除非你打算重新触发该异常, 或者你已经在当前线程的最外层(记得还是要打印一条错误消息). 在异常这方面, Python非常宽容,<code>except:</code>真的会捕获包括Python语法错误在内的任何错误. 使用<code>except:</code>很容易隐藏真正的bug.</p>\n</li>\n<li>尽量减少<code>try/except</code>块中的代码量. <code>try</code>块的体积越大, 期望之外的异常就越容易被触发. 这种情况下, <code>try/except</code>块将隐藏真正的错误.</li>\n<li>使用finally子句来执行那些无论try块中有没有异常都应该被执行的代码. 这对于清理资源常常很有用, 例如关闭文件.</li>\n<li><p>当捕获异常时, 使用 as 而不要用逗号. 例如</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> Error</span><br><span class=\"line\"><span class=\"keyword\">except</span> Error <span class=\"keyword\">as</span> error:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h4><blockquote>\n<p>Tip: 避免全局变量</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  定义在模块级的变量.</p>\n</li>\n<li><p>优点</p>\n<p>  偶尔有用.</p>\n</li>\n<li><p>缺点</p>\n<p>  导入时可能改变模块行为, 因为导入模块时会对模块级变量赋值.</p>\n</li>\n<li><p>结论</p>\n<p>  避免使用全局变量, 用类变量来代替. 但也有一些例外:</p>\n<ul>\n<li>脚本的默认选项.</li>\n<li>模块级常量. 例如:<code>PI = 3.14159</code>. 常量应该全大写, 用下划线连接.</li>\n<li>有时候用全局变量来缓存值或者作为函数返回值很有用.</li>\n<li>如果需要, 全局变量应该仅在模块内部可用, 并通过模块级的公共函数来访问.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"嵌套-局部-内部类或函数\"><a href=\"#嵌套-局部-内部类或函数\" class=\"headerlink\" title=\"嵌套/局部/内部类或函数\"></a>嵌套/局部/内部类或函数</h4><blockquote>\n<p>Tip: 鼓励使用嵌套/本地/内部类或函数</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  类可以定义在方法, 函数或者类中. 函数可以定义在方法或函数中. 封闭区间中定义的变量对嵌套函数是只读的.</p>\n</li>\n<li><p>优点</p>\n<p>  允许定义仅用于有效范围的工具类和函数.</p>\n</li>\n<li><p>缺点</p>\n<p>  嵌套类或局部类的实例不能序列化(pickled).</p>\n</li>\n<li><p>结论</p>\n<p>  推荐使用.</p>\n</li>\n</ul>\n<h4 id=\"列表推导-List-Comprehensions\"><a href=\"#列表推导-List-Comprehensions\" class=\"headerlink\" title=\"列表推导(List Comprehensions)\"></a>列表推导(List Comprehensions)</h4><blockquote>\n<p>Tip: 可以在简单情况下使用</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  列表推导(list comprehensions)与生成器表达式(generator expression)提供了一种简洁高效的方式来创建列表和迭代器, 而不必借助<code>map()</code>, <code>filter()</code>, 或者<code>lambda</code>.</p>\n</li>\n<li><p>优点</p>\n<p>  简单的列表推导可以比其它的列表创建方法更加清晰简单. 生成器表达式可以十分高效, 因为它们避免了创建整个列表.</p>\n</li>\n<li><p>缺点</p>\n<p>  复杂的列表推导或者生成器表达式可能难以阅读.</p>\n</li>\n<li><p>结论</p>\n<p>  适用于简单情况. 每个部分应该单独置于一行: 映射表达式, for语句, 过滤器表达式. 禁止多重for语句或过滤器表达式. 复杂情况下还是使用循环.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:</span><br><span class=\"line\">result = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x * y &gt; <span class=\"number\">10</span>:</span><br><span class=\"line\">            result.append((x, y))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> xrange(<span class=\"number\">5</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> xrange(<span class=\"number\">5</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x != y:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> z <span class=\"keyword\">in</span> xrange(<span class=\"number\">5</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> y != z:</span><br><span class=\"line\">                    <span class=\"keyword\">yield</span> (x, y, z)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> ((x, complicated_transform(x))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> long_generator_function(parameter)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">squares = [x * x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">eat(jelly_bean <span class=\"keyword\">for</span> jelly_bean <span class=\"keyword\">in</span> jelly_beans</span><br><span class=\"line\">    <span class=\"keyword\">if</span> jelly_bean.color == <span class=\"string\">'black'</span>)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:</span><br><span class=\"line\">result = [(x, y) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>) <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>) <span class=\"keyword\">if</span> x * y &gt; <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> ((x, y, z)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> xrange(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> xrange(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x != y</span><br><span class=\"line\">        <span class=\"keyword\">for</span> z <span class=\"keyword\">in</span> xrange(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> y != z)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"默认迭代器和操作符\"><a href=\"#默认迭代器和操作符\" class=\"headerlink\" title=\"默认迭代器和操作符\"></a>默认迭代器和操作符</h4><blockquote>\n<p>Tip: 如果类型支持, 就使用默认迭代器和操作符. 比如列表, 字典及文件等.</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  容器类型, 像字典和列表, 定义了默认的迭代器和关系测试操作符(<code>in</code>和<code>not in</code>)</p>\n</li>\n<li><p>优点</p>\n<p>  默认操作符和迭代器简单高效, 它们直接表达了操作, 没有额外的方法调用. 使用默认操作符的函数是通用的. 它可以用于支持该操作的任何类型.</p>\n</li>\n<li><p>缺点</p>\n<p>  你没法通过阅读方法名来区分对象的类型(例如, has_key()意味着字典). 不过这也是优点.</p>\n</li>\n<li><p>结论</p>\n<p>  如果类型支持, 就使用默认迭代器和操作符, 例如列表, 字典和文件. 内建类型也定义了迭代器方法. 优先考虑这些方法, 而不是那些返回列表的方法. 当然，这样遍历容器时，你将不能修改容器.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> adict: ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> key <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> adict: ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> obj <span class=\"keyword\">in</span> alist: ...</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> afile: ...</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> dict.iteritems(): ...</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:     <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> adict.keys(): ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> adict.has_key(key): ...</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> afile.readlines(): ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h4><blockquote>\n<p>Tip: 按需使用生成器.</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  所谓生成器函数, 就是每当它执行一次生成(yield)语句, 它就返回一个迭代器, 这个迭代器生成一个值. 生成值后, 生成器函数的运行状态将被挂起, 直到下一次生成.</p>\n</li>\n<li><p>优点</p>\n<p>  简化代码, 因为每次调用时, 局部变量和控制流的状态都会被保存. 比起一次创建一系列值的函数, 生成器使用的内存更少.</p>\n</li>\n<li><p>缺点</p>\n<p>  无</p>\n</li>\n<li><p>结论</p>\n<p>  鼓励使用. 注意在生成器函数的文档字符串中使用<code>Yields:</code>而不是<code>Returns:</code>.</p>\n</li>\n</ul>\n<h4 id=\"Lambda函数\"><a href=\"#Lambda函数\" class=\"headerlink\" title=\"Lambda函数\"></a>Lambda函数</h4><blockquote>\n<p>Tip: 适用于单行函数</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  与语句相反, lambda在一个表达式中定义匿名函数. 常用于为<code>map()</code>和<code>filter()</code>之类的高阶函数定义回调函数或者操作符.</p>\n</li>\n<li><p>优点</p>\n<p>  方便</p>\n</li>\n<li><p>缺点</p>\n<p>  比本地函数更难阅读和调试. 没有函数名意味着堆栈跟踪更难理解. 由于lambda函数通常只包含一个表达式, 因此其表达能力有限.</p>\n</li>\n<li><p>结论</p>\n<p>  适用于单行函数. 如果代码超过60-80个字符, 最好还是定义成常规(嵌套)函数.</p>\n<p>  对于常见的操作符，例如乘法操作符，使用<code>operator</code>模块中的函数以代替<code>lambda</code>函数. 例如, 推荐使用 <code>operator.mul</code>, 而不是<code>lambda x, y: x * y</code>.</p>\n</li>\n</ul>\n<h4 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a>条件表达式</h4><blockquote>\n<p>Tip: 适用于单行函数</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  条件表达式是对于if语句的一种更为简短的句法规则. 例如:<code>x = 1 if cond else 2</code>.</p>\n</li>\n<li><p>优点</p>\n<p>  比if语句更加简短和方便.</p>\n</li>\n<li><p>缺点</p>\n<p>  比if语句更加简短和方便.</p>\n</li>\n<li><p>结论</p>\n<p>  适用于单行函数. 在其他情况下，推荐使用完整的if语句.</p>\n</li>\n</ul>\n<h4 id=\"默认参数值\"><a href=\"#默认参数值\" class=\"headerlink\" title=\"默认参数值\"></a>默认参数值</h4><blockquote>\n<p>Tip: 适用于大部分情况.</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  你可以在函数参数列表的最后指定变量的值, 例如, def <code>foo(a, b = 0):</code>. 如果调用foo时只带一个参数, 则b被设为0. 如果带两个参数, 则b的值等于第二个参数.</p>\n</li>\n<li><p>优点</p>\n<p>  你经常会碰到一些使用大量默认值的函数, 但偶尔(比较少见)你想要覆盖这些默认值. 默认参数值提供了一种简单的方法来完成这件事, 你不需要为这些罕见的例外定义大量函数. 同时, Python也不支持重载方法和函数, 默认参数是一种”仿造”重载行为的简单方式.</p>\n</li>\n<li><p>缺点</p>\n<p>  默认参数只在模块加载时求值一次. 如果参数是列表或字典之类的可变类型, 这可能会导致问题. 如果函数修改了对象(例如向列表追加项), 默认值就被修改了.</p>\n</li>\n<li><p>结论</p>\n<p>  鼓励使用, 不过有如下注意事项:</p>\n<p>  不要在函数或方法定义中使用可变对象作为默认值.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(a, b=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> b <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            b = []</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(a, b=[])</span>:</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">No:  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(a, b=time.time<span class=\"params\">()</span>)</span>:</span>  <span class=\"comment\"># The time the module was loaded???</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">No:  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(a, b=FLAGS.my_thing)</span>:</span>  <span class=\"comment\"># sys.argv has not yet been parsed...</span></span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"属性-properties\"><a href=\"#属性-properties\" class=\"headerlink\" title=\"属性(properties)\"></a>属性(properties)</h4><blockquote>\n<p>Tip: 访问和设置数据成员时, 你通常会使用简单, 轻量级的访问和设置函数. 建议用属性（properties）来代替它们.</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  一种用于包装方法调用的方式. 当运算量不大, 它是获取和设置属性(attribute)的标准方式.</p>\n</li>\n<li><p>优点</p>\n<p>  通过消除简单的属性(attribute)访问时显式的get和set方法调用, 可读性提高了. 允许懒惰的计算. 用Pythonic的方式来维护类的接口. 就性能而言, 当直接访问变量是合理的, 添加访问方法就显得琐碎而无意义. 使用属性(properties)可以绕过这个问题. 将来也可以在不破坏接口的情况下将访问方法加上.</p>\n</li>\n<li><p>缺点</p>\n<p>  属性(properties)是在get和set方法声明后指定, 这需要使用者在接下来的代码中注意: set和get是用于属性(properties)的(除了用<code>@property</code>装饰器创建的只读属性). 必须继承自object类. 可能隐藏比如操作符重载之类的副作用. 继承时可能会让人困惑.</p>\n</li>\n<li><p>结论</p>\n<p>  你通常习惯于使用访问或设置方法来访问或设置数据, 它们简单而轻量. 不过我们建议你在新的代码中使用属性. 只读属性应该用<code>@property</code>装饰器 来创建.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self._score</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@score.setter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(value, int):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'score must be an integer!'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> value &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> value &gt; <span class=\"number\">100</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'score must between 0 ~ 100!'</span>)</span><br><span class=\"line\">    self._score = value</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"True-False的求值\"><a href=\"#True-False的求值\" class=\"headerlink\" title=\"True/False的求值\"></a>True/False的求值</h4><blockquote>\n<p>Tip: 尽可能使用隐式false</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  Python在布尔上下文中会将某些值求值为false. 按简单的直觉来讲, 就是所有的”空”值都被认为是false. 因此<code>0</code>，<code>None</code>,<code>[]</code>,<code>{}</code>,<code>&quot;&quot;</code>都被认为是false.</p>\n</li>\n<li><p>优点</p>\n<p>  使用Python布尔值的条件语句更易读也更不易犯错. 大部分情况下, 也更快.</p>\n</li>\n<li><p>缺点</p>\n<p>  对C/C++开发人员来说, 可能看起来有点怪.</p>\n</li>\n<li><p>结论</p>\n<p>  尽可能使用隐式的false, 例如: 使用<code>if foo:</code>而不是 <code>if foo != []:</code>. 不过还是有一些注意事项需要你铭记在心:</p>\n<ul>\n<li>永远不要用==或者!=来比较单件, 比如<code>None</code>. 使用<code>is</code>或者<code>is not</code>.</li>\n<li>注意: 当你写下<code>if x:</code>时, 你其实表示的是<code>if x is not None</code>. 例如: 当你要测试一个默认值是None的变量或参数是否被设为其它值. 这个值在布尔语义下可能是false!</li>\n<li>永远不要用<code>==</code>将一个布尔量与false相比较. 使用<code>if not x:</code>代替. 如果你需要区分<code>false</code>和<code>None</code>, 你应该用像<code>if not x and x is not None:</code>这样的语句.</li>\n<li>对于序列(字符串, 列表, 元组), 要注意空序列是false. 因此<code>if not seq:</code>或者<code>if seq:</code>比<code>if len(seq):</code>或<code>if not len(seq):</code>要更好.</li>\n<li><p>处理整数时, 使用隐式false可能会得不偿失(即不小心将None当做0来处理). 你可以将一个已知是整型(且不是len()的返回结果)的值与0比较.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> users:</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'no users'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> foo == <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.handle_zero()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i % <span class=\"number\">10</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.handle_multiple_of_ten()</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:     <span class=\"keyword\">if</span> len(users) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'no users'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> foo <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> foo:</span><br><span class=\"line\">            self.handle_zero()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> i % <span class=\"number\">10</span>:</span><br><span class=\"line\">            self.handle_multiple_of_ten()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意’0’(字符串)会被当做true.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"过时的语言特性\"><a href=\"#过时的语言特性\" class=\"headerlink\" title=\"过时的语言特性\"></a>过时的语言特性</h4><blockquote>\n<p>Tip: 尽可能使用字符串方法取代字符串模块. 使用函数调用语法取代apply(). 使用列表推导, for循环取代filter(), map()以及reduce().</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  当前版本的Python提供了大家通常更喜欢的替代品.</p>\n</li>\n<li><p>结论</p>\n<p>  我们不使用不支持这些特性的Python版本, 所以没理由不用新的方式.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:    words = foo.split(<span class=\"string\">':'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        [x[<span class=\"number\">1</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> my_list <span class=\"keyword\">if</span> x[<span class=\"number\">2</span>] == <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        map(math.sqrt, data)    <span class=\"comment\"># Ok. No inlined lambda expression.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        fn(*args, **kwargs)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:     words = string.split(foo, <span class=\"string\">':'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        map(<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">1</span>], filter(<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">2</span>] == <span class=\"number\">5</span>, my_list))</span><br><span class=\"line\"></span><br><span class=\"line\">        apply(fn, args, kwargs)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"词法作用域-Lexical-Scoping\"><a href=\"#词法作用域-Lexical-Scoping\" class=\"headerlink\" title=\"词法作用域(Lexical Scoping)\"></a>词法作用域(Lexical Scoping)</h4><blockquote>\n<p>Tip: 推荐使用</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  嵌套的Python函数可以引用外层函数中定义的变量, 但是不能够对它们赋值. 变量绑定的解析是使用词法作用域, 也就是基于静态的程序文本. 对一个块中的某个名称的任何赋值都会导致Python将对该名称的全部引用当做局部变量, 甚至是赋值前的处理. 如果碰到global声明, 该名称就会被视作全局变量.</p>\n<p>  一个使用这个特性的例子:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_adder</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Returns a function that adds numbers to a given number.\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adder</span><span class=\"params\">(summand1, summand2)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> summand1 + summand2</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> adder</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>优点</p>\n<p>  通常可以带来更加清晰, 优雅的代码. 尤其会让有经验的Lisp和Scheme(还有Haskell, ML等)程序员感到欣慰.</p>\n</li>\n<li><p>缺点</p>\n<p>  可能导致让人迷惑的bug. 例如下面这个依据 PEP-0227 的例子:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> i,</span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"comment\"># A bunch of code here</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x:  <span class=\"comment\"># Ah, i *is* local to Foo, so this is what Bar sees</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> i,</span><br><span class=\"line\">    bar()</span><br></pre></td></tr></table></figure>\n<p>  因此<code>foo([1, 2, 3])</code>会打印<code>1 2 3 3</code>, 不是<code>1 2 3 4</code>. x是一个列表, for循环其实是将x中的值依次赋给i.这样对i的赋值就隐式的发生了, 整个foo函数体中的i都会被当做局部变量, 包括bar()中的那个.</p>\n</li>\n<li><p>结论</p>\n<p>  鼓励使用</p>\n</li>\n</ul>\n<h4 id=\"函数与方法装饰器\"><a href=\"#函数与方法装饰器\" class=\"headerlink\" title=\"函数与方法装饰器\"></a>函数与方法装饰器</h4><blockquote>\n<p>Tip: 如果好处很显然, 就明智而谨慎的使用装饰器</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  用于函数及方法的装饰器 (也就是@标记). 最常见的装饰器是<code>@classmethod</code>和<code>@staticmethod</code>, 用于将常规函数转换成类方法或静态方法. 不过, 装饰器语法也允许用户自定义装饰器. 特别地, 对于某个函数<code>my_decorator</code>, 下面的两段代码是等效的:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @my_decorator</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># method body ...</span></span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># method body ...</span></span><br><span class=\"line\">    method = my_decorator(method)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>优点</p>\n<p>  优雅的在函数上指定一些转换. 该转换可能减少一些重复代码, 保持已有函数不变(enforce invariants), 等.</p>\n</li>\n<li><p>缺点</p>\n<p>  装饰器可以在函数的参数或返回值上执行任何操作, 这可能导致让人惊异的隐藏行为. 而且, 装饰器在导入时执行. 从装饰器代码的失败中恢复更加不可能.</p>\n</li>\n<li><p>结论</p>\n<p>  如果好处很显然, 就明智而谨慎的使用装饰器. 装饰器应该遵守和函数一样的导入和命名规则. 装饰器的python文档应该清晰的说明该函数是一个装饰器. 请为装饰器编写单元测试.</p>\n<p>  避免装饰器自身对外界的依赖(即不要依赖于文件, socket, 数据库连接等), 因为装饰器运行时这些资源可能不可用(由 pydoc 或其它工具导入). 应该保证一个用有效参数调用的装饰器在所有情况下都是成功的.</p>\n</li>\n</ul>\n<h4 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h4><blockquote>\n<p>Tip: 不要依赖内建类型的原子性.</p>\n</blockquote>\n<p>虽然Python的内建类型例如字典看上去拥有原子操作, 但是在某些情形下它们仍然不是原子的(即: 如果<strong>hash</strong>或<strong>eq</strong>被实现为Python方法)且它们的原子性是靠不住的. 你也不能指望原子变量赋值(因为这个反过来依赖字典).</p>\n<p>优先使用Queue模块的<code>Queue</code>数据类型作为线程间的数据通信方式. 另外, 使用threading模块及其锁原语(locking primitives). 了解条件变量的合适使用方式, 这样你就可以使用<code>threading.Condition</code>来取代低级别的锁了.</p>\n<h4 id=\"威力过大的特性\"><a href=\"#威力过大的特性\" class=\"headerlink\" title=\"威力过大的特性\"></a>威力过大的特性</h4><blockquote>\n<p>Tip: 避免使用这些特性</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  Python是一种异常灵活的语言, 它为你提供了很多花哨的特性, 诸如元类(metaclasses), 字节码访问, 任意编译(on-the-fly compilation), 动态继承, 对象父类重定义(object reparenting), 导入黑客(import hacks), 反射, 系统内修改(modification of system internals), 等等.</p>\n</li>\n<li><p>优点</p>\n<p>  强大的语言特性, 能让你的代码更紧凑.</p>\n</li>\n<li><p>缺点</p>\n<p>  使用这些很”酷”的特性十分诱人, 但不是绝对必要. 使用奇技淫巧的代码将更加难以阅读和调试. 开始可能还好(对原作者而言), 但当你回顾代码, 它们可能会比那些稍长一点但是很直接的代码更加难以理解.</p>\n</li>\n<li><p>结论</p>\n<p>  在你的代码中避免这些特性.</p>\n</li>\n</ul>\n<h2 id=\"风格规范\"><a href=\"#风格规范\" class=\"headerlink\" title=\"风格规范\"></a>风格规范</h2><h4 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h4><blockquote>\n<p>Tip: 不要在行尾加分号, 也不要用分号将两条命令放在同一行.</p>\n</blockquote>\n<h4 id=\"行长度\"><a href=\"#行长度\" class=\"headerlink\" title=\"行长度\"></a>行长度</h4><blockquote>\n<p>Tip: 每行不超过80个字符</p>\n</blockquote>\n<p>例外:</p>\n<pre><code>1. 长的导入模块语句\n1. 注释里的URL\n</code></pre><p>不要使用反斜杠连接行.</p>\n<p>Python会将<code>圆括号</code>,<code>中括号</code>和<code>花括号</code>中的行隐式的连接起来 , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: foo_bar(self, width, height, color=<span class=\"string\">'black'</span>, design=<span class=\"keyword\">None</span>, x=<span class=\"string\">'foo'</span>,</span><br><span class=\"line\">             emphasis=<span class=\"keyword\">None</span>, highlight=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (width == <span class=\"number\">0</span> <span class=\"keyword\">and</span> height == <span class=\"number\">0</span> <span class=\"keyword\">and</span></span><br><span class=\"line\">         color == <span class=\"string\">'red'</span> <span class=\"keyword\">and</span> emphasis == <span class=\"string\">'strong'</span>):</span><br></pre></td></tr></table></figure>\n<p>如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = (<span class=\"string\">'This will build a very long long '</span></span><br><span class=\"line\">     <span class=\"string\">'long long long long long long string'</span>)</span><br></pre></td></tr></table></figure>\n<p>在注释中，如果必要，将长的URL放在一行上。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Google 开源项目风格指南</span><br><span class=\"line\">latest</span><br><span class=\"line\"></span><br><span class=\"line\">Search docs</span><br><span class=\"line\">Google 开源项目风格指南 (中文版)</span><br><span class=\"line\">C++ 风格指南 - 内容目录</span><br><span class=\"line\">Objective-C 风格指南 - 内容目录</span><br><span class=\"line\">Python 风格指南 - 内容目录</span><br><span class=\"line\">扉页</span><br><span class=\"line\">背景</span><br><span class=\"line\">Python语言规范</span><br><span class=\"line\">Python风格规范</span><br><span class=\"line\">分号</span><br><span class=\"line\">行长度</span><br><span class=\"line\">括号</span><br><span class=\"line\">缩进</span><br><span class=\"line\">空行</span><br><span class=\"line\">空格</span><br><span class=\"line\">Shebang</span><br><span class=\"line\">注释</span><br><span class=\"line\">类</span><br><span class=\"line\">字符串</span><br><span class=\"line\">文件和sockets</span><br><span class=\"line\">TODO注释</span><br><span class=\"line\">导入格式</span><br><span class=\"line\">语句</span><br><span class=\"line\">访问控制</span><br><span class=\"line\">命名</span><br><span class=\"line\">Main</span><br><span class=\"line\">临别赠言</span><br><span class=\"line\">Shell 风格指南 - 内容目录</span><br><span class=\"line\"></span><br><span class=\"line\">Love Documentation? Write the Docs is a community full of people like you!</span><br><span class=\"line\">Sponsored · Ads served ethically</span><br><span class=\"line\">Google 开源项目风格指南</span><br><span class=\"line\">Docs » Python 风格指南 - 内容目录 » Python风格规范  Edit on GitHub</span><br><span class=\"line\">Python风格规范</span><br><span class=\"line\">分号</span><br><span class=\"line\">Tip</span><br><span class=\"line\"></span><br><span class=\"line\">不要在行尾加分号, 也不要用分号将两条命令放在同一行.</span><br><span class=\"line\"></span><br><span class=\"line\">行长度</span><br><span class=\"line\">Tip</span><br><span class=\"line\"></span><br><span class=\"line\">每行不超过<span class=\"number\">80</span>个字符</span><br><span class=\"line\"></span><br><span class=\"line\">例外:</span><br><span class=\"line\"></span><br><span class=\"line\">长的导入模块语句</span><br><span class=\"line\">注释里的URL</span><br><span class=\"line\">不要使用反斜杠连接行.</span><br><span class=\"line\"></span><br><span class=\"line\">Python会将 圆括号, 中括号和花括号中的行隐式的连接起来 , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.</span><br><span class=\"line\"></span><br><span class=\"line\">```Python</span><br><span class=\"line\">Yes: foo_bar(self, width, height, color=<span class=\"string\">'black'</span>, design=<span class=\"keyword\">None</span>, x=<span class=\"string\">'foo'</span>,</span><br><span class=\"line\">             emphasis=<span class=\"keyword\">None</span>, highlight=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (width == <span class=\"number\">0</span> <span class=\"keyword\">and</span> height == <span class=\"number\">0</span> <span class=\"keyword\">and</span></span><br><span class=\"line\">         color == <span class=\"string\">'red'</span> <span class=\"keyword\">and</span> emphasis == <span class=\"string\">'strong'</span>):</span><br></pre></td></tr></table></figure>\n<p>如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = (<span class=\"string\">'This will build a very long long '</span></span><br><span class=\"line\">     <span class=\"string\">'long long long long long long string'</span>)</span><br></pre></td></tr></table></figure>\n<p>在注释中，如果必要，将长的URL放在一行上。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:  <span class=\"comment\"># See details at</span></span><br><span class=\"line\">      <span class=\"comment\"># http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:  <span class=\"comment\"># See details at</span></span><br><span class=\"line\">     <span class=\"comment\"># http://www.example.com/us/developer/documentation/api/content/\\</span></span><br><span class=\"line\">     <span class=\"comment\"># v2.0/csv_file_name_extension_full_specification.html</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"括号\"><a href=\"#括号\" class=\"headerlink\" title=\"括号\"></a>括号</h4><blockquote>\n<p>Tip: 宁缺毋滥的使用括号</p>\n</blockquote>\n<p>除非是用于实现行连接, 否则不要在返回语句或条件语句中使用括号. 不过在元组两边使用括号是可以的.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: <span class=\"keyword\">if</span> foo:</span><br><span class=\"line\">         bar()</span><br><span class=\"line\">     <span class=\"keyword\">while</span> x:</span><br><span class=\"line\">         x = bar()</span><br><span class=\"line\">     <span class=\"keyword\">if</span> x <span class=\"keyword\">and</span> y:</span><br><span class=\"line\">         bar()</span><br><span class=\"line\">     <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> x:</span><br><span class=\"line\">         bar()</span><br><span class=\"line\">     <span class=\"keyword\">return</span> foo</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (x, y) <span class=\"keyword\">in</span> dict.items(): ...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:  <span class=\"keyword\">if</span> (x):</span><br><span class=\"line\">         bar()</span><br><span class=\"line\">     <span class=\"keyword\">if</span> <span class=\"keyword\">not</span>(x):</span><br><span class=\"line\">         bar()</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (foo)</span><br></pre></td></tr></table></figure>\n<h4 id=\"缩进\"><a href=\"#缩进\" class=\"headerlink\" title=\"缩进\"></a>缩进</h4><blockquote>\n<p>Tip: 用4个空格来缩进代码</p>\n</blockquote>\n<p>绝对不要用tab, 也不要tab和空格混用. 对于行连接的情况, 你应该要么垂直对齐换行的元素, 或者使用4空格的悬挂式缩进(这时第一行不应该有参数):</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:   <span class=\"comment\"># Aligned with opening delimiter</span></span><br><span class=\"line\">       foo = long_function_name(var_one, var_two,</span><br><span class=\"line\">                                var_three, var_four)</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"># Aligned with opening delimiter in a dictionary</span></span><br><span class=\"line\">       foo = &#123;</span><br><span class=\"line\">           long_dictionary_key: value1 +</span><br><span class=\"line\">                                value2,</span><br><span class=\"line\">           ...</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"># 4-space hanging indent; nothing on first line</span></span><br><span class=\"line\">       foo = long_function_name(</span><br><span class=\"line\">           var_one, var_two, var_three,</span><br><span class=\"line\">           var_four)</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"># 4-space hanging indent in a dictionary</span></span><br><span class=\"line\">       foo = &#123;</span><br><span class=\"line\">           long_dictionary_key:</span><br><span class=\"line\">               long_dictionary_value,</span><br><span class=\"line\">           ...</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:    <span class=\"comment\"># Stuff on first line forbidden</span></span><br><span class=\"line\">      foo = long_function_name(var_one, var_two,</span><br><span class=\"line\">          var_three, var_four)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># 2-space hanging indent forbidden</span></span><br><span class=\"line\">      foo = long_function_name(</span><br><span class=\"line\">        var_one, var_two, var_three,</span><br><span class=\"line\">        var_four)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># No hanging indent in a dictionary</span></span><br><span class=\"line\">      foo = &#123;</span><br><span class=\"line\">          long_dictionary_key:</span><br><span class=\"line\">              long_dictionary_value,</span><br><span class=\"line\">              ...</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h4><blockquote>\n<p>顶级定义之间空两行, 方法定义之间空一行</p>\n</blockquote>\n<p>顶级定义之间空两行, 比如函数或者类定义. 方法定义, 类定义与第一个方法之间, 都应该空一行. 函数或方法中, 某些地方要是你觉得合适, 就空一行.</p>\n<h4 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h4><blockquote>\n<p>按照标准的排版规范来使用标点两边的空格</p>\n</blockquote>\n<p>括号内不要有空格.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: spam(ham[<span class=\"number\">1</span>], &#123;eggs: <span class=\"number\">2</span>&#125;, [])</span><br><span class=\"line\">No:  spam( ham[ <span class=\"number\">1</span> ], &#123; eggs: <span class=\"number\">2</span> &#125;, [ ] )</span><br></pre></td></tr></table></figure>\n<p>不要在逗号, 分号, 冒号前面加空格, 但应该在它们后面加(除了在行尾).</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: <span class=\"keyword\">if</span> x == <span class=\"number\">4</span>:</span><br><span class=\"line\">         <span class=\"keyword\">print</span> x, y</span><br><span class=\"line\">     x, y = y, x</span><br><span class=\"line\">No:  <span class=\"keyword\">if</span> x == <span class=\"number\">4</span> :</span><br><span class=\"line\">         <span class=\"keyword\">print</span> x , y</span><br><span class=\"line\">     x , y = y , x</span><br></pre></td></tr></table></figure>\n<p>参数列表, 索引或切片的左括号前不应加空格.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: spam(<span class=\"number\">1</span>)</span><br><span class=\"line\">no: spam (<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Yes: dict[<span class=\"string\">'key'</span>] = list[index]</span><br><span class=\"line\">No:  dict [<span class=\"string\">'key'</span>] = list [index]</span><br></pre></td></tr></table></figure>\n<p>在二元操作符两边都加上一个空格, 比如赋值(=), 比较(==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not), 布尔(and, or, not). 至于算术操作符两边的空格该如何使用, 需要你自己好好判断. 不过两侧务必要保持一致.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: x == <span class=\"number\">1</span></span><br><span class=\"line\">No:  x&lt;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>当’=’用于指示关键字参数或默认参数值时, 不要在其两侧使用空格.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">complex</span><span class=\"params\">(real, imag=<span class=\"number\">0.0</span>)</span>:</span> <span class=\"keyword\">return</span> magic(r=real, i=imag)</span><br><span class=\"line\">No:  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">complex</span><span class=\"params\">(real, imag = <span class=\"number\">0.0</span>)</span>:</span> <span class=\"keyword\">return</span> magic(r = real, i = imag)</span><br></pre></td></tr></table></figure>\n<p>不要用空格来垂直对齐多行间的标记, 因为这会成为维护的负担(适用于:, #, =等):</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:</span><br><span class=\"line\">     foo = <span class=\"number\">1000</span>  <span class=\"comment\"># comment</span></span><br><span class=\"line\">     long_name = <span class=\"number\">2</span>  <span class=\"comment\"># comment that should not be aligned</span></span><br><span class=\"line\"></span><br><span class=\"line\">     dictionary = &#123;</span><br><span class=\"line\">         <span class=\"string\">\"foo\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">         <span class=\"string\">\"long_name\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">         &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:</span><br><span class=\"line\">     foo       = <span class=\"number\">1000</span>  <span class=\"comment\"># comment</span></span><br><span class=\"line\">     long_name = <span class=\"number\">2</span>     <span class=\"comment\"># comment that should not be aligned</span></span><br><span class=\"line\"></span><br><span class=\"line\">     dictionary = &#123;</span><br><span class=\"line\">         <span class=\"string\">\"foo\"</span>      : <span class=\"number\">1</span>,</span><br><span class=\"line\">         <span class=\"string\">\"long_name\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">         &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Shebang\"><a href=\"#Shebang\" class=\"headerlink\" title=\"Shebang\"></a>Shebang</h4><blockquote>\n<p>大部分.py文件不必以#!作为文件的开始. 根据 PEP-394 , 程序的main文件应该以 #!/usr/bin/python2或者 #!/usr/bin/python3开始.</p>\n</blockquote>\n<p>在计算机科学中, Shebang (也称为Hashbang)是一个由井号和叹号构成的字符串行(#!), 其出现在文本文件的第一行的前两个字符. 在文件中存在Shebang的情况下, 类Unix操作系统的程序载入器会分析Shebang后的内容, 将这些内容作为解释器指令, 并调用该指令, 并将载有Shebang的文件路径作为该解释器的参数. 例如, 以指令#!/bin/sh开头的文件在执行时会实际调用/bin/sh程序.</p>\n<p>#!先用于帮助内核找到Python解释器, 但是在导入模块时, 将会被忽略. 因此只有被直接执行的文件中才有必要加入#!.</p>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><blockquote>\n<p>确保对模块, 函数, 方法和行内注释使用正确的风格</p>\n</blockquote>\n<h5 id=\"文档字符串\"><a href=\"#文档字符串\" class=\"headerlink\" title=\"文档字符串\"></a>文档字符串</h5><p>Python有一种独一无二的的注释方式: 使用文档字符串. 文档字符串是包, 模块, 类或函数里的第一个语句. 这些字符串可以通过对象的<code>__doc__</code>成员被自动提取, 并且被<code>pydoc</code>所用. (你可以在你的模块上运行pydoc试一把, 看看它长什么样). 我们对文档字符串的惯例是使用三重双引号<code>&quot;&quot;&quot;</code>. 一个文档字符串应该这样组织: 首先是一行以句号, 问号或惊叹号结尾的概述(或者该文档字符串单纯只有一行). 接着是一个空行. 接着是文档字符串剩下的部分, 它应该与文档字符串的第一行的第一个引号对齐. 下面有更多文档字符串的格式化规范.</p>\n<h5 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h5><p>每个文件应该包含一个许可样板. 根据项目使用的许可(例如, Apache 2.0, BSD, LGPL, GPL), 选择合适的样板.</p>\n<h5 id=\"函数和方法\"><a href=\"#函数和方法\" class=\"headerlink\" title=\"函数和方法\"></a>函数和方法</h5><p>下文所指的函数,包括函数, 方法, 以及生成器.</p>\n<p>一个函数必须要有文档字符串, 除非它满足以下条件:</p>\n<ul>\n<li>外部不可见</li>\n<li>非常短小</li>\n<li>简单明了</li>\n</ul>\n<p>文档字符串应该包含函数做什么, 以及输入和输出的详细描述. 通常, 不应该描述”怎么做”, 除非是一些复杂的算法. 文档字符串应该提供足够的信息, 当别人编写代码调用该函数时, 他不需要看一行代码, 只要看文档字符串就可以了. 对于复杂的代码, 在代码旁边加注释会比使用文档字符串更有意义.</p>\n<p>Args:</p>\n<pre><code>列出每个参数的名字, 并在名字后使用一个冒号和一个空格, 分隔对该参数的描述.如果描述太长超过了单行80字符,使用2或者4个空格的悬挂缩进(与文件其他部分保持一致). 描述应该包括所需的类型和含义. 如果一个函数接受*foo(可变长度参数列表)或者**bar (任意关键字参数), 应该详细列出*foo和**bar.\n</code></pre><p>Returns: (或者 Yields: 用于生成器)</p>\n<pre><code>描述返回值的类型和语义. 如果函数返回None, 这一部分可以省略.\n</code></pre><p>Raises:</p>\n<pre><code>列出与接口有关的所有异常.\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fetch_bigtable_rows</span><span class=\"params\">(big_table, keys, other_silly_variable=None)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Fetches rows from a Bigtable.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Retrieves rows pertaining to the given keys from the Table instance</span></span><br><span class=\"line\"><span class=\"string\">    represented by big_table.  Silly things may happen if</span></span><br><span class=\"line\"><span class=\"string\">    other_silly_variable is not None.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">        big_table: An open Bigtable Table instance.</span></span><br><span class=\"line\"><span class=\"string\">        keys: A sequence of strings representing the key of each table row</span></span><br><span class=\"line\"><span class=\"string\">            to fetch.</span></span><br><span class=\"line\"><span class=\"string\">        other_silly_variable: Another optional variable, that has a much</span></span><br><span class=\"line\"><span class=\"string\">            longer name than the other args, and which does nothing.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Returns:</span></span><br><span class=\"line\"><span class=\"string\">        A dict mapping keys to the corresponding table row data</span></span><br><span class=\"line\"><span class=\"string\">        fetched. Each row is represented as a tuple of strings. For</span></span><br><span class=\"line\"><span class=\"string\">        example:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        &#123;'Serak': ('Rigel VII', 'Preparer'),</span></span><br><span class=\"line\"><span class=\"string\">         'Zim': ('Irk', 'Invader'),</span></span><br><span class=\"line\"><span class=\"string\">         'Lrrr': ('Omicron Persei 8', 'Emperor')&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        If a key from the keys argument is missing from the dictionary,</span></span><br><span class=\"line\"><span class=\"string\">        then that row was not found in the table.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Raises:</span></span><br><span class=\"line\"><span class=\"string\">        IOError: An error occurred accessing the bigtable.Table object.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h5><p>类应该在其定义下有一个用于描述该类的文档字符串. 如果你的类有公共属性(Attributes), 那么文档中应该有一个属性(Attributes)段. 并且应该遵守和函数参数相同的格式.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Summary of class here.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Longer class information....</span></span><br><span class=\"line\"><span class=\"string\">    Longer class information....</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Attributes:</span></span><br><span class=\"line\"><span class=\"string\">        likes_spam: A boolean indicating if we like SPAM or not.</span></span><br><span class=\"line\"><span class=\"string\">        eggs: An integer count of the eggs we have laid.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, likes_spam=False)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Inits SampleClass with blah.\"\"\"</span></span><br><span class=\"line\">        self.likes_spam = likes_spam</span><br><span class=\"line\">        self.eggs = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">public_method</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Performs operation blah.\"\"\"</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"块注释和行注释\"><a href=\"#块注释和行注释\" class=\"headerlink\" title=\"块注释和行注释\"></a>块注释和行注释</h5><p>最需要写注释的是代码中那些技巧性的部分. 如果你在下次代码审查的时候必须解释一下, 那么你应该现在就给它写注释. 对于复杂的操作, 应该在其操作开始前写上若干行注释. 对于不是一目了然的代码, 应在其行尾添加注释.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># We use a weighted dictionary search to find out where i is in</span></span><br><span class=\"line\"><span class=\"comment\"># the array.  We extrapolate position based on the largest num</span></span><br><span class=\"line\"><span class=\"comment\"># in the array and the array size and then do binary search to</span></span><br><span class=\"line\"><span class=\"comment\"># get the exact number.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> i &amp; (i<span class=\"number\">-1</span>) == <span class=\"number\">0</span>:        <span class=\"comment\"># true iff i is a power of 2</span></span><br></pre></td></tr></table></figure>\n<p>为了提高可读性, 注释应该至少离开代码2个空格.</p>\n<p>另一方面, 绝不要描述代码. 假设阅读代码的人比你更懂Python, 他只是不知道你的代码要做什么.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># BAD COMMENT: Now go through the b array and make sure whenever i occurs</span></span><br><span class=\"line\"><span class=\"comment\"># the next element is i+1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"类-1\"><a href=\"#类-1\" class=\"headerlink\" title=\"类\"></a>类</h4><blockquote>\n<p>Tip: 如果一个类不继承自其它类, 就显式的从object继承. 嵌套类也一样.</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">         <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass</span><span class=\"params\">(ParentClass)</span>:</span></span><br><span class=\"line\">         <span class=\"string\">\"\"\"Explicitly inherits from another class already.\"\"\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No: <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>继承自<code>object</code>是为了使属性(properties)正常工作, 并且这样可以保护你的代码, 使其不受<a href=\"https://www.python.org/dev/peps/pep-3000/\" target=\"_blank\" rel=\"noopener\">PEP-3000</a> 的一个特殊的潜在不兼容性影响. 这样做也定义了一些特殊的方法, 这些方法实现了对象的默认语义, 包括<code>__new__</code>, <code>__init__</code>, <code>__delattr__</code>, <code>__getattribute__</code>, <code>__setattr__</code>, <code>__hash__</code>, <code>__repr__</code>, and <code>__str__</code> .</p>\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><blockquote>\n<p>Tip: 即使参数都是字符串, 使用%操作符或者格式化方法格式化字符串. 不过也不能一概而论, 你需要在+和%之间好好判定.</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: x = a + b</span><br><span class=\"line\">     x = <span class=\"string\">'%s, %s!'</span> % (imperative, expletive)</span><br><span class=\"line\">     x = <span class=\"string\">'&#123;&#125;, &#123;&#125;!'</span>.format(imperative, expletive)</span><br><span class=\"line\">     x = <span class=\"string\">'name: %s; score: %d'</span> % (name, n)</span><br><span class=\"line\">     x = <span class=\"string\">'name: &#123;&#125;; score: &#123;&#125;'</span>.format(name, n)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No: x = <span class=\"string\">'%s%s'</span> % (a, b)  <span class=\"comment\"># use + in this case</span></span><br><span class=\"line\">    x = <span class=\"string\">'&#123;&#125;&#123;&#125;'</span>.format(a, b)  <span class=\"comment\"># use + in this case</span></span><br><span class=\"line\">    x = imperative + <span class=\"string\">', '</span> + expletive + <span class=\"string\">'!'</span></span><br><span class=\"line\">    x = <span class=\"string\">'name: '</span> + name + <span class=\"string\">'; score: '</span> + str(n)</span><br></pre></td></tr></table></figure>\n<p>避免在循环中用+和+=操作符来累加字符串. 由于字符串是不可变的, 这样做会创建不必要的临时对象, 并且导致二次方而不是线性的运行时间. 作为替代方案, 你可以将每个子串加入列表, 然后在循环结束后用<code>.join</code>连接列表. (也可以将每个子串写入一个<code>cStringIO.StringIO</code>缓存中.)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No: employee_table = <span class=\"string\">'&lt;table&gt;'</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> last_name, first_name <span class=\"keyword\">in</span> employee_list:</span><br><span class=\"line\">        employee_table += <span class=\"string\">'&lt;tr&gt;&lt;td&gt;%s, %s&lt;/td&gt;&lt;/tr&gt;'</span> % (last_name, first_name)</span><br><span class=\"line\">    employee_table += <span class=\"string\">'&lt;/table&gt;'</span></span><br></pre></td></tr></table></figure>\n<p>在同一个文件中, 保持使用字符串引号的一致性. 使用单引号’或者双引号”之一用以引用字符串, 并在同一文件中沿用. 在字符串内可以使用另外一种引号, 以避免在字符串中使用. PyLint已经加入了这一检查.</p>\n<p>为多行字符串使用三重双引号”“”而非三重单引号’‘’. 当且仅当项目中使用单引号’来引用字符串时, 才可能会使用三重’‘’为非文档字符串的多行字符串来标识引用. 文档字符串必须使用三重双引号”“”. 不过要注意, 通常用隐式行连接更清晰, 因为多行字符串与程序其他部分的缩进方式不一致.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"This is much nicer.\\n\"</span></span><br><span class=\"line\">           <span class=\"string\">\"Do it this way.\\n\"</span>)</span><br><span class=\"line\">No:</span><br><span class=\"line\">      <span class=\"keyword\">print</span> <span class=\"string\">\"\"\"This is pretty ugly.</span></span><br><span class=\"line\"><span class=\"string\">  Don't do this.</span></span><br><span class=\"line\"><span class=\"string\">  \"\"\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"文件和sockets\"><a href=\"#文件和sockets\" class=\"headerlink\" title=\"文件和sockets\"></a>文件和sockets</h4><blockquote>\n<p>Tip: 在文件和sockets结束时, 显式的关闭它.</p>\n</blockquote>\n<p>除文件外, sockets或其他类似文件的对象在没有必要的情况下打开, 会有许多副作用, 例如:</p>\n<ol>\n<li>它们可能会消耗有限的系统资源, 如文件描述符. 如果这些资源在使用后没有及时归还系统, 那么用于处理这些对象的代码会将资源消耗殆尽.</li>\n<li>持有文件将会阻止对于文件的其他诸如移动、删除之类的操作.</li>\n<li>仅仅是从逻辑上关闭文件和sockets, 那么它们仍然可能会被其共享的程序在无意中进行读或者写操作. 只有当它们真正被关闭后, 对于它们尝试进行读或者写操作将会抛出异常, 并使得问题快速显现出来.</li>\n</ol>\n<p>而且, 幻想当文件对象析构时, 文件和sockets会自动关闭, 试图将文件对象的生命周期和文件的状态绑定在一起的想法, 都是不现实的. 因为有如下原因:</p>\n<ol>\n<li>没有任何方法可以确保运行环境会真正的执行文件的析构. 不同的Python实现采用不同的内存管理技术, 比如延时垃圾处理机制. 延时垃圾处理机制可能会导致对象生命周期被任意无限制的延长.</li>\n<li>对于文件意外的引用,会导致对于文件的持有时间超出预期(比如对于异常的跟踪, 包含有全局变量等).</li>\n</ol>\n<p>推荐使用<code>&quot;with&quot;</code>语句 以管理文件:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"hello.txt\"</span>) <span class=\"keyword\">as</span> hello_file:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> hello_file:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> line</span><br></pre></td></tr></table></figure>\n<p>对于不支持使用<code>&quot;with&quot;</code>语句的类似文件的对象,使用 contextlib.closing():</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> contextlib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> contextlib.closing(urllib.urlopen(<span class=\"string\">\"http://www.python.org/\"</span>)) <span class=\"keyword\">as</span> front_page:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> front_page:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> line</span><br></pre></td></tr></table></figure>\n<h4 id=\"TODO注释\"><a href=\"#TODO注释\" class=\"headerlink\" title=\"TODO注释\"></a>TODO注释</h4><blockquote>\n<p>Tip: 为临时代码使用TODO注释, 它是一种短期解决方案. 不算完美, 但够好了.</p>\n</blockquote>\n<p>TODO注释应该在所有开头处包含<code>&quot;TODO&quot;</code>字符串, 紧跟着是用括号括起来的你的名字, email地址或其它标识符. 然后是一个可选的冒号. 接着必须有一行注释, 解释要做什么. 主要目的是为了有一个统一的TODO格式, 这样添加注释的人就可以搜索到(并可以按需提供更多细节). 写了TODO注释并不保证写的人会亲自解决问题. 当你写了一个TODO, 请注上你的名字.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># TODO(kl@gmail.com): Use a \"*\" here for string repetition.</span></span><br><span class=\"line\"><span class=\"comment\"># TODO(Zeke) Change this to use relations.</span></span><br></pre></td></tr></table></figure>\n<p>如果你的TODO是”将来做某事”的形式, 那么请确保你包含了一个指定的日期(“2009年11月解决”)或者一个特定的事件(“等到所有的客户都可以处理XML请求就移除这些代码”).</p>\n<h4 id=\"导入格式\"><a href=\"#导入格式\" class=\"headerlink\" title=\"导入格式\"></a>导入格式</h4><blockquote>\n<p>每个导入应该独占一行</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: <span class=\"keyword\">import</span> os</span><br><span class=\"line\">     <span class=\"keyword\">import</span> sys</span><br><span class=\"line\">No:  <span class=\"keyword\">import</span> os, sys</span><br></pre></td></tr></table></figure>\n<p>导入总应该放在文件顶部, 位于模块注释和文档字符串之后, 模块全局变量和常量之前. 导入应该按照从最通用到最不通用的顺序分组:</p>\n<ol>\n<li>标准库导入</li>\n<li>第三方库导入</li>\n<li>应用程序指定导入</li>\n</ol>\n<p>每种分组中, 应该根据每个模块的完整包路径按字典序排序, 忽略大小写.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> foo</span><br><span class=\"line\"><span class=\"keyword\">from</span> foo <span class=\"keyword\">import</span> bar</span><br><span class=\"line\"><span class=\"keyword\">from</span> foo.bar <span class=\"keyword\">import</span> baz</span><br><span class=\"line\"><span class=\"keyword\">from</span> foo.bar <span class=\"keyword\">import</span> Quux</span><br><span class=\"line\"><span class=\"keyword\">from</span> Foob <span class=\"keyword\">import</span> ar</span><br></pre></td></tr></table></figure>\n<h4 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h4><blockquote>\n<p>在Python中, 对于琐碎又不太重要的访问函数, 你应该直接使用公有变量来取代它们, 这样可以避免额外的函数调用开销. 当添加更多功能时, 你可以用属性(property)来保持语法的一致性.</p>\n</blockquote>\n<p>另一方面, 如果访问更复杂, 或者变量的访问开销很显著, 那么你应该使用像 get_foo() 和 set_foo() 这样的函数调用. 如果之前的代码行为允许通过属性(property)访问 , 那么就不要将新的访问函数与属性绑定. 这样, 任何试图通过老方法访问变量的代码就没法运行, 使用者也就会意识到复杂性发生了变化.</p>\n<h4 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h4><blockquote>\n<p>Tip: module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name.</p>\n</blockquote>\n<p>应该避免的名称</p>\n<ul>\n<li>单字符名称, 除了计数器和迭代器.</li>\n<li>包/模块名中的连字符(-)</li>\n<li>双下划线开头并结尾的名称(Python保留, 例如<strong>init</strong>)</li>\n</ul>\n<p>命名约定</p>\n<ul>\n<li>所谓”内部(Internal)”表示仅模块内可用, 或者, 在类内是保护或私有的.</li>\n<li>用单下划线(_)开头表示模块变量或函数是protected的(使用<code>from x import x</code>时不会包含).</li>\n<li>用双下划线(__)开头的实例变量或方法表示类内私有.</li>\n<li>将相关的类和顶级函数放在同一个模块里. 不像Java, 没必要限制一个类一个模块.</li>\n<li>对类名使用大写字母开头的单词(如CapWords, 即Pascal风格), 但是模块名应该用小写加下划线的方式(如lower_with_under.py). 尽管已经有很多现存的模块使用类似于CapWords.py这样的命名, 但现在已经不鼓励这样做, 因为如果模块名碰巧和类名一致, 这会让人困扰.</li>\n</ul>\n<p>Python之父Guido推荐的规范</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:center\">Public</th>\n<th style=\"text-align:center\">Internal</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Modules</td>\n<td style=\"text-align:center\">lower_with_under</td>\n<td style=\"text-align:center\">_lower_with_under</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Packages</td>\n<td style=\"text-align:center\">lower_with_under</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Classes</td>\n<td style=\"text-align:center\">CapWords</td>\n<td style=\"text-align:center\">_CapWords</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Exceptions</td>\n<td style=\"text-align:center\">CapWords</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Functions</td>\n<td style=\"text-align:center\">lower_with_under()</td>\n<td style=\"text-align:center\">_lower_with_under()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Global/Class Constants</td>\n<td style=\"text-align:center\">CAPS_WITH_UNDER</td>\n<td style=\"text-align:center\">_CAPS_WITH_UNDER</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Global/Class Variables</td>\n<td style=\"text-align:center\">lower_with_under</td>\n<td style=\"text-align:center\">_lower_with_under</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Instance Variables</td>\n<td style=\"text-align:center\">lower_with_under</td>\n<td style=\"text-align:center\">_lower_with_under (protected) or __lower_with_under (private)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Method Names</td>\n<td style=\"text-align:center\">lower_with_under()</td>\n<td style=\"text-align:center\">_lower_with_under() (protected) or __lower_with_under() (private)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Function/Method Parameters</td>\n<td style=\"text-align:center\">lower_with_under</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Local Variables</td>\n<td style=\"text-align:center\">lower_with_under</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Main\"><a href=\"#Main\" class=\"headerlink\" title=\"Main\"></a>Main</h4><blockquote>\n<p>Tip: 即使是一个打算被用作脚本的文件, 也应该是可导入的. 并且简单的导入不应该导致这个脚本的主功能(main functionality)被执行, 这是一种副作用. 主功能应该放在一个main()函数中.</p>\n</blockquote>\n<p>在Python中, pydoc以及单元测试要求模块必须是可导入的. 你的代码应该在执行主程序前总是检查<code>if __name__ == &#39;__main__&#39;</code>, 这样当模块被导入时主程序就不会被执行.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">      ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>所有的顶级代码在模块导入时都会被执行. 要小心不要去调用函数, 创建对象, 或者执行那些不应该在使用pydoc时执行的操作.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>请务必保持代码的一致性。</p>\n<p>如果你正在编辑代码, 花几分钟看一下周边代码, 然后决定风格. 如果它们在所有的算术操作符两边都使用空格, 那么你也应该这样做. 如果它们的注释都用标记包围起来, 那么你的注释也要这样.</p>\n<p>制定风格指南的目的在于让代码有规可循, 这样人们就可以专注于”你在说什么”, 而不是”你在怎么说”. 我们在这里给出的是全局的规范, 但是本地的规范同样重要. 如果你加到一个文件里的代码和原有代码大相径庭, 它会让读者不知所措. 避免这种情况.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Google-Python-Code-Style\"><a href=\"#Google-Python-Code-Style\" class=\"headerlink\" title=\"Google Python Code Style\"></a>Google Python Code Style</h1><p>Python相较于C++来说，语法和写法都比较简单，所以不像C++一样有那么多的规范，主要从<em>语言规范</em>和<em>风格规范</em>两个方面制定规范。</p>","more":"<h2 id=\"语言规范\"><a href=\"#语言规范\" class=\"headerlink\" title=\"语言规范\"></a>语言规范</h2><h4 id=\"Lint\"><a href=\"#Lint\" class=\"headerlink\" title=\"Lint\"></a>Lint</h4><blockquote>\n<p>Tip: 对你的代码运行pylint</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  pylint是一个在Python源代码中查找bug的工具. 对于C和C++这样的不那么动态的语言, 这些bug通常由编译器来捕获. 由于Python的动态特性, 有些警告可能不对. 不过伪告警应该很少.</p>\n</li>\n<li><p>优点</p>\n<p>  可以捕获容易忽视的错误, 例如输入错误, 使用未赋值的变量等.</p>\n</li>\n<li><p>缺点</p>\n<p>  pylint不完美. 要利用其优势, 我们有时侯需要:</p>\n<ul>\n<li>围绕着它来写代码</li>\n<li>抑制其告警</li>\n<li>改进它</li>\n<li>忽略它.</li>\n</ul>\n</li>\n<li><p>结论</p>\n<p>  确保对你的代码运行pylint.抑制不准确的警告,以便能够将其他警告暴露出来。</p>\n<p>  你可以通过设置一个行注释来抑制告警. 例如:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict = <span class=\"string\">'something awful'</span>  <span class=\"comment\"># Bad Idea... pylint: disable=redefined-builtin</span></span><br></pre></td></tr></table></figure>\n<p>  pylint警告是以一个数字编号(如 <code>C0112</code> )和一个符号名(如 <code>empty-docstring</code> )来标识的. 在编写新代码或更新已有代码时对告警进行抑制, 推荐使用符号名来标识.</p>\n<p>  如果警告的符号名不够见名知意，那么请对其增加一个详细解释。</p>\n<p>  采用这种抑制方式的好处是我们可以轻松查找抑制并回顾它们.</p>\n<p>  你可以使用命令 <code>pylint --list-msgs</code> 来获取pylint告警列表. 你可以使用命令 <code>pylint --help-msg=C6409</code> , 以获取关于特定消息的更多信息.</p>\n<p>  相比较于之前使用的 <code>pylint: disable-msg</code> , 本文推荐使用 <code>pylint: disable</code> .</p>\n<p>  要抑制”参数未使用”告警, 你可以用”<em>”作为参数标识符, 或者在参数名前加”unused</em>”. 遇到不能改变参数名的情况, 你可以通过在函数开头”提到”它们来消除告警. 例如:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(a, unused_b, unused_c, d=None, e=None)</span>:</span></span><br><span class=\"line\">    _ = d, e</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><blockquote>\n<p>Tip: 仅对包和模块使用导入</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  模块间共享代码的重用机制.</p>\n</li>\n<li><p>优点</p>\n<p>  命名空间管理约定十分简单. 每个标识符的源都用一种一致的方式指示. x.Obj表示Obj对象定义在模块x中.</p>\n</li>\n<li><p>缺点</p>\n<p>  模块名仍可能冲突. 有些模块名太长, 不太方便.</p>\n</li>\n<li><p>结论</p>\n<ul>\n<li><strong>不要</strong>使用<code>from x import *</code></li>\n<li>使用<code>import x</code>来导入包和模块.</li>\n<li>使用<code>from x import y</code>, 其中x是包前缀, y是不带前缀的模块名.</li>\n<li>使用<code>from x import y as z</code>, 如果两个要导入的模块都叫做y或者y太长了.</li>\n<li><p>例如, 模块<code>sound.effects.echo</code>可以用如下方式导入:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sound.effects <span class=\"keyword\">import</span> echo</span><br><span class=\"line\">...</span><br><span class=\"line\">echo.EchoFilter(input, output, delay=<span class=\"number\">0.7</span>, atten=<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>导入时不要使用相对名称. 即使模块在同一个包中, 也要使用完整包名. 这能帮助你避免无意间导入一个包两次.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h2><blockquote>\n<p>Tip: 使用模块的全路径名来导入每个模块</p>\n</blockquote>\n<ul>\n<li><p>优点</p>\n<p>  避免模块名冲突. 查找包更容易.</p>\n</li>\n<li><p>缺点</p>\n<p>  部署代码变难, 因为你必须复制包层次.</p>\n</li>\n<li><p>结论</p>\n<p>  所有的新代码都应该用完整包名来导入每个模块.</p>\n<p>  应该像下面这样导入:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Reference in code with complete name.</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sound.effects.echo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Reference in code with just module name (preferred).</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sound.effects <span class=\"keyword\">import</span> echo</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h4><blockquote>\n<p>Tip: 允许使用异常, 但必须小心</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  异常是一种跳出代码块的正常控制流来处理错误或者其它异常条件的方式.</p>\n</li>\n<li><p>优点</p>\n<p>  正常操作代码的控制流不会和错误处理代码混在一起. 当某种条件发生时, 它也允许控制流跳过多个框架. 例如, 一步跳出N个嵌套的函数, 而不必继续执行错误的代码.</p>\n</li>\n<li><p>缺点</p>\n<p>  可能会导致让人困惑的控制流. 调用库时容易错过错误情况.</p>\n</li>\n<li><p>结论</p>\n<p>  异常必须遵守特定条件:</p>\n<ul>\n<li>像这样触发异常:<code>raise MyException(&quot;Error message&quot;)</code>或者<code>raise MyException</code>. 不要使用两个参数的形式(<code>raise MyException, &quot;Error message&quot;</code>)或者过时的字符串异常(<code>raise &quot;Error message&quot;</code>).</li>\n<li><p>模块或包应该定义自己的特定域的异常基类, 这个基类应该从内建的Exception类继承. 模块的异常基类应该叫做”Error”.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Error</span><span class=\"params\">(Exception)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>永远不要使用<code>except:</code>语句来捕获所有异常, 也不要捕获<code>Exception</code>或者<code>StandardError</code>, 除非你打算重新触发该异常, 或者你已经在当前线程的最外层(记得还是要打印一条错误消息). 在异常这方面, Python非常宽容,<code>except:</code>真的会捕获包括Python语法错误在内的任何错误. 使用<code>except:</code>很容易隐藏真正的bug.</p>\n</li>\n<li>尽量减少<code>try/except</code>块中的代码量. <code>try</code>块的体积越大, 期望之外的异常就越容易被触发. 这种情况下, <code>try/except</code>块将隐藏真正的错误.</li>\n<li>使用finally子句来执行那些无论try块中有没有异常都应该被执行的代码. 这对于清理资源常常很有用, 例如关闭文件.</li>\n<li><p>当捕获异常时, 使用 as 而不要用逗号. 例如</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> Error</span><br><span class=\"line\"><span class=\"keyword\">except</span> Error <span class=\"keyword\">as</span> error:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h4><blockquote>\n<p>Tip: 避免全局变量</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  定义在模块级的变量.</p>\n</li>\n<li><p>优点</p>\n<p>  偶尔有用.</p>\n</li>\n<li><p>缺点</p>\n<p>  导入时可能改变模块行为, 因为导入模块时会对模块级变量赋值.</p>\n</li>\n<li><p>结论</p>\n<p>  避免使用全局变量, 用类变量来代替. 但也有一些例外:</p>\n<ul>\n<li>脚本的默认选项.</li>\n<li>模块级常量. 例如:<code>PI = 3.14159</code>. 常量应该全大写, 用下划线连接.</li>\n<li>有时候用全局变量来缓存值或者作为函数返回值很有用.</li>\n<li>如果需要, 全局变量应该仅在模块内部可用, 并通过模块级的公共函数来访问.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"嵌套-局部-内部类或函数\"><a href=\"#嵌套-局部-内部类或函数\" class=\"headerlink\" title=\"嵌套/局部/内部类或函数\"></a>嵌套/局部/内部类或函数</h4><blockquote>\n<p>Tip: 鼓励使用嵌套/本地/内部类或函数</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  类可以定义在方法, 函数或者类中. 函数可以定义在方法或函数中. 封闭区间中定义的变量对嵌套函数是只读的.</p>\n</li>\n<li><p>优点</p>\n<p>  允许定义仅用于有效范围的工具类和函数.</p>\n</li>\n<li><p>缺点</p>\n<p>  嵌套类或局部类的实例不能序列化(pickled).</p>\n</li>\n<li><p>结论</p>\n<p>  推荐使用.</p>\n</li>\n</ul>\n<h4 id=\"列表推导-List-Comprehensions\"><a href=\"#列表推导-List-Comprehensions\" class=\"headerlink\" title=\"列表推导(List Comprehensions)\"></a>列表推导(List Comprehensions)</h4><blockquote>\n<p>Tip: 可以在简单情况下使用</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  列表推导(list comprehensions)与生成器表达式(generator expression)提供了一种简洁高效的方式来创建列表和迭代器, 而不必借助<code>map()</code>, <code>filter()</code>, 或者<code>lambda</code>.</p>\n</li>\n<li><p>优点</p>\n<p>  简单的列表推导可以比其它的列表创建方法更加清晰简单. 生成器表达式可以十分高效, 因为它们避免了创建整个列表.</p>\n</li>\n<li><p>缺点</p>\n<p>  复杂的列表推导或者生成器表达式可能难以阅读.</p>\n</li>\n<li><p>结论</p>\n<p>  适用于简单情况. 每个部分应该单独置于一行: 映射表达式, for语句, 过滤器表达式. 禁止多重for语句或过滤器表达式. 复杂情况下还是使用循环.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:</span><br><span class=\"line\">result = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x * y &gt; <span class=\"number\">10</span>:</span><br><span class=\"line\">            result.append((x, y))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> xrange(<span class=\"number\">5</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> xrange(<span class=\"number\">5</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x != y:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> z <span class=\"keyword\">in</span> xrange(<span class=\"number\">5</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> y != z:</span><br><span class=\"line\">                    <span class=\"keyword\">yield</span> (x, y, z)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> ((x, complicated_transform(x))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> long_generator_function(parameter)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">squares = [x * x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">eat(jelly_bean <span class=\"keyword\">for</span> jelly_bean <span class=\"keyword\">in</span> jelly_beans</span><br><span class=\"line\">    <span class=\"keyword\">if</span> jelly_bean.color == <span class=\"string\">'black'</span>)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:</span><br><span class=\"line\">result = [(x, y) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>) <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>) <span class=\"keyword\">if</span> x * y &gt; <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> ((x, y, z)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> xrange(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> xrange(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x != y</span><br><span class=\"line\">        <span class=\"keyword\">for</span> z <span class=\"keyword\">in</span> xrange(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> y != z)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"默认迭代器和操作符\"><a href=\"#默认迭代器和操作符\" class=\"headerlink\" title=\"默认迭代器和操作符\"></a>默认迭代器和操作符</h4><blockquote>\n<p>Tip: 如果类型支持, 就使用默认迭代器和操作符. 比如列表, 字典及文件等.</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  容器类型, 像字典和列表, 定义了默认的迭代器和关系测试操作符(<code>in</code>和<code>not in</code>)</p>\n</li>\n<li><p>优点</p>\n<p>  默认操作符和迭代器简单高效, 它们直接表达了操作, 没有额外的方法调用. 使用默认操作符的函数是通用的. 它可以用于支持该操作的任何类型.</p>\n</li>\n<li><p>缺点</p>\n<p>  你没法通过阅读方法名来区分对象的类型(例如, has_key()意味着字典). 不过这也是优点.</p>\n</li>\n<li><p>结论</p>\n<p>  如果类型支持, 就使用默认迭代器和操作符, 例如列表, 字典和文件. 内建类型也定义了迭代器方法. 优先考虑这些方法, 而不是那些返回列表的方法. 当然，这样遍历容器时，你将不能修改容器.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> adict: ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> key <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> adict: ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> obj <span class=\"keyword\">in</span> alist: ...</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> afile: ...</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> dict.iteritems(): ...</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:     <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> adict.keys(): ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> adict.has_key(key): ...</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> afile.readlines(): ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h4><blockquote>\n<p>Tip: 按需使用生成器.</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  所谓生成器函数, 就是每当它执行一次生成(yield)语句, 它就返回一个迭代器, 这个迭代器生成一个值. 生成值后, 生成器函数的运行状态将被挂起, 直到下一次生成.</p>\n</li>\n<li><p>优点</p>\n<p>  简化代码, 因为每次调用时, 局部变量和控制流的状态都会被保存. 比起一次创建一系列值的函数, 生成器使用的内存更少.</p>\n</li>\n<li><p>缺点</p>\n<p>  无</p>\n</li>\n<li><p>结论</p>\n<p>  鼓励使用. 注意在生成器函数的文档字符串中使用<code>Yields:</code>而不是<code>Returns:</code>.</p>\n</li>\n</ul>\n<h4 id=\"Lambda函数\"><a href=\"#Lambda函数\" class=\"headerlink\" title=\"Lambda函数\"></a>Lambda函数</h4><blockquote>\n<p>Tip: 适用于单行函数</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  与语句相反, lambda在一个表达式中定义匿名函数. 常用于为<code>map()</code>和<code>filter()</code>之类的高阶函数定义回调函数或者操作符.</p>\n</li>\n<li><p>优点</p>\n<p>  方便</p>\n</li>\n<li><p>缺点</p>\n<p>  比本地函数更难阅读和调试. 没有函数名意味着堆栈跟踪更难理解. 由于lambda函数通常只包含一个表达式, 因此其表达能力有限.</p>\n</li>\n<li><p>结论</p>\n<p>  适用于单行函数. 如果代码超过60-80个字符, 最好还是定义成常规(嵌套)函数.</p>\n<p>  对于常见的操作符，例如乘法操作符，使用<code>operator</code>模块中的函数以代替<code>lambda</code>函数. 例如, 推荐使用 <code>operator.mul</code>, 而不是<code>lambda x, y: x * y</code>.</p>\n</li>\n</ul>\n<h4 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a>条件表达式</h4><blockquote>\n<p>Tip: 适用于单行函数</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  条件表达式是对于if语句的一种更为简短的句法规则. 例如:<code>x = 1 if cond else 2</code>.</p>\n</li>\n<li><p>优点</p>\n<p>  比if语句更加简短和方便.</p>\n</li>\n<li><p>缺点</p>\n<p>  比if语句更加简短和方便.</p>\n</li>\n<li><p>结论</p>\n<p>  适用于单行函数. 在其他情况下，推荐使用完整的if语句.</p>\n</li>\n</ul>\n<h4 id=\"默认参数值\"><a href=\"#默认参数值\" class=\"headerlink\" title=\"默认参数值\"></a>默认参数值</h4><blockquote>\n<p>Tip: 适用于大部分情况.</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  你可以在函数参数列表的最后指定变量的值, 例如, def <code>foo(a, b = 0):</code>. 如果调用foo时只带一个参数, 则b被设为0. 如果带两个参数, 则b的值等于第二个参数.</p>\n</li>\n<li><p>优点</p>\n<p>  你经常会碰到一些使用大量默认值的函数, 但偶尔(比较少见)你想要覆盖这些默认值. 默认参数值提供了一种简单的方法来完成这件事, 你不需要为这些罕见的例外定义大量函数. 同时, Python也不支持重载方法和函数, 默认参数是一种”仿造”重载行为的简单方式.</p>\n</li>\n<li><p>缺点</p>\n<p>  默认参数只在模块加载时求值一次. 如果参数是列表或字典之类的可变类型, 这可能会导致问题. 如果函数修改了对象(例如向列表追加项), 默认值就被修改了.</p>\n</li>\n<li><p>结论</p>\n<p>  鼓励使用, 不过有如下注意事项:</p>\n<p>  不要在函数或方法定义中使用可变对象作为默认值.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(a, b=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> b <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            b = []</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(a, b=[])</span>:</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">No:  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(a, b=time.time<span class=\"params\">()</span>)</span>:</span>  <span class=\"comment\"># The time the module was loaded???</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">No:  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(a, b=FLAGS.my_thing)</span>:</span>  <span class=\"comment\"># sys.argv has not yet been parsed...</span></span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"属性-properties\"><a href=\"#属性-properties\" class=\"headerlink\" title=\"属性(properties)\"></a>属性(properties)</h4><blockquote>\n<p>Tip: 访问和设置数据成员时, 你通常会使用简单, 轻量级的访问和设置函数. 建议用属性（properties）来代替它们.</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  一种用于包装方法调用的方式. 当运算量不大, 它是获取和设置属性(attribute)的标准方式.</p>\n</li>\n<li><p>优点</p>\n<p>  通过消除简单的属性(attribute)访问时显式的get和set方法调用, 可读性提高了. 允许懒惰的计算. 用Pythonic的方式来维护类的接口. 就性能而言, 当直接访问变量是合理的, 添加访问方法就显得琐碎而无意义. 使用属性(properties)可以绕过这个问题. 将来也可以在不破坏接口的情况下将访问方法加上.</p>\n</li>\n<li><p>缺点</p>\n<p>  属性(properties)是在get和set方法声明后指定, 这需要使用者在接下来的代码中注意: set和get是用于属性(properties)的(除了用<code>@property</code>装饰器创建的只读属性). 必须继承自object类. 可能隐藏比如操作符重载之类的副作用. 继承时可能会让人困惑.</p>\n</li>\n<li><p>结论</p>\n<p>  你通常习惯于使用访问或设置方法来访问或设置数据, 它们简单而轻量. 不过我们建议你在新的代码中使用属性. 只读属性应该用<code>@property</code>装饰器 来创建.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self._score</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@score.setter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(value, int):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'score must be an integer!'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> value &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> value &gt; <span class=\"number\">100</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'score must between 0 ~ 100!'</span>)</span><br><span class=\"line\">    self._score = value</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"True-False的求值\"><a href=\"#True-False的求值\" class=\"headerlink\" title=\"True/False的求值\"></a>True/False的求值</h4><blockquote>\n<p>Tip: 尽可能使用隐式false</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  Python在布尔上下文中会将某些值求值为false. 按简单的直觉来讲, 就是所有的”空”值都被认为是false. 因此<code>0</code>，<code>None</code>,<code>[]</code>,<code>{}</code>,<code>&quot;&quot;</code>都被认为是false.</p>\n</li>\n<li><p>优点</p>\n<p>  使用Python布尔值的条件语句更易读也更不易犯错. 大部分情况下, 也更快.</p>\n</li>\n<li><p>缺点</p>\n<p>  对C/C++开发人员来说, 可能看起来有点怪.</p>\n</li>\n<li><p>结论</p>\n<p>  尽可能使用隐式的false, 例如: 使用<code>if foo:</code>而不是 <code>if foo != []:</code>. 不过还是有一些注意事项需要你铭记在心:</p>\n<ul>\n<li>永远不要用==或者!=来比较单件, 比如<code>None</code>. 使用<code>is</code>或者<code>is not</code>.</li>\n<li>注意: 当你写下<code>if x:</code>时, 你其实表示的是<code>if x is not None</code>. 例如: 当你要测试一个默认值是None的变量或参数是否被设为其它值. 这个值在布尔语义下可能是false!</li>\n<li>永远不要用<code>==</code>将一个布尔量与false相比较. 使用<code>if not x:</code>代替. 如果你需要区分<code>false</code>和<code>None</code>, 你应该用像<code>if not x and x is not None:</code>这样的语句.</li>\n<li>对于序列(字符串, 列表, 元组), 要注意空序列是false. 因此<code>if not seq:</code>或者<code>if seq:</code>比<code>if len(seq):</code>或<code>if not len(seq):</code>要更好.</li>\n<li><p>处理整数时, 使用隐式false可能会得不偿失(即不小心将None当做0来处理). 你可以将一个已知是整型(且不是len()的返回结果)的值与0比较.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> users:</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'no users'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> foo == <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.handle_zero()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i % <span class=\"number\">10</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.handle_multiple_of_ten()</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:     <span class=\"keyword\">if</span> len(users) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'no users'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> foo <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> foo:</span><br><span class=\"line\">            self.handle_zero()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> i % <span class=\"number\">10</span>:</span><br><span class=\"line\">            self.handle_multiple_of_ten()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意’0’(字符串)会被当做true.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"过时的语言特性\"><a href=\"#过时的语言特性\" class=\"headerlink\" title=\"过时的语言特性\"></a>过时的语言特性</h4><blockquote>\n<p>Tip: 尽可能使用字符串方法取代字符串模块. 使用函数调用语法取代apply(). 使用列表推导, for循环取代filter(), map()以及reduce().</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  当前版本的Python提供了大家通常更喜欢的替代品.</p>\n</li>\n<li><p>结论</p>\n<p>  我们不使用不支持这些特性的Python版本, 所以没理由不用新的方式.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:    words = foo.split(<span class=\"string\">':'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        [x[<span class=\"number\">1</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> my_list <span class=\"keyword\">if</span> x[<span class=\"number\">2</span>] == <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        map(math.sqrt, data)    <span class=\"comment\"># Ok. No inlined lambda expression.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        fn(*args, **kwargs)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:     words = string.split(foo, <span class=\"string\">':'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        map(<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">1</span>], filter(<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">2</span>] == <span class=\"number\">5</span>, my_list))</span><br><span class=\"line\"></span><br><span class=\"line\">        apply(fn, args, kwargs)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"词法作用域-Lexical-Scoping\"><a href=\"#词法作用域-Lexical-Scoping\" class=\"headerlink\" title=\"词法作用域(Lexical Scoping)\"></a>词法作用域(Lexical Scoping)</h4><blockquote>\n<p>Tip: 推荐使用</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  嵌套的Python函数可以引用外层函数中定义的变量, 但是不能够对它们赋值. 变量绑定的解析是使用词法作用域, 也就是基于静态的程序文本. 对一个块中的某个名称的任何赋值都会导致Python将对该名称的全部引用当做局部变量, 甚至是赋值前的处理. 如果碰到global声明, 该名称就会被视作全局变量.</p>\n<p>  一个使用这个特性的例子:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_adder</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Returns a function that adds numbers to a given number.\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adder</span><span class=\"params\">(summand1, summand2)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> summand1 + summand2</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> adder</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>优点</p>\n<p>  通常可以带来更加清晰, 优雅的代码. 尤其会让有经验的Lisp和Scheme(还有Haskell, ML等)程序员感到欣慰.</p>\n</li>\n<li><p>缺点</p>\n<p>  可能导致让人迷惑的bug. 例如下面这个依据 PEP-0227 的例子:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> i,</span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"comment\"># A bunch of code here</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x:  <span class=\"comment\"># Ah, i *is* local to Foo, so this is what Bar sees</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> i,</span><br><span class=\"line\">    bar()</span><br></pre></td></tr></table></figure>\n<p>  因此<code>foo([1, 2, 3])</code>会打印<code>1 2 3 3</code>, 不是<code>1 2 3 4</code>. x是一个列表, for循环其实是将x中的值依次赋给i.这样对i的赋值就隐式的发生了, 整个foo函数体中的i都会被当做局部变量, 包括bar()中的那个.</p>\n</li>\n<li><p>结论</p>\n<p>  鼓励使用</p>\n</li>\n</ul>\n<h4 id=\"函数与方法装饰器\"><a href=\"#函数与方法装饰器\" class=\"headerlink\" title=\"函数与方法装饰器\"></a>函数与方法装饰器</h4><blockquote>\n<p>Tip: 如果好处很显然, 就明智而谨慎的使用装饰器</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  用于函数及方法的装饰器 (也就是@标记). 最常见的装饰器是<code>@classmethod</code>和<code>@staticmethod</code>, 用于将常规函数转换成类方法或静态方法. 不过, 装饰器语法也允许用户自定义装饰器. 特别地, 对于某个函数<code>my_decorator</code>, 下面的两段代码是等效的:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @my_decorator</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># method body ...</span></span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># method body ...</span></span><br><span class=\"line\">    method = my_decorator(method)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>优点</p>\n<p>  优雅的在函数上指定一些转换. 该转换可能减少一些重复代码, 保持已有函数不变(enforce invariants), 等.</p>\n</li>\n<li><p>缺点</p>\n<p>  装饰器可以在函数的参数或返回值上执行任何操作, 这可能导致让人惊异的隐藏行为. 而且, 装饰器在导入时执行. 从装饰器代码的失败中恢复更加不可能.</p>\n</li>\n<li><p>结论</p>\n<p>  如果好处很显然, 就明智而谨慎的使用装饰器. 装饰器应该遵守和函数一样的导入和命名规则. 装饰器的python文档应该清晰的说明该函数是一个装饰器. 请为装饰器编写单元测试.</p>\n<p>  避免装饰器自身对外界的依赖(即不要依赖于文件, socket, 数据库连接等), 因为装饰器运行时这些资源可能不可用(由 pydoc 或其它工具导入). 应该保证一个用有效参数调用的装饰器在所有情况下都是成功的.</p>\n</li>\n</ul>\n<h4 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h4><blockquote>\n<p>Tip: 不要依赖内建类型的原子性.</p>\n</blockquote>\n<p>虽然Python的内建类型例如字典看上去拥有原子操作, 但是在某些情形下它们仍然不是原子的(即: 如果<strong>hash</strong>或<strong>eq</strong>被实现为Python方法)且它们的原子性是靠不住的. 你也不能指望原子变量赋值(因为这个反过来依赖字典).</p>\n<p>优先使用Queue模块的<code>Queue</code>数据类型作为线程间的数据通信方式. 另外, 使用threading模块及其锁原语(locking primitives). 了解条件变量的合适使用方式, 这样你就可以使用<code>threading.Condition</code>来取代低级别的锁了.</p>\n<h4 id=\"威力过大的特性\"><a href=\"#威力过大的特性\" class=\"headerlink\" title=\"威力过大的特性\"></a>威力过大的特性</h4><blockquote>\n<p>Tip: 避免使用这些特性</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  Python是一种异常灵活的语言, 它为你提供了很多花哨的特性, 诸如元类(metaclasses), 字节码访问, 任意编译(on-the-fly compilation), 动态继承, 对象父类重定义(object reparenting), 导入黑客(import hacks), 反射, 系统内修改(modification of system internals), 等等.</p>\n</li>\n<li><p>优点</p>\n<p>  强大的语言特性, 能让你的代码更紧凑.</p>\n</li>\n<li><p>缺点</p>\n<p>  使用这些很”酷”的特性十分诱人, 但不是绝对必要. 使用奇技淫巧的代码将更加难以阅读和调试. 开始可能还好(对原作者而言), 但当你回顾代码, 它们可能会比那些稍长一点但是很直接的代码更加难以理解.</p>\n</li>\n<li><p>结论</p>\n<p>  在你的代码中避免这些特性.</p>\n</li>\n</ul>\n<h2 id=\"风格规范\"><a href=\"#风格规范\" class=\"headerlink\" title=\"风格规范\"></a>风格规范</h2><h4 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h4><blockquote>\n<p>Tip: 不要在行尾加分号, 也不要用分号将两条命令放在同一行.</p>\n</blockquote>\n<h4 id=\"行长度\"><a href=\"#行长度\" class=\"headerlink\" title=\"行长度\"></a>行长度</h4><blockquote>\n<p>Tip: 每行不超过80个字符</p>\n</blockquote>\n<p>例外:</p>\n<pre><code>1. 长的导入模块语句\n1. 注释里的URL\n</code></pre><p>不要使用反斜杠连接行.</p>\n<p>Python会将<code>圆括号</code>,<code>中括号</code>和<code>花括号</code>中的行隐式的连接起来 , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: foo_bar(self, width, height, color=<span class=\"string\">'black'</span>, design=<span class=\"keyword\">None</span>, x=<span class=\"string\">'foo'</span>,</span><br><span class=\"line\">             emphasis=<span class=\"keyword\">None</span>, highlight=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (width == <span class=\"number\">0</span> <span class=\"keyword\">and</span> height == <span class=\"number\">0</span> <span class=\"keyword\">and</span></span><br><span class=\"line\">         color == <span class=\"string\">'red'</span> <span class=\"keyword\">and</span> emphasis == <span class=\"string\">'strong'</span>):</span><br></pre></td></tr></table></figure>\n<p>如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = (<span class=\"string\">'This will build a very long long '</span></span><br><span class=\"line\">     <span class=\"string\">'long long long long long long string'</span>)</span><br></pre></td></tr></table></figure>\n<p>在注释中，如果必要，将长的URL放在一行上。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Google 开源项目风格指南</span><br><span class=\"line\">latest</span><br><span class=\"line\"></span><br><span class=\"line\">Search docs</span><br><span class=\"line\">Google 开源项目风格指南 (中文版)</span><br><span class=\"line\">C++ 风格指南 - 内容目录</span><br><span class=\"line\">Objective-C 风格指南 - 内容目录</span><br><span class=\"line\">Python 风格指南 - 内容目录</span><br><span class=\"line\">扉页</span><br><span class=\"line\">背景</span><br><span class=\"line\">Python语言规范</span><br><span class=\"line\">Python风格规范</span><br><span class=\"line\">分号</span><br><span class=\"line\">行长度</span><br><span class=\"line\">括号</span><br><span class=\"line\">缩进</span><br><span class=\"line\">空行</span><br><span class=\"line\">空格</span><br><span class=\"line\">Shebang</span><br><span class=\"line\">注释</span><br><span class=\"line\">类</span><br><span class=\"line\">字符串</span><br><span class=\"line\">文件和sockets</span><br><span class=\"line\">TODO注释</span><br><span class=\"line\">导入格式</span><br><span class=\"line\">语句</span><br><span class=\"line\">访问控制</span><br><span class=\"line\">命名</span><br><span class=\"line\">Main</span><br><span class=\"line\">临别赠言</span><br><span class=\"line\">Shell 风格指南 - 内容目录</span><br><span class=\"line\"></span><br><span class=\"line\">Love Documentation? Write the Docs is a community full of people like you!</span><br><span class=\"line\">Sponsored · Ads served ethically</span><br><span class=\"line\">Google 开源项目风格指南</span><br><span class=\"line\">Docs » Python 风格指南 - 内容目录 » Python风格规范  Edit on GitHub</span><br><span class=\"line\">Python风格规范</span><br><span class=\"line\">分号</span><br><span class=\"line\">Tip</span><br><span class=\"line\"></span><br><span class=\"line\">不要在行尾加分号, 也不要用分号将两条命令放在同一行.</span><br><span class=\"line\"></span><br><span class=\"line\">行长度</span><br><span class=\"line\">Tip</span><br><span class=\"line\"></span><br><span class=\"line\">每行不超过<span class=\"number\">80</span>个字符</span><br><span class=\"line\"></span><br><span class=\"line\">例外:</span><br><span class=\"line\"></span><br><span class=\"line\">长的导入模块语句</span><br><span class=\"line\">注释里的URL</span><br><span class=\"line\">不要使用反斜杠连接行.</span><br><span class=\"line\"></span><br><span class=\"line\">Python会将 圆括号, 中括号和花括号中的行隐式的连接起来 , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.</span><br><span class=\"line\"></span><br><span class=\"line\">```Python</span><br><span class=\"line\">Yes: foo_bar(self, width, height, color=<span class=\"string\">'black'</span>, design=<span class=\"keyword\">None</span>, x=<span class=\"string\">'foo'</span>,</span><br><span class=\"line\">             emphasis=<span class=\"keyword\">None</span>, highlight=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (width == <span class=\"number\">0</span> <span class=\"keyword\">and</span> height == <span class=\"number\">0</span> <span class=\"keyword\">and</span></span><br><span class=\"line\">         color == <span class=\"string\">'red'</span> <span class=\"keyword\">and</span> emphasis == <span class=\"string\">'strong'</span>):</span><br></pre></td></tr></table></figure>\n<p>如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = (<span class=\"string\">'This will build a very long long '</span></span><br><span class=\"line\">     <span class=\"string\">'long long long long long long string'</span>)</span><br></pre></td></tr></table></figure>\n<p>在注释中，如果必要，将长的URL放在一行上。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:  <span class=\"comment\"># See details at</span></span><br><span class=\"line\">      <span class=\"comment\"># http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:  <span class=\"comment\"># See details at</span></span><br><span class=\"line\">     <span class=\"comment\"># http://www.example.com/us/developer/documentation/api/content/\\</span></span><br><span class=\"line\">     <span class=\"comment\"># v2.0/csv_file_name_extension_full_specification.html</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"括号\"><a href=\"#括号\" class=\"headerlink\" title=\"括号\"></a>括号</h4><blockquote>\n<p>Tip: 宁缺毋滥的使用括号</p>\n</blockquote>\n<p>除非是用于实现行连接, 否则不要在返回语句或条件语句中使用括号. 不过在元组两边使用括号是可以的.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: <span class=\"keyword\">if</span> foo:</span><br><span class=\"line\">         bar()</span><br><span class=\"line\">     <span class=\"keyword\">while</span> x:</span><br><span class=\"line\">         x = bar()</span><br><span class=\"line\">     <span class=\"keyword\">if</span> x <span class=\"keyword\">and</span> y:</span><br><span class=\"line\">         bar()</span><br><span class=\"line\">     <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> x:</span><br><span class=\"line\">         bar()</span><br><span class=\"line\">     <span class=\"keyword\">return</span> foo</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (x, y) <span class=\"keyword\">in</span> dict.items(): ...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:  <span class=\"keyword\">if</span> (x):</span><br><span class=\"line\">         bar()</span><br><span class=\"line\">     <span class=\"keyword\">if</span> <span class=\"keyword\">not</span>(x):</span><br><span class=\"line\">         bar()</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (foo)</span><br></pre></td></tr></table></figure>\n<h4 id=\"缩进\"><a href=\"#缩进\" class=\"headerlink\" title=\"缩进\"></a>缩进</h4><blockquote>\n<p>Tip: 用4个空格来缩进代码</p>\n</blockquote>\n<p>绝对不要用tab, 也不要tab和空格混用. 对于行连接的情况, 你应该要么垂直对齐换行的元素, 或者使用4空格的悬挂式缩进(这时第一行不应该有参数):</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:   <span class=\"comment\"># Aligned with opening delimiter</span></span><br><span class=\"line\">       foo = long_function_name(var_one, var_two,</span><br><span class=\"line\">                                var_three, var_four)</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"># Aligned with opening delimiter in a dictionary</span></span><br><span class=\"line\">       foo = &#123;</span><br><span class=\"line\">           long_dictionary_key: value1 +</span><br><span class=\"line\">                                value2,</span><br><span class=\"line\">           ...</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"># 4-space hanging indent; nothing on first line</span></span><br><span class=\"line\">       foo = long_function_name(</span><br><span class=\"line\">           var_one, var_two, var_three,</span><br><span class=\"line\">           var_four)</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"># 4-space hanging indent in a dictionary</span></span><br><span class=\"line\">       foo = &#123;</span><br><span class=\"line\">           long_dictionary_key:</span><br><span class=\"line\">               long_dictionary_value,</span><br><span class=\"line\">           ...</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:    <span class=\"comment\"># Stuff on first line forbidden</span></span><br><span class=\"line\">      foo = long_function_name(var_one, var_two,</span><br><span class=\"line\">          var_three, var_four)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># 2-space hanging indent forbidden</span></span><br><span class=\"line\">      foo = long_function_name(</span><br><span class=\"line\">        var_one, var_two, var_three,</span><br><span class=\"line\">        var_four)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># No hanging indent in a dictionary</span></span><br><span class=\"line\">      foo = &#123;</span><br><span class=\"line\">          long_dictionary_key:</span><br><span class=\"line\">              long_dictionary_value,</span><br><span class=\"line\">              ...</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h4><blockquote>\n<p>顶级定义之间空两行, 方法定义之间空一行</p>\n</blockquote>\n<p>顶级定义之间空两行, 比如函数或者类定义. 方法定义, 类定义与第一个方法之间, 都应该空一行. 函数或方法中, 某些地方要是你觉得合适, 就空一行.</p>\n<h4 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h4><blockquote>\n<p>按照标准的排版规范来使用标点两边的空格</p>\n</blockquote>\n<p>括号内不要有空格.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: spam(ham[<span class=\"number\">1</span>], &#123;eggs: <span class=\"number\">2</span>&#125;, [])</span><br><span class=\"line\">No:  spam( ham[ <span class=\"number\">1</span> ], &#123; eggs: <span class=\"number\">2</span> &#125;, [ ] )</span><br></pre></td></tr></table></figure>\n<p>不要在逗号, 分号, 冒号前面加空格, 但应该在它们后面加(除了在行尾).</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: <span class=\"keyword\">if</span> x == <span class=\"number\">4</span>:</span><br><span class=\"line\">         <span class=\"keyword\">print</span> x, y</span><br><span class=\"line\">     x, y = y, x</span><br><span class=\"line\">No:  <span class=\"keyword\">if</span> x == <span class=\"number\">4</span> :</span><br><span class=\"line\">         <span class=\"keyword\">print</span> x , y</span><br><span class=\"line\">     x , y = y , x</span><br></pre></td></tr></table></figure>\n<p>参数列表, 索引或切片的左括号前不应加空格.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: spam(<span class=\"number\">1</span>)</span><br><span class=\"line\">no: spam (<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Yes: dict[<span class=\"string\">'key'</span>] = list[index]</span><br><span class=\"line\">No:  dict [<span class=\"string\">'key'</span>] = list [index]</span><br></pre></td></tr></table></figure>\n<p>在二元操作符两边都加上一个空格, 比如赋值(=), 比较(==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not), 布尔(and, or, not). 至于算术操作符两边的空格该如何使用, 需要你自己好好判断. 不过两侧务必要保持一致.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: x == <span class=\"number\">1</span></span><br><span class=\"line\">No:  x&lt;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>当’=’用于指示关键字参数或默认参数值时, 不要在其两侧使用空格.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">complex</span><span class=\"params\">(real, imag=<span class=\"number\">0.0</span>)</span>:</span> <span class=\"keyword\">return</span> magic(r=real, i=imag)</span><br><span class=\"line\">No:  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">complex</span><span class=\"params\">(real, imag = <span class=\"number\">0.0</span>)</span>:</span> <span class=\"keyword\">return</span> magic(r = real, i = imag)</span><br></pre></td></tr></table></figure>\n<p>不要用空格来垂直对齐多行间的标记, 因为这会成为维护的负担(适用于:, #, =等):</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:</span><br><span class=\"line\">     foo = <span class=\"number\">1000</span>  <span class=\"comment\"># comment</span></span><br><span class=\"line\">     long_name = <span class=\"number\">2</span>  <span class=\"comment\"># comment that should not be aligned</span></span><br><span class=\"line\"></span><br><span class=\"line\">     dictionary = &#123;</span><br><span class=\"line\">         <span class=\"string\">\"foo\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">         <span class=\"string\">\"long_name\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">         &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No:</span><br><span class=\"line\">     foo       = <span class=\"number\">1000</span>  <span class=\"comment\"># comment</span></span><br><span class=\"line\">     long_name = <span class=\"number\">2</span>     <span class=\"comment\"># comment that should not be aligned</span></span><br><span class=\"line\"></span><br><span class=\"line\">     dictionary = &#123;</span><br><span class=\"line\">         <span class=\"string\">\"foo\"</span>      : <span class=\"number\">1</span>,</span><br><span class=\"line\">         <span class=\"string\">\"long_name\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">         &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Shebang\"><a href=\"#Shebang\" class=\"headerlink\" title=\"Shebang\"></a>Shebang</h4><blockquote>\n<p>大部分.py文件不必以#!作为文件的开始. 根据 PEP-394 , 程序的main文件应该以 #!/usr/bin/python2或者 #!/usr/bin/python3开始.</p>\n</blockquote>\n<p>在计算机科学中, Shebang (也称为Hashbang)是一个由井号和叹号构成的字符串行(#!), 其出现在文本文件的第一行的前两个字符. 在文件中存在Shebang的情况下, 类Unix操作系统的程序载入器会分析Shebang后的内容, 将这些内容作为解释器指令, 并调用该指令, 并将载有Shebang的文件路径作为该解释器的参数. 例如, 以指令#!/bin/sh开头的文件在执行时会实际调用/bin/sh程序.</p>\n<p>#!先用于帮助内核找到Python解释器, 但是在导入模块时, 将会被忽略. 因此只有被直接执行的文件中才有必要加入#!.</p>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><blockquote>\n<p>确保对模块, 函数, 方法和行内注释使用正确的风格</p>\n</blockquote>\n<h5 id=\"文档字符串\"><a href=\"#文档字符串\" class=\"headerlink\" title=\"文档字符串\"></a>文档字符串</h5><p>Python有一种独一无二的的注释方式: 使用文档字符串. 文档字符串是包, 模块, 类或函数里的第一个语句. 这些字符串可以通过对象的<code>__doc__</code>成员被自动提取, 并且被<code>pydoc</code>所用. (你可以在你的模块上运行pydoc试一把, 看看它长什么样). 我们对文档字符串的惯例是使用三重双引号<code>&quot;&quot;&quot;</code>. 一个文档字符串应该这样组织: 首先是一行以句号, 问号或惊叹号结尾的概述(或者该文档字符串单纯只有一行). 接着是一个空行. 接着是文档字符串剩下的部分, 它应该与文档字符串的第一行的第一个引号对齐. 下面有更多文档字符串的格式化规范.</p>\n<h5 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h5><p>每个文件应该包含一个许可样板. 根据项目使用的许可(例如, Apache 2.0, BSD, LGPL, GPL), 选择合适的样板.</p>\n<h5 id=\"函数和方法\"><a href=\"#函数和方法\" class=\"headerlink\" title=\"函数和方法\"></a>函数和方法</h5><p>下文所指的函数,包括函数, 方法, 以及生成器.</p>\n<p>一个函数必须要有文档字符串, 除非它满足以下条件:</p>\n<ul>\n<li>外部不可见</li>\n<li>非常短小</li>\n<li>简单明了</li>\n</ul>\n<p>文档字符串应该包含函数做什么, 以及输入和输出的详细描述. 通常, 不应该描述”怎么做”, 除非是一些复杂的算法. 文档字符串应该提供足够的信息, 当别人编写代码调用该函数时, 他不需要看一行代码, 只要看文档字符串就可以了. 对于复杂的代码, 在代码旁边加注释会比使用文档字符串更有意义.</p>\n<p>Args:</p>\n<pre><code>列出每个参数的名字, 并在名字后使用一个冒号和一个空格, 分隔对该参数的描述.如果描述太长超过了单行80字符,使用2或者4个空格的悬挂缩进(与文件其他部分保持一致). 描述应该包括所需的类型和含义. 如果一个函数接受*foo(可变长度参数列表)或者**bar (任意关键字参数), 应该详细列出*foo和**bar.\n</code></pre><p>Returns: (或者 Yields: 用于生成器)</p>\n<pre><code>描述返回值的类型和语义. 如果函数返回None, 这一部分可以省略.\n</code></pre><p>Raises:</p>\n<pre><code>列出与接口有关的所有异常.\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fetch_bigtable_rows</span><span class=\"params\">(big_table, keys, other_silly_variable=None)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Fetches rows from a Bigtable.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Retrieves rows pertaining to the given keys from the Table instance</span></span><br><span class=\"line\"><span class=\"string\">    represented by big_table.  Silly things may happen if</span></span><br><span class=\"line\"><span class=\"string\">    other_silly_variable is not None.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">        big_table: An open Bigtable Table instance.</span></span><br><span class=\"line\"><span class=\"string\">        keys: A sequence of strings representing the key of each table row</span></span><br><span class=\"line\"><span class=\"string\">            to fetch.</span></span><br><span class=\"line\"><span class=\"string\">        other_silly_variable: Another optional variable, that has a much</span></span><br><span class=\"line\"><span class=\"string\">            longer name than the other args, and which does nothing.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Returns:</span></span><br><span class=\"line\"><span class=\"string\">        A dict mapping keys to the corresponding table row data</span></span><br><span class=\"line\"><span class=\"string\">        fetched. Each row is represented as a tuple of strings. For</span></span><br><span class=\"line\"><span class=\"string\">        example:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        &#123;'Serak': ('Rigel VII', 'Preparer'),</span></span><br><span class=\"line\"><span class=\"string\">         'Zim': ('Irk', 'Invader'),</span></span><br><span class=\"line\"><span class=\"string\">         'Lrrr': ('Omicron Persei 8', 'Emperor')&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        If a key from the keys argument is missing from the dictionary,</span></span><br><span class=\"line\"><span class=\"string\">        then that row was not found in the table.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Raises:</span></span><br><span class=\"line\"><span class=\"string\">        IOError: An error occurred accessing the bigtable.Table object.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h5><p>类应该在其定义下有一个用于描述该类的文档字符串. 如果你的类有公共属性(Attributes), 那么文档中应该有一个属性(Attributes)段. 并且应该遵守和函数参数相同的格式.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Summary of class here.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Longer class information....</span></span><br><span class=\"line\"><span class=\"string\">    Longer class information....</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Attributes:</span></span><br><span class=\"line\"><span class=\"string\">        likes_spam: A boolean indicating if we like SPAM or not.</span></span><br><span class=\"line\"><span class=\"string\">        eggs: An integer count of the eggs we have laid.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, likes_spam=False)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Inits SampleClass with blah.\"\"\"</span></span><br><span class=\"line\">        self.likes_spam = likes_spam</span><br><span class=\"line\">        self.eggs = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">public_method</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Performs operation blah.\"\"\"</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"块注释和行注释\"><a href=\"#块注释和行注释\" class=\"headerlink\" title=\"块注释和行注释\"></a>块注释和行注释</h5><p>最需要写注释的是代码中那些技巧性的部分. 如果你在下次代码审查的时候必须解释一下, 那么你应该现在就给它写注释. 对于复杂的操作, 应该在其操作开始前写上若干行注释. 对于不是一目了然的代码, 应在其行尾添加注释.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># We use a weighted dictionary search to find out where i is in</span></span><br><span class=\"line\"><span class=\"comment\"># the array.  We extrapolate position based on the largest num</span></span><br><span class=\"line\"><span class=\"comment\"># in the array and the array size and then do binary search to</span></span><br><span class=\"line\"><span class=\"comment\"># get the exact number.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> i &amp; (i<span class=\"number\">-1</span>) == <span class=\"number\">0</span>:        <span class=\"comment\"># true iff i is a power of 2</span></span><br></pre></td></tr></table></figure>\n<p>为了提高可读性, 注释应该至少离开代码2个空格.</p>\n<p>另一方面, 绝不要描述代码. 假设阅读代码的人比你更懂Python, 他只是不知道你的代码要做什么.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># BAD COMMENT: Now go through the b array and make sure whenever i occurs</span></span><br><span class=\"line\"><span class=\"comment\"># the next element is i+1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"类-1\"><a href=\"#类-1\" class=\"headerlink\" title=\"类\"></a>类</h4><blockquote>\n<p>Tip: 如果一个类不继承自其它类, 就显式的从object继承. 嵌套类也一样.</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">         <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass</span><span class=\"params\">(ParentClass)</span>:</span></span><br><span class=\"line\">         <span class=\"string\">\"\"\"Explicitly inherits from another class already.\"\"\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No: <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>继承自<code>object</code>是为了使属性(properties)正常工作, 并且这样可以保护你的代码, 使其不受<a href=\"https://www.python.org/dev/peps/pep-3000/\" target=\"_blank\" rel=\"noopener\">PEP-3000</a> 的一个特殊的潜在不兼容性影响. 这样做也定义了一些特殊的方法, 这些方法实现了对象的默认语义, 包括<code>__new__</code>, <code>__init__</code>, <code>__delattr__</code>, <code>__getattribute__</code>, <code>__setattr__</code>, <code>__hash__</code>, <code>__repr__</code>, and <code>__str__</code> .</p>\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><blockquote>\n<p>Tip: 即使参数都是字符串, 使用%操作符或者格式化方法格式化字符串. 不过也不能一概而论, 你需要在+和%之间好好判定.</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: x = a + b</span><br><span class=\"line\">     x = <span class=\"string\">'%s, %s!'</span> % (imperative, expletive)</span><br><span class=\"line\">     x = <span class=\"string\">'&#123;&#125;, &#123;&#125;!'</span>.format(imperative, expletive)</span><br><span class=\"line\">     x = <span class=\"string\">'name: %s; score: %d'</span> % (name, n)</span><br><span class=\"line\">     x = <span class=\"string\">'name: &#123;&#125;; score: &#123;&#125;'</span>.format(name, n)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No: x = <span class=\"string\">'%s%s'</span> % (a, b)  <span class=\"comment\"># use + in this case</span></span><br><span class=\"line\">    x = <span class=\"string\">'&#123;&#125;&#123;&#125;'</span>.format(a, b)  <span class=\"comment\"># use + in this case</span></span><br><span class=\"line\">    x = imperative + <span class=\"string\">', '</span> + expletive + <span class=\"string\">'!'</span></span><br><span class=\"line\">    x = <span class=\"string\">'name: '</span> + name + <span class=\"string\">'; score: '</span> + str(n)</span><br></pre></td></tr></table></figure>\n<p>避免在循环中用+和+=操作符来累加字符串. 由于字符串是不可变的, 这样做会创建不必要的临时对象, 并且导致二次方而不是线性的运行时间. 作为替代方案, 你可以将每个子串加入列表, 然后在循环结束后用<code>.join</code>连接列表. (也可以将每个子串写入一个<code>cStringIO.StringIO</code>缓存中.)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No: employee_table = <span class=\"string\">'&lt;table&gt;'</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> last_name, first_name <span class=\"keyword\">in</span> employee_list:</span><br><span class=\"line\">        employee_table += <span class=\"string\">'&lt;tr&gt;&lt;td&gt;%s, %s&lt;/td&gt;&lt;/tr&gt;'</span> % (last_name, first_name)</span><br><span class=\"line\">    employee_table += <span class=\"string\">'&lt;/table&gt;'</span></span><br></pre></td></tr></table></figure>\n<p>在同一个文件中, 保持使用字符串引号的一致性. 使用单引号’或者双引号”之一用以引用字符串, 并在同一文件中沿用. 在字符串内可以使用另外一种引号, 以避免在字符串中使用. PyLint已经加入了这一检查.</p>\n<p>为多行字符串使用三重双引号”“”而非三重单引号’‘’. 当且仅当项目中使用单引号’来引用字符串时, 才可能会使用三重’‘’为非文档字符串的多行字符串来标识引用. 文档字符串必须使用三重双引号”“”. 不过要注意, 通常用隐式行连接更清晰, 因为多行字符串与程序其他部分的缩进方式不一致.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"This is much nicer.\\n\"</span></span><br><span class=\"line\">           <span class=\"string\">\"Do it this way.\\n\"</span>)</span><br><span class=\"line\">No:</span><br><span class=\"line\">      <span class=\"keyword\">print</span> <span class=\"string\">\"\"\"This is pretty ugly.</span></span><br><span class=\"line\"><span class=\"string\">  Don't do this.</span></span><br><span class=\"line\"><span class=\"string\">  \"\"\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"文件和sockets\"><a href=\"#文件和sockets\" class=\"headerlink\" title=\"文件和sockets\"></a>文件和sockets</h4><blockquote>\n<p>Tip: 在文件和sockets结束时, 显式的关闭它.</p>\n</blockquote>\n<p>除文件外, sockets或其他类似文件的对象在没有必要的情况下打开, 会有许多副作用, 例如:</p>\n<ol>\n<li>它们可能会消耗有限的系统资源, 如文件描述符. 如果这些资源在使用后没有及时归还系统, 那么用于处理这些对象的代码会将资源消耗殆尽.</li>\n<li>持有文件将会阻止对于文件的其他诸如移动、删除之类的操作.</li>\n<li>仅仅是从逻辑上关闭文件和sockets, 那么它们仍然可能会被其共享的程序在无意中进行读或者写操作. 只有当它们真正被关闭后, 对于它们尝试进行读或者写操作将会抛出异常, 并使得问题快速显现出来.</li>\n</ol>\n<p>而且, 幻想当文件对象析构时, 文件和sockets会自动关闭, 试图将文件对象的生命周期和文件的状态绑定在一起的想法, 都是不现实的. 因为有如下原因:</p>\n<ol>\n<li>没有任何方法可以确保运行环境会真正的执行文件的析构. 不同的Python实现采用不同的内存管理技术, 比如延时垃圾处理机制. 延时垃圾处理机制可能会导致对象生命周期被任意无限制的延长.</li>\n<li>对于文件意外的引用,会导致对于文件的持有时间超出预期(比如对于异常的跟踪, 包含有全局变量等).</li>\n</ol>\n<p>推荐使用<code>&quot;with&quot;</code>语句 以管理文件:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"hello.txt\"</span>) <span class=\"keyword\">as</span> hello_file:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> hello_file:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> line</span><br></pre></td></tr></table></figure>\n<p>对于不支持使用<code>&quot;with&quot;</code>语句的类似文件的对象,使用 contextlib.closing():</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> contextlib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> contextlib.closing(urllib.urlopen(<span class=\"string\">\"http://www.python.org/\"</span>)) <span class=\"keyword\">as</span> front_page:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> front_page:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> line</span><br></pre></td></tr></table></figure>\n<h4 id=\"TODO注释\"><a href=\"#TODO注释\" class=\"headerlink\" title=\"TODO注释\"></a>TODO注释</h4><blockquote>\n<p>Tip: 为临时代码使用TODO注释, 它是一种短期解决方案. 不算完美, 但够好了.</p>\n</blockquote>\n<p>TODO注释应该在所有开头处包含<code>&quot;TODO&quot;</code>字符串, 紧跟着是用括号括起来的你的名字, email地址或其它标识符. 然后是一个可选的冒号. 接着必须有一行注释, 解释要做什么. 主要目的是为了有一个统一的TODO格式, 这样添加注释的人就可以搜索到(并可以按需提供更多细节). 写了TODO注释并不保证写的人会亲自解决问题. 当你写了一个TODO, 请注上你的名字.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># TODO(kl@gmail.com): Use a \"*\" here for string repetition.</span></span><br><span class=\"line\"><span class=\"comment\"># TODO(Zeke) Change this to use relations.</span></span><br></pre></td></tr></table></figure>\n<p>如果你的TODO是”将来做某事”的形式, 那么请确保你包含了一个指定的日期(“2009年11月解决”)或者一个特定的事件(“等到所有的客户都可以处理XML请求就移除这些代码”).</p>\n<h4 id=\"导入格式\"><a href=\"#导入格式\" class=\"headerlink\" title=\"导入格式\"></a>导入格式</h4><blockquote>\n<p>每个导入应该独占一行</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: <span class=\"keyword\">import</span> os</span><br><span class=\"line\">     <span class=\"keyword\">import</span> sys</span><br><span class=\"line\">No:  <span class=\"keyword\">import</span> os, sys</span><br></pre></td></tr></table></figure>\n<p>导入总应该放在文件顶部, 位于模块注释和文档字符串之后, 模块全局变量和常量之前. 导入应该按照从最通用到最不通用的顺序分组:</p>\n<ol>\n<li>标准库导入</li>\n<li>第三方库导入</li>\n<li>应用程序指定导入</li>\n</ol>\n<p>每种分组中, 应该根据每个模块的完整包路径按字典序排序, 忽略大小写.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> foo</span><br><span class=\"line\"><span class=\"keyword\">from</span> foo <span class=\"keyword\">import</span> bar</span><br><span class=\"line\"><span class=\"keyword\">from</span> foo.bar <span class=\"keyword\">import</span> baz</span><br><span class=\"line\"><span class=\"keyword\">from</span> foo.bar <span class=\"keyword\">import</span> Quux</span><br><span class=\"line\"><span class=\"keyword\">from</span> Foob <span class=\"keyword\">import</span> ar</span><br></pre></td></tr></table></figure>\n<h4 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h4><blockquote>\n<p>在Python中, 对于琐碎又不太重要的访问函数, 你应该直接使用公有变量来取代它们, 这样可以避免额外的函数调用开销. 当添加更多功能时, 你可以用属性(property)来保持语法的一致性.</p>\n</blockquote>\n<p>另一方面, 如果访问更复杂, 或者变量的访问开销很显著, 那么你应该使用像 get_foo() 和 set_foo() 这样的函数调用. 如果之前的代码行为允许通过属性(property)访问 , 那么就不要将新的访问函数与属性绑定. 这样, 任何试图通过老方法访问变量的代码就没法运行, 使用者也就会意识到复杂性发生了变化.</p>\n<h4 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h4><blockquote>\n<p>Tip: module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name.</p>\n</blockquote>\n<p>应该避免的名称</p>\n<ul>\n<li>单字符名称, 除了计数器和迭代器.</li>\n<li>包/模块名中的连字符(-)</li>\n<li>双下划线开头并结尾的名称(Python保留, 例如<strong>init</strong>)</li>\n</ul>\n<p>命名约定</p>\n<ul>\n<li>所谓”内部(Internal)”表示仅模块内可用, 或者, 在类内是保护或私有的.</li>\n<li>用单下划线(_)开头表示模块变量或函数是protected的(使用<code>from x import x</code>时不会包含).</li>\n<li>用双下划线(__)开头的实例变量或方法表示类内私有.</li>\n<li>将相关的类和顶级函数放在同一个模块里. 不像Java, 没必要限制一个类一个模块.</li>\n<li>对类名使用大写字母开头的单词(如CapWords, 即Pascal风格), 但是模块名应该用小写加下划线的方式(如lower_with_under.py). 尽管已经有很多现存的模块使用类似于CapWords.py这样的命名, 但现在已经不鼓励这样做, 因为如果模块名碰巧和类名一致, 这会让人困扰.</li>\n</ul>\n<p>Python之父Guido推荐的规范</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:center\">Public</th>\n<th style=\"text-align:center\">Internal</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Modules</td>\n<td style=\"text-align:center\">lower_with_under</td>\n<td style=\"text-align:center\">_lower_with_under</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Packages</td>\n<td style=\"text-align:center\">lower_with_under</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Classes</td>\n<td style=\"text-align:center\">CapWords</td>\n<td style=\"text-align:center\">_CapWords</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Exceptions</td>\n<td style=\"text-align:center\">CapWords</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Functions</td>\n<td style=\"text-align:center\">lower_with_under()</td>\n<td style=\"text-align:center\">_lower_with_under()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Global/Class Constants</td>\n<td style=\"text-align:center\">CAPS_WITH_UNDER</td>\n<td style=\"text-align:center\">_CAPS_WITH_UNDER</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Global/Class Variables</td>\n<td style=\"text-align:center\">lower_with_under</td>\n<td style=\"text-align:center\">_lower_with_under</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Instance Variables</td>\n<td style=\"text-align:center\">lower_with_under</td>\n<td style=\"text-align:center\">_lower_with_under (protected) or __lower_with_under (private)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Method Names</td>\n<td style=\"text-align:center\">lower_with_under()</td>\n<td style=\"text-align:center\">_lower_with_under() (protected) or __lower_with_under() (private)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Function/Method Parameters</td>\n<td style=\"text-align:center\">lower_with_under</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Local Variables</td>\n<td style=\"text-align:center\">lower_with_under</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Main\"><a href=\"#Main\" class=\"headerlink\" title=\"Main\"></a>Main</h4><blockquote>\n<p>Tip: 即使是一个打算被用作脚本的文件, 也应该是可导入的. 并且简单的导入不应该导致这个脚本的主功能(main functionality)被执行, 这是一种副作用. 主功能应该放在一个main()函数中.</p>\n</blockquote>\n<p>在Python中, pydoc以及单元测试要求模块必须是可导入的. 你的代码应该在执行主程序前总是检查<code>if __name__ == &#39;__main__&#39;</code>, 这样当模块被导入时主程序就不会被执行.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">      ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>所有的顶级代码在模块导入时都会被执行. 要小心不要去调用函数, 创建对象, 或者执行那些不应该在使用pydoc时执行的操作.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>请务必保持代码的一致性。</p>\n<p>如果你正在编辑代码, 花几分钟看一下周边代码, 然后决定风格. 如果它们在所有的算术操作符两边都使用空格, 那么你也应该这样做. 如果它们的注释都用标记包围起来, 那么你的注释也要这样.</p>\n<p>制定风格指南的目的在于让代码有规可循, 这样人们就可以专注于”你在说什么”, 而不是”你在怎么说”. 我们在这里给出的是全局的规范, 但是本地的规范同样重要. 如果你加到一个文件里的代码和原有代码大相径庭, 它会让读者不知所措. 避免这种情况.</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Sep 10 2018 21:18:12 GMT+0800 (中国标准时间)","title":"Google Python 编程风格","path":"Google Python风格指南/","eyeCatchImage":null,"excerpt":"<h1 id=\"Google-Python-Code-Style\"><a href=\"#Google-Python-Code-Style\" class=\"headerlink\" title=\"Google Python Code Style\"></a>Google Python Code Style</h1><p>Python相较于C++来说，语法和写法都比较简单，所以不像C++一样有那么多的规范，主要从<em>语言规范</em>和<em>风格规范</em>两个方面制定规范。</p>","date":"2018-05-19T16:00:00.000Z","pv":0,"totalPV":0,"categories":"编码技能","tags":["Python","代码风格"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"layout":"post","title":"Google C++ 编程风格","subtitle":"养成良好的编程习惯和风格，让代码像诗一样优美","date":"2018-04-25T16:00:00.000Z","copyright":true,"photos":["images/tabs-or-spaces.png"],"_content":"\n# Google C++ Code Style\n\nC++ 是 Google 大部分开源项目的主要编程语言。正如每个 C++ 程序员都知道的， C++ 有很多强大的特性， 但这种强大不可避免的导致它走向复杂，使代码更容易产生 bug， 难以阅读和维护。\n\n本指南的目的是通过详细阐述 C++ 注意事项来驾驭其复杂性。这些规则在保证代码易于管理的同时， 也能高效使用 C++ 的语言特性。\n\n<!-- more -->\n\n风格， 亦被称作可读性， 也就是指导 C++ 编程的约定. 使用术语 “风格” 有些用词不当， 因为这些习惯远不止源代码文件格式化这么简单。\n\n使代码易于管理的方法之一是加强代码一致性。让任何程序员都可以快速读懂你的代码这点非常重要。保持统一编程风格并遵守约定意味着可以很容易根据 “模式匹配” 规则来推断各种标识符的含义。创建通用， 必需的习惯用语和模式可以使代码更容易理解。在一些情况下可能有充分的理由改变某些编程风格， 但我们还是应该遵循一致性原则，尽量不这么做。\n\n## 头文件\n\n一个`.cc/.cpp`文件都应该对应一个`.h`文件。也有些常见例外，例如单元测试代码和只包含`main()`入口函数的源文件。\n\n#### Self-contained 头文件\n\n> Tip: 头文件应该能够自给自足（**self-contained**，也就是可以作为第一个头文件被引入），简单来说就是头文件中依赖的其他声明要在头文件中定义清楚，而不能依赖在`.cc`文件中调整引入顺序解决依赖。\n\n如果`.h`文件声明了一个模板或内联函数，同时也在该文件加以定义。凡是有用到这些的`.cc`文件，就得统统包含该头文件，否则程序可能会在构建中链接失败。\n\n有个例外：如果某函数模板为所有相关模板参数显式实例化，或本身就是某类的一个私有成员，那么它就只能定义在实例化该模板的 .cc 文件里。\n\n#### #define保护\n\n> Tip: 所有头文件都应该使用 `#define` 来防止头文件被多重包含， 命名格式当是: `<PROJECT>_<PATH>_<FILE>_H_`。\n\n为保证唯一性， 头文件的命名应该基于所在项目源代码树的全路径. 例如， 项目 `foo`中的头文件`foo/src/bar/baz.h`可按如下方式保护:\n\n```C++\n#ifndef FOO_BAR_BAZ_H_\n#define FOO_BAR_BAZ_H_\n...\n#endif // FOO_BAR_BAZ_H_\n```\n\n`#define` 与 `#pragma once`区别\n\n`#pragma once`是编译相关，就是说这个编译系统上能用，但在其他编译系统不一定可以，也就是说移植性差。\n\n所以尽量使用`#ifndef`来避免头文件重复引用。\n\n#### 前置声明\n\n> Tip: 尽可能地**避免使用**前置声明。使用 #include 包含需要的头文件即可。\n\n所谓「前置声明」（forward declaration）是类、函数和模板的纯粹声明，没伴随着其定义。\n\n- 优点\n\n    - 前置声明能够节省编译时间，多余的`#include`会迫使编译器展开更多的文件，处理更多的输入。\n    - 前置声明能够节省不必要的重新编译的时间。`#include`使代码因为头文件中无关的改动而被重新编译多次。\n\n- 缺点\n\n    - 前置声明隐藏了依赖关系，头文件改动时，用户的代码会跳过必要的重新编译过程。\n    - 前置声明可能会被库的后续更改所破坏。前置声明函数或模板有时会妨碍头文件开发者变动其API。例如扩大形参类型，加个自带默认参数的模板形参等等。\n    - 前置声明来自命名空间 `std::`的symbol时，其**行为未定义**。\n    - 很难判断什么时候该用前置声明，什么时候该用`#include`。极端情况下，用前置声明代替`includes`甚至都会暗暗地改变代码的含义：\n        ```C++\n        // b.h:\n        struct B {};\n        struct D : B {}\n\n        // good_user.cc:\n        #include \"b.h\"\n        void f(B*);\n        void f(void*);\n        void test(D* x) { f(x); }  // calls f(B*)\n        ```\n        如果`#include`被 B 和 D 的前置声明替代，`test()`就会调用`f(void*)`。\n    - 前置声明了不少来自头文件的symbol时，就会比单单一行的**include冗长**。\n    - 仅仅为了能前置声明而重构代码（比如用指针成员代替对象成员）会使代码变得更慢更复杂。\n\n- 结论\n\n    - 尽量避免前置声明那些定义在其他项目中的实体。\n    - 函数：总是使用`#include`。\n    - 类模板：优先使用`#include`。\n\n\n#### 内联函数\n\n> Tip: 只有当函数只有**10行甚至更少**时才将其定义为内联函数。\n\n- 定义\n\n    当函数被声明为内联函数之后， 编译器会将其内联展开， 而不是按通常的函数调用机制进行调用。\n\n- 优点\n\n    只要内联的函数体较小， 内联该函数可以令目标代码更加高效. 对于存取函数以及其它函数体比较短， 性能关键的函数， 鼓励使用内联。\n\n- 缺点\n\n    滥用内联将导致程序变得更慢。内联可能使目标代码量或增或减， 这取决于内联函数的大小。内联非常短小的存取函数通常会减少代码大小， 但内联一个相当大的函数将戏剧性的增加代码大小。现代处理器由于更好的利用了指令缓存， 小巧的代码往往执行更快。\n\n- 结论\n\n    一个较为合理的经验准则是， **不要内联超过10行**的函数。**谨慎对待析构函数**， 析构函数往往比其表面看起来要更长， 因为有隐含的成员和基类析构函数被调用!\n\n    有些函数即使声明为内联的也不一定会被编译器内联， 这点很重要; 比如**虚函数**和**递归函数**就不会被正常内联。通常， 递归函数不应该声明成内联函数，递归调用堆栈的展开并不像循环那么简单， 比如递归层数在编译时可能是未知的， 大多数编译器都不支持内联递归函数。虚函数内联的主要原因则是想把它的函数体放在类定义内， 为了图个方便， 抑或是当作文档描述其行为， 比如精短的存取函数.\n\n#### `#include`的路径及顺序\n\n> Tip: 使用标准的头文件包含顺序可增强可读性， 避免隐藏依赖: 相关头文件， C 库， C++ 库， 其他库的 .h， 本项目内的 .h。\n\n项目内头文件应按照项目源代码目录树结构排列， 避免使用 UNIX 特殊的快捷目录`.`(当前目录)或`..`(上级目录). 例如， `google-awesome-project/src/base/logging.h`应该按如下方式包含:\n\n> `#include \"base/logging.h\"`\n\n又如，`dir/foo.cc`或`dir/foo_test.cc`的主要作用是实现或测试`dir2/foo2.h`的功能，`foo.cc`中包含头文件的次序如下：\n\n1. `dir2/foo2.h`（优先位置，详情如下）\n1. C 系统文件\n1. C++ 系统文件\n1. 其他库的`.h`文件\n1. 本项目内`.h`文件\n\n这种优先的顺序排序保证当`dir2/foo2.h`遗漏某些必要的库时，`dir/foo.cc`或`dir/foo_test.cc`的构建会立刻中止。因此这一条规则保证维护这些文件的人们首先看到构建中止的消息而不是维护其他包的人们。\n\n您所依赖的符号(symbols)被哪些头文件所定义，您就应该包含`(include)`哪些头文件，前置声明(forward declarations)情况除外。比如您要用到`bar.h`中的某个符号， 哪怕您所包含的 `foo.h`已经包含了`bar.h`， 也照样得包含`bar.h`， 除非 `foo.h`有明确说明它会自动向您提供`bar.h`中的symbol。 不过，凡是cc文件所对应的「相关头文件」已经包含的，就不用再重复包含进其cc文件里面了，就像`foo.cc`只包含`foo.h`就够了，不用再管后者所包含的其它内容。\n\n举例来说，`google-awesome-project/src/foo/internal/fooserver.cc`的包含次序如下:\n\n```C++\n#include \"foo/public/fooserver.h\" // 优先位置\n\n#include <sys/types.h>\n#include <unistd.h>\n\n#include <hash_map>\n#include <vector>\n\n#include \"base/basictypes.h\"\n#include \"base/commandlineflags.h\"\n#include \"foo/public/bar.h\"\n```\n\n#### 小结\n\n1. 避免多重包含\n1. 头文件尽量避免使用前置声明，直接`include`\n1. 内联函数最好少于10行。类内部的函数一般会自动内联。所以某函数一旦不需要内联，其定义就不要再放在头文件里，而是放到对应的`.cc`文件里\n1. 包含文件的次序除了美观之外， 最重要的是可以减少隐藏依赖，使每个头文件在“最需要编译”的地方编译。\n\n## 作用域\n\n#### 命名空间\n\n> Tip: 鼓励在`.cc`文件内使用匿名命名空间或`static`声明. 使用具名的命名空间时，其名称可基于项目名或相对路径。**禁止使用using指示(using-directive e.g. using namespace foo;)**。禁止使用内联命名空间(inline namespace)。\n\n- 定义\n\n    命名空间将全局作用域细分为独立的， 具名的作用域， 可有效防止全局作用域的命名冲突。\n\n- 优点\n\n    类已经提将命名分割在不同类的作用域内， 命名空间在这基础上又封装了一层。\n\n    举例来说， 两个不同项目的全局作用域都有一个类`Foo`， 这样在编译或运行时造成冲突。如果每个项目将代码置于不同命名空间中，`project1::Foo`和`project2::Foo`作为不同符号自然不会冲突。\n\n    内联命名空间会自动把内部的标识符放到外层作用域，比如：\n\n    ```C++\n    namespace X {\n    inline namespace Y {\n    void foo();\n    }  // namespace Y\n    }  // namespace X\n    ```\n\n    `X::Y::foo()`与`X::foo()`彼此可代替。内联命名空间主要用来保持跨版本的 ABI 兼容性。\n\n- 缺点\n\n    命名空间具有迷惑性， 因为它们使得区分两个相同命名所指代的定义更加困难。\n\n    内联命名空间很容易令人迷惑，毕竟其内部的成员不再受其声明所在命名空间的限制。内联命名空间只在大型版本控制里有用。\n\n- 结论\n\n    根据下文将要提到的策略合理使用命名空间。\n    - 遵守`命名空间命名`中的规则。\n    - 像之前的几个例子中一样，在命名空间的最后注释出命名空间的名字。\n    - 用命名空间把文件包含， 以及类的前置声明**以外**的整个源文件封装起来， 以区别于其它命名空间:\n\n        ```C++\n        // .h 文件\n        namespace mynamespace {\n\n        // 所有声明都置于命名空间中\n        // 注意不要使用缩进\n        class MyClass {\n            public:\n            ...\n            void Foo();\n        };\n\n        } // namespace mynamespace\n        ```\n\n        ```C++\n        // .cc 文件\n        namespace mynamespace {\n\n        // 函数定义都置于命名空间中\n        void MyClass::Foo() {\n            ...\n        }\n\n        } // namespace mynamespace\n        ```\n    - 不要在命名空间`std`内声明任何东西， 包括标准库的类前置声明。在`std`命名空间声明实体是未定义的行为， 会导致如不可移植。声明标准库下的实体， 需要包含对应的头文件。\n    - 不应该使用`using`指示 引入整个命名空间的标识符号。\n        ```C++\n        // 禁止 —— 污染命名空间\n        using namespace foo;\n        ```\n    - 不要在头文件中使用`命名空间别名`除非显式标记内部命名空间使用。因为任何在头文件中引入的命名空间都会成为公开API的一部分。\n    - 禁止用内联命名空间\n\n#### 匿名命名空间和静态变量\n\n> Tip: 在`.cc`文件中定义一个不需要被外部引用的变量时，可以将它们放在匿名命名空间或声明为`static`。但是不要在`.h`文件中这么做。\n\n- 定义\n\n    所有置于匿名命名空间的声明都具有内部链接性，函数和变量可以经由声明为`static`拥有内部链接性，这意味着你在这个文件中声明的这些标识符都不能在另一个文件中被访问。即使两个文件声明了完全一样名字的标识符，它们所指向的实体实际上是完全不同的。\n\n- 结论\n\n    推荐、鼓励在`.cc`中对于不需要在其他地方引用的标识符使用内部链接性声明，但是不要在`.h`中使用。\n\n    匿名命名空间的声明和具名的格式相同，在最后注释上`namespace`:\n\n    ```C++\n    namespace {\n    ...\n    }  // namespace\n    ```\n\n#### 非成员函数、静态成员函数和全局函数\n\n> Tip: 使用静态成员函数或命名空间内的非成员函数，尽量不要用裸的全局函数。将一系列函数直接置于命名空间中，不要用类的静态方法模拟出命名空间的效果，类的静态方法应当和类的实例或静态数据紧密相关。\n\n- 优点\n\n    某些情况下，非成员函数和静态成员函数是非常有用的，将非成员函数放在命名空间内可避免污染全局作用域。\n\n- 缺点\n\n    将非成员函数和静态成员函数作为新类的成员或许更有意义，当它们需要访问外部资源或具有重要的依赖关系时更是如此。\n\n- 结论\n\n    有时，把函数的定义同类的实例脱钩是有益的，甚至是必要的。这样的函数可以被定义成静态成员，或是非成员函数。非成员函数不应依赖于外部变量，应尽量置于某个命名空间内。相比单纯为了封装若干不共享任何静态数据的静态成员函数而创建类，不如使用`2.1命名空间`。举例而言，对于头文件`myproject/foo_bar.h`，应当使用\n\n    ```C++\n    namespace myproject {\n    namespace foo_bar {\n    void Function1();\n    void Function2();\n    }  // namespace foo_bar\n    }  // namespace myproject\n    ```\n\n    而非\n\n    ```C++\n    namespace myproject {\n    class FooBar {\n    public:\n    static void Function1();\n    static void Function2();\n    };\n    }  // namespace myproject\n    ```\n\n    定义在同一编译单元的函数，被其他编译单元直接调用可能会引入不必要的耦合和链接时依赖；静态成员函数对此尤其敏感。可以考虑提取到新类中，或者将函数置于独立库的命名空间内。\n\n    如果你必须定义非成员函数，又只是在`.cc`文件中使用它，可使用`匿名命名空间`或`static`链接关键字(如`static int Foo() {...}`) 限定其作用域。\n\n#### 局部变量\n\n> Tip: 将函数变量尽可能置于最小作用域内, 并在变量声明时进行初始化。\n\nC++允许在函数的任何位置声明变量。我们提倡在尽可能小的作用域中声明变量，离第一次使用越近越好。这使得代码浏览者更容易定位变量声明的位置, 了解变量的类型和初始值。特别是，应使用初始化的方式替代声明再赋值, 比如:\n\n```C++\nint i;\ni = f(); // 坏——初始化和声明分离\n```\n\n```C++\nint j = g(); // 好——初始化时声明\n```\n\n```C++\nvector<int> v;\nv.push_back(1); // 用花括号初始化更好\nv.push_back(2);\n```\n\n```C++\nvector<int> v = {1, 2}; // 好——v 一开始就初始化\n```\n\n属于`if`,`while`和`for`语句的变量应当在这些语句中正常地声明，这样子这些变量的作用域就被限制在这些语句中了，举例而言:\n\n```C++\nwhile (const char* p = strchr(str, '/')) str = p + 1;\n```\n\n有一个例外, 如果变量是一个对象, 每次进入作用域都要调用其构造函数, 每次退出作用域都要调用其析构函数。这会导致效率降低。\n\n\n```C++\n// 低效的实现\nfor (int i = 0; i < 1000000; ++i) {\n    Foo f;    // 构造函数和析构函数分别调用 1000000 次!\n    f.DoSomething(i);\n}\n```\n\n```C++\nFoo f;    // 构造函数和析构函数只调用 1 次\nfor (int i = 0; i < 1000000; ++i) {\n    f.DoSomething(i);\n}\n```\n\n#### 静态和全局变量\n\n> Tip: 禁止定义静态储存周期非POD变量，禁止使用含有副作用的函数初始化POD全局变量，因为多编译单元中的静态变量执行时的构造和析构顺序是未明确的，这将导致代码的不可移植。\n\n静态生存周期的对象，即包括了全局变量，静态变量，静态类成员变量和函数静态变量，都必须是原生数据类型`(POD : Plain Old Data)`: 即`int`,`char`和`float`, 以及 POD类型的`指针`、`数组`和`结构体`。\n\n静态变量的构造函数、析构函数和初始化的顺序在`C++`中是只有部分明确的，甚至随着构建变化而变化，导致难以发现的 bug。所以除了禁用类类型的全局变量，我们也不允许用函数返回值来初始化POD 变量，除非该函数（比如 getenv() 或 getpid() ）不涉及任何全局变量。函数作用域里的静态变量除外，毕竟它的初始化顺序是有明确定义的，而且只会在指令执行到它的声明那里才会发生。\n\n综上所述，我们只允许POD类型的静态变量，即**完全禁用**`vector`(使用 C 数组替代) 和`string`(使用`const char []`)。\n\n#### 小结\n\n1. `cc`中的匿名命名空间可避免命名冲突, 限定作用域, 避免直接使用`using`关键字污染命名空间\n1. 尽量不用全局函数和全局变量, 考虑作用域和命名空间限制, 尽量单独形成编译单元\n1. 多线程中的全局变量 (含静态成员变量) 不要使用`class`类型(含 STL 容器), 避免不明确行为导致的 bug\n1. 局部变量在声明的同时进行显式值初始化，比起隐式初始化再赋值的两步过程要高效\n\n## 类\n\n类是 C++ 中代码的基本单元. 显然, 它们被广泛使用. 本节列举了在写一个类时的主要注意事项.\n\n#### 构造函数的职责\n\n- 总述\n\n    不要在构造函数中调用虚函数, 也不要在无法报出错误时进行可能失败的初始化.\n\n- 定义\n\n    在构造函数中可以进行各种初始化操作.\n\n- 优点\n\n    - 无需考虑类是否被初始化\n    - 经过构造函数完全初始化后的对象可以为`const`类型, 也能更方便地被标准容器或算法使用\n\n- 缺点\n\n    - 如果在构造函数内调用了自身的虚函数, 这类调用是不会重定向到子类的虚函数实现. 即使当前没有子类化实现, 将来仍是隐患.\n    - 如果执行失败, 会得到一个初始化失败的对象, 这个对象有可能进入不正常的状态, 必须使用`bool isValid()`或类似这样的机制才能检查出来, 然而这是一个十分容易被疏忽的方法.\n    - 构造函数的地址是无法被取得的, 因此, 举例来说, 由构造函数完成的工作是无法以简单的方式交给其他线程的.\n\n- 结论\n\n    构造函数不允许调用虚函数. 如果代码允许, 直接终止程序是一个合适的处理错误的方式. 否则, 考虑用`Init()`方法或工厂函数.\n\n#### 隐式类型转换\n\n- 总述\n\n    不要定义隐式类型转换. 对于转换运算符和单参数构造函数, 请使用`explicit`关键字.\n\n- 定义\n\n    隐式类型转换允许一个某种类型 (称作 源类型) 的对象被用于需要另一种类型 (称作 目的类型) 的位置, 例如, 将一个`int`类型的参数传递给需要`double`类型的函数.\n\n    `explicit`关键字可以用于构造函数或 (在 C++11 引入) 类型转换运算符, 以保证只有当目的类型在调用点被显式写明时才能进行类型转换,例如使用`cast`. 这不仅作用于隐式类型转换, 还能作用于 C++11 的列表初始化语法:\n\n    ```C++\n    class Foo {\n        explicit Foo(int x, double y);\n        ...\n    };\n\n    void Func(Foo f);\n    ```\n\n    此时下面的代码是不允许的:\n\n    ```C++\n    Func({42, 3.14});  // Error\n    ```\n\n    这一代码从技术上说并非隐式类型转换, 但是语言标准认为这是`explicit`应当限制的行为.\n\n- 优点\n\n    - 有时目的类型名是一目了然的, 通过避免显式地写出类型名, 隐式类型转换可以让一个类型的可用性和表达性更强.\n    - 隐式类型转换可以简单地取代函数重载.\n    - 在初始化对象时, 列表初始化语法是一种简洁明了的写法.\n\n- 缺点\n\n    - 隐式类型转换会隐藏类型不匹配的错误. 有时, 目的类型并不符合用户的期望, 甚至用户根本没有意识到发生了类型转换.\n    - 隐式类型转换会让代码难以阅读, 尤其是在有函数重载的时候, 因为这时很难判断到底是哪个函数被调用.\n    - 单参数构造函数有可能会被无意地用作隐式类型转换.\n    - 如果单参数构造函数没有加上`explicit`关键字, 读者无法判断这一函数究竟是要作为隐式类型转换, 还是作者忘了加上`explicit`标记.\n    - 并没有明确的方法用来判断哪个类应该提供类型转换, 这会使得代码变得含糊不清.\n    - 如果目的类型是隐式指定的, 那么列表初始化会出现和隐式类型转换一样的问题, 尤其是在列表中只有一个元素的时候.\n\n- 结论\n\n    在类型定义中, 类型转换运算符和单参数构造函数都应当用`explicit`进行标记. 一个例外是, 拷贝和移动构造函数不应当被标记为`explicit`, 因为它们并不执行类型转换.\n\n    不能以一个参数进行调用的构造函数不应当加上`explicit`. 接受一个`std::initializer_list`作为参数的构造函数也应当省略 `explicit`, 以便支持拷贝初始化 (例如`MyType m = {1, 2};`)\n\n#### 可拷贝类型和可移动类型\n\n- 总述\n\n    如果你的类型需要, 就让它们支持拷贝 / 移动. 否则, 就把隐式产生的拷贝和移动函数禁用.\n\n- 定义\n\n    可拷贝类型允许对象在初始化时得到来自相同类型的另一对象的值, 或在赋值时被赋予相同类型的另一对象的值, 同时不改变源对象的值. 对于用户定义的类型, 拷贝操作一般通过拷贝构造函数与拷贝赋值操作符定义. `string`类型就是一个可拷贝类型的例子.\n\n    可移动类型允许对象在初始化时得到来自相同类型的临时对象的值, 或在赋值时被赋予相同类型的临时对象的值 (因此所有可拷贝对象也是可移动的). `std::unique_ptr<int>`就是一个可移动但不可复制的对象的例子. 对于用户定义的类型, 移动操作一般是通过移动构造函数和移动赋值操作符实现的.\n\n    拷贝 / 移动构造函数在某些情况下会被编译器隐式调用. 例如, 通过传值的方式传递对象.\n\n- 优点\n\n    可移动及可拷贝类型的对象可以通过传值的方式进行传递或者返回, 这使得 API 更简单, 更安全也更通用. 与传指针和引用不同, 这样的传递不会造成所有权, 生命周期, 可变性等方面的混乱, 也就没必要在协议中予以明确. 这同时也防止了客户端与实现在非作用域内的交互, 使得它们更容易被理解与维护. 这样的对象可以和需要传值操作的通用 API 一起使用, 例如大多数容器.\n\n    拷贝 / 移动构造函数与赋值操作一般来说要比它们的各种替代方案, 比如`Clone()`, `CopyFrom()` or `Swap()`, 更容易定义, 因为它们能通过编译器产生, 无论是隐式的还是通过`= default`. 这种方式很简洁, 也保证所有数据成员都会被复制. 拷贝与移动构造函数一般也更高效, 因为它们不需要堆的分配或者是单独的初始化和赋值步骤, 同时,对于类似省略不必要的拷贝这样的优化它们也更加合适.\n\n    移动操作允许隐式且高效地将源数据转移出右值对象. 这有时能让代码风格更加清晰.\n\n- 缺点\n\n    许多类型都不需要拷贝, 为它们提供拷贝操作会让人迷惑, 也显得荒谬而不合理. 单件类型(`Registerer`), 与特定的作用域相关的类型 (`Cleanup`), 与其他对象实体紧耦合的类型 (`Mutex`) 从逻辑上来说都不应该提供拷贝操作. 为基类提供拷贝 / 赋值操作是有害的, 因为在使用它们时会造成对象切割. 默认的或者随意的拷贝操作实现可能是不正确的, 这往往导致令人困惑并且难以诊断出的错误.\n\n    拷贝构造函数是隐式调用的, 也就是说, 这些调用很容易被忽略. 这会让人迷惑, 尤其是对那些所用的语言约定或强制要求传引用的程序员来说更是如此. 同时, 这从一定程度上说会鼓励过度拷贝, 从而导致性能上的问题.\n\n- 结论\n\n    如果需要就让你的类型可拷贝 / 可移动. 作为一个经验法则, 如果对于你的用户来说这个拷贝操作不是一眼就能看出来的, 那就不要把类型设置为可拷贝. 如果让类型可拷贝, 一定要同时给出拷贝构造函数和赋值操作的定义, 反之亦然. 如果让类型可拷贝, 同时移动操作的效率高于拷贝操作, 那么就把移动的两个操作 (移动构造函数和赋值操作) 也给出定义. 如果类型不可拷贝, 但是移动操作的正确性对用户显然可见, 那么把这个类型设置为只可移动并定义移动的两个操作.\n\n    如果定义了拷贝/移动操作, 则要保证这些操作的默认实现是正确的. 记得时刻检查默认操作的正确性, 并且在文档中说明类是可拷贝的且/或可移动的.\n\n    ```C++\n    class Foo {\n    public:\n        Foo(Foo&& other) : field_(other.field) {}\n        // 差, 只定义了移动构造函数, 而没有定义对应的赋值运算符.\n\n    private:\n        Field field_;\n    };\n    ```\n\n    由于存在对象切割的风险, 不要为任何有可能有派生类的对象提供赋值操作或者拷贝 / 移动构造函数 (当然也不要继承有这样的成员函数的类). 如果你的基类需要可复制属性, 请提供一个`public virtual Clone()`和一个`protected`的拷贝构造函数以供派生类实现.\n\n    如果你的类不需要拷贝 / 移动操作, 请显式地通过在`public`域中使用`= delete`或其他手段禁用之.\n\n    ```C++\n    // MyClass is neither copyable nor movable.\n    MyClass(const MyClass&) = delete;\n    MyClass& operator=(const MyClass&) = delete;\n    ```\n\n#### 结构体 VS 类\n\n- 总述\n\n    仅当只有数据成员时使用`struct`, 其它一概使用`class`.\n\n- 说明\n\n    在 C++ 中`struct`和`class`关键字几乎含义一样. 我们为这两个关键字添加我们自己的语义理解, 以便为定义的数据类型选择合适的关键字.\n\n    `struct`用来定义包含数据的被动式对象, 也可以包含相关的常量, 但除了存取数据成员之外, 没有别的函数功能. 并且存取功能是通过直接访问位域, 而非函数调用. 除了构造函数, 析构函数, `Initialize()`, `Reset()`, `Validate()` 等类似的用于设定数据成员的函数外, 不能提供其它功能的函数.\n\n    如果需要更多的函数功能, `class`更适合. 如果拿不准, 就用 `class`.\n\n    为了和STL保持一致, 对于仿函数等特性可以不用`class`而是使用`struct`.\n\n    注意: 类和结构体的成员变量使用不同的命名规则.\n\n#### 继承\n\n- 总述\n\n    使用组合常常比使用继承更合理. 如果使用继承的话, 定义为 public 继承.\n\n- 定义\n\n    当子类继承基类时, 子类包含了父基类所有数据及操作的定义. C++ 实践中, 继承主要用于两种场合: 实现继承, 子类继承父类的实现代码; 接口继承, 子类仅继承父类的方法名称.\n\n- 优点\n\n    实现继承通过原封不动的复用基类代码减少了代码量. 由于继承是在编译时声明, 程序员和编译器都可以理解相应操作并发现错误. 从编程角度而言, 接口继承是用来强制类输出特定的 API. 在类没有实现 API 中某个必须的方法时, 编译器同样会发现并报告错误.\n\n- 缺点\n\n    对于实现继承, 由于子类的实现代码散布在父类和子类间之间, 要理解其实现变得更加困难. 子类不能重写父类的非虚函数, 当然也就不能修改其实现. 基类也可能定义了一些数据成员, 因此还必须区分基类的实际布局.\n\n- 结论\n\n    所有继承必须是`public`的. 如果你想使用私有继承, 你应该替换成把基类的实例作为成员对象的方式.\n\n    不要过度使用实现继承. 组合常常更合适一些. 尽量做到只在 “是一个” (“is-a”, 其他 “has-a” 情况下请使用组合) 的情况下使用继承: 如果`Bar`的确 “是一种” `Foo`, `Bar`才能继承`Foo`.\n\n    必要的话, 析构函数声明为`virtual`. 如果你的类有虚函数, 则析构函数也应该为虚函数.\n\n    对于可能被子类访问的成员函数, 不要过度使用`protected`关键字. 注意, 数据成员都必须是**私有的**.\n\n    对于重载的虚函数或虚析构函数, 使用`override`, 或 (较不常用的)`final`关键字显式地进行标记. 较早 (早于 C++11) 的代码可能会使用`virtual`关键字作为不得已的选项. 因此, 在声明重载时, 请使用 `override`, `final`或`virtual`的其中之一进行标记. 标记为`override`或`final`的析构函数如果不是对基类虚函数的重载的话, 编译会报错, 这有助于捕获常见的错误. 这些标记起到了文档的作用, 因为如果省略这些关键字, 代码阅读者不得不检查所有父类, 以判断该函数是否是虚函数.\n\n#### 多重继承\n\n- 总述\n\n    真正需要用到多重实现继承的情况少之又少. 只在以下情况我们才允许多重继承: 最多只有一个基类是非抽象类; 其它基类都是以`Interface`为后缀的纯接口类.\n\n- 定义\n\n    多重继承允许子类拥有多个基类. 要将作为*纯接口*的基类和具有*实现*的基类区别开来.\n\n- 优点\n\n    相比单继承, 多重实现继承可以复用更多的代码.\n\n- 缺点\n\n    真正需要用到多重 实现 继承的情况少之又少. 有时多重实现继承看上去是不错的解决方案, 但这时你通常也可以找到一个更明确, 更清晰的不同解决方案.\n\n- 结论\n\n    只有当所有父类除第一个外都是*纯接口类*时, 才允许使用多重继承. 为确保它们是纯接口, 这些类必须以`Interface`为后缀.\n\n#### 接口\n\n- 总述\n\n    接口是指满足特定条件的类, 这些类以`Interface`为后缀 (不强制).\n\n- 定义\n\n    当一个类满足以下要求时, 称之为纯接口:\n\n    - 只有纯虚函数 (“`=0`”) 和静态函数 (除了下文提到的析构函数).\n    - 没有非静态数据成员.\n    - 没有定义任何构造函数. 如果有, 也不能带有参数, 并且必须为`protected`.\n    - 如果它是一个子类, 也只能从满足上述条件并以`Interface`为后缀的类继承.\n\n    接口类不能被直接实例化, 因为它声明了纯虚函数. 为确保接口类的所有实现可被正确销毁, 必须为之声明虚析构函数\n\n- 优点\n\n    以`Interface`为后缀可以提醒其他人不要为该接口类增加函数实现或非静态数据成员. 这一点对于`多重继承`尤其重要.\n\n- 缺点\n\n    `Interface`后缀增加了类名长度, 为阅读和理解带来不便. 同时, 接口属性作为实现细节不应暴露给用户.\n\n- 结论\n\n    只有在满足上述条件时, 类才以`Interface`结尾, 但反过来, 满足上述需要的类未必一定以`Interface`结尾.\n\n#### 运算符重载\n\n- 总述\n\n    除少数特定环境外, 不要重载运算符. 也不要创建用户定义字面量.\n\n- 定义\n\n    C++ 允许用户通过使用`operator`关键字对内建运算符进行重载定义, 只要其中一个参数是用户定义的类型. `operator`关键字还允许用户使用`operator\"\"`定义新的字面运算符, 并且定义类型转换函数, 例如`operator bool()`.\n\n- 优点\n\n    重载运算符可以让代码更简洁易懂, 也使得用户定义的类型和内建类型拥有相似的行为. 重载运算符对于某些运算来说是符合符合语言习惯的名称 (例如`==`,`<`,`=`,`<<`), 遵循这些语言约定可以让用户定义的类型更易读, 也能更好地和需要这些重载运算符的函数库进行交互操作.\n\n    对于创建用户定义的类型的对象来说, 用户定义字面量是一种非常简洁的标记.\n\n- 缺点\n\n    - 要提供正确, 一致, 不出现异常行为的操作符运算需要花费不少精力, 而且如果达不到这些要求的话, 会导致令人迷惑的 Bug.\n    - 过度使用运算符会带来难以理解的代码, 尤其是在重载的操作符的语义与通常的约定不符合时.\n    - 函数重载有多少弊端, 运算符重载就至少有多少.\n    - 运算符重载会混淆视听, 让你误以为一些耗时的操作和操作内建类型一样轻巧.\n    - 对重载运算符的调用点的查找需要的可就不仅仅是像 grep 那样的程序了, 这时需要能够理解 C++ 语法的搜索工具.\n    - 重载某些运算符本身就是有害的. 例如, 重载一元运算符 & 会导致同样的代码有完全不同的含义, 这取决于重载的声明对某段代码而言是否是可见的. 重载诸如`&&`,`||`和`,` 会导致运算顺序和内建运算的顺序不一致.\n\n- 结论\n\n    只有在意义明显, 不会出现奇怪的行为并且与对应的内建运算符的行为一致时才定义重载运算符. 例如, | 要作为位或或逻辑或来使用, 而不是作为 shell 中的管道.\n\n    只有对用户自己定义的类型重载运算符. 更准确地说, 将它们和它们所操作的类型定义在同一个头文件中, `.cc`中和命名空间中. 这样做无论类型在哪里都能够使用定义的运算符, 并且最大程度上避免了多重定义的风险. 如果可能的话, 请避免将运算符定义为模板, 因为此时它们必须对任何模板参数都能够作用. 如果你定义了一个运算符, 请将其相关且有意义的运算符都进行定义, 并且保证这些定义的语义是一致的. 例如, 如果你重载了`<`, 那么请将所有的比较运算符都进行重载, 并且保证对于同一组参数,`<`和`>`不会同时返回`true`.\n\n    不要为了避免重载操作符而走极端. 比如说, 应当定义`==`,`=`,和`<<`而不是`Equals()`,`CopyFrom()`和`PrintTo()`. 反过来说, 不要只是为了满足函数库需要而去定义运算符重载. 比如说, 如果你的类型没有自然顺序, 而你要将它们存入`std::set`中, 最好还是定义一个自定义的比较运算符而不是重载`<`.\n\n    不要重载`&&`,`||`,`,`或一元运算符`&`. 不要重载`operator\"\"`, 也就是说, 不要引入用户定义字面量.\n\n#### 存取控制\n\n- 总述\n\n    将*所有*数据成员声明为`private`, 除非是`static const`类型成员 (遵循 常量命名规则). 处于技术上的原因, 在使用`Google Test`时我们允许测试固件类中的数据成员为`protected`.\n\n#### 声明顺序\n\n- 总述\n\n    将相似的声明放在一起, 将`public`部分放在最前.\n\n- 说明\n\n    类定义一般应以`public:`开始, 后跟`protected:`, 最后是`private:`. 省略空部分.\n\n    在各个部分中, 建议将类似的声明放在一起, 并且建议以如下的顺序: 类型 (包括`typedef`,`using`和嵌套的结构体与类), 常量, 工厂函数, 构造函数, 赋值运算符, 析构函数, 其它函数, 数据成员.\n\n    不要将大段的函数定义内联在类定义中. 通常，只有那些普通的, 或性能关键且短小的函数可以内联在类定义中. 参见 内联函数 一节.\n\n#### 小结\n\n1. 不在构造函数中做太多逻辑相关的初始化\n1. 编译器提供的默认构造函数不会对变量进行初始化, 如果定义了其他构造函数, 编译器不再提供, 需要编码者自行提供默认构造函数\n1. 为避免隐式转换, 需将单参数构造函数声明为`explicit`\n1. 为避免拷贝构造函数, 赋值操作的滥用和编译器自动生成, 可将其声明为`private`且无需实现\n1. 仅在作为数据集合时使用`struct`\n1. 组合 > 实现继承 > 接口继承 > 私有继承, 子类重载的虚函数也要声明`virtual`关键字, 虽然编译器允许不这样做\n1. 避免使用多重继承, 使用时, 除一个基类含有实现外, 其他基类均为纯接口\n1. 接口类类名以`Interface`为后缀, 除提供带实现的虚析构函数, 静态成员函数外, 其他均为纯虚函数, 不定义非静态数据成员, 不提供构造函数, 提供的话, 声明为`protected`\n1. 为降低复杂性, 尽量不重载操作符, 模板, 标准类中使用时提供文档说明\n1. 存取函数一般内联在头文件中\n1. 声明次序:`public` -> `protected` -> `private`\n1. 函数体尽量短小, 紧凑, 功能单一\n\n## 函数\n\n#### 参数顺序\n\n- 总述\n\n    函数的参数顺序为: 输入参数在先, 后跟输出参数.\n\n- 说明\n\n    C/C++ 中的函数参数或者是函数的输入, 或者是函数的输出, 或兼而有之. 输入参数通常是值参或`const`引用, 输出参数或输入/输出参数则一般为非`const`指针. 在排列参数顺序时, 将所有的输入参数置于输出参数之前. 特别要注意, 在加入新参数时不要因为它们是新参数就置于参数列表最后, 而是仍然要按照前述的规则, 即将新的输入参数也置于输出参数之前.\n\n    这并非一个硬性规定. 输入/输出参数 (通常是类或结构体) 让这个问题变得复杂. 并且, 有时候为了其他函数保持一致, 你可能不得不有所变通.\n\n#### 编写简短函数\n\n- 总述\n\n    我们倾向于编写简短, 凝练的函数.\n\n- 说明\n\n    我们承认长函数有时是合理的, 因此并不硬性限制函数的长度. 如果函数超过`40`行, 可以思索一下能不能在不影响程序结构的前提下对其进行分割.\n\n    即使一个长函数现在工作的非常好, 一旦有人对其修改, 有可能出现新的问题, 甚至导致难以发现的 bug. 使函数尽量简短,以便于他人阅读和修改代码.\n\n    在处理代码时, 你可能会发现复杂的长函数. 不要害怕修改现有代码: 如果证实这些代码使用/调试起来很困难, 或者你只需要使用其中的一小段代码, 考虑将其分割为更加简短并易于管理的若干函数.\n\n#### 引用参数\n\n- 总述\n\n    所有按引用传递的参数必须加上`const`.\n\n- 定义\n\n    在 C 语言中, 如果函数需要修改变量的值, 参数必须为指针, 如`int foo(int *pval)`. 在 C++ 中, 函数还可以声明为引用参数: `int foo(int &val)`.\n\n- 优点\n\n    定义引用参数可以防止出现`(*pval)++`这样丑陋的代码. 引用参数对于拷贝构造函数这样的应用也是必需的. 同时也更明确地不接受空指针.\n\n- 缺点\n\n    容易引起误解, 因为引用在语法上是值变量却拥有指针的语义.\n\n- 结论\n\n    函数参数列表中, 所有引用参数都必须是`const`:\n\n    ```C++\n    void Foo(const string &in, string *out);\n    ```\n\n    事实上这在Google Code是一个硬性约定: 输入参数是值参或`const`引用, 输出参数为指针. 输入参数可以是`const`指针, 但决不能是非`const`的引用参数, 除非特殊要求, 比如 swap().\n\n    有时候, 在输入形参中用`const T*`指针比`const T&`更明智. 比如:\n\n    - 可能会传递空指针.\n    - 函数要把指针或对地址的引用赋值给输入形参.\n\n    总而言之, 大多时候输入形参往往是`const T&`. 若用`const T*`则说明输入另有处理. 所以若要使用`const T*`, 则应给出相应的理由, 否则会使得读者感到迷惑.\n\n#### 函数重载\n\n- 总述\n\n    若要使用函数重载, 则必须能让读者一看调用点就胸有成竹, 而不用花心思猜测调用的重载函数到底是哪一种. 这一规则也适用于构造函数.\n\n- 定义\n\n    你可以编写一个参数类型为`const string&`的函数, 然后用另一个参数类型为`const char*`的函数对其进行重载:\n\n    ```C++\n    class MyClass {\n        public:\n        void Analyze(const string &text);\n        void Analyze(const char *text, size_t textlen);\n    };\n    ```\n\n- 优点\n\n    通过重载参数不同的同名函数, 可以令代码更加直观. 模板化代码需要重载, 这同时也能为使用者带来便利.\n\n- 缺点\n\n    如果函数单靠不同的参数类型而重载, 读者就得十分熟悉 C++ 五花八门的匹配规则, 以了解匹配过程具体到底如何. 另外, 如果派生类只重载了某个函数的部分变体, 继承语义就容易令人困惑.\n\n- 结论\n\n    如果打算重载一个函数, 可以试试改在函数名里加上参数信息. 例如, 用`AppendString()`和`AppendInt()`等, 而不是一口气重载多个`Append()`. 如果重载函数的目的是为了支持不同数量的同一类型参数, 则优先考虑使用`std::vector`以便使用者可以用 列表初始化 指定参数.\n\n#### 缺省参数\n\n- 总述\n\n    只允许在非虚函数中使用缺省参数, 且必须保证缺省参数的值始终一致. 缺省参数与 函数重载 遵循同样的规则. 一般情况下建议使用函数重载, 尤其是在缺省函数带来的可读性提升不能弥补下文中所提到的缺点的情况下.\n\n- 优点\n\n    有些函数一般情况下使用默认参数, 但有时需要又使用非默认的参数. 缺省参数为这样的情形提供了便利, 使程序员不需要为了极少的例外情况编写大量的函数. 和函数重载相比, 缺省参数的语法更简洁明了, 减少了大量的样板代码, 也更好地区别了 “必要参数” 和 “可选参数”.\n\n- 缺点\n\n    缺省参数实际上是函数重载语义的另一种实现方式, 因此所有 不应当使用函数重载的理由 也都适用于缺省参数.\n\n    虚函数调用的缺省参数取决于目标对象的静态类型, 此时无法保证给定函数的所有重载声明的都是同样的缺省参数.\n\n    缺省参数是在每个调用点都要进行重新求值的, 这会造成生成的代码迅速膨胀. 作为读者, 一般来说也更希望缺省的参数在声明时就已经被固定了, 而不是在每次调用时都可能会有不同的取值.\n\n    缺省参数会干扰函数指针, 导致函数签名与调用点的签名不一致. 而函数重载不会导致这样的问题.\n\n- 结论\n\n    对于虚函数, 不允许使用缺省参数, 因为在虚函数中缺省参数不一定能正常工作. 如果在每个调用点缺省参数的值都有可能不同, 在这种情况下缺省函数也不允许使用. (例如, 不要写像`void f(int n = counter++);` 这样的代码.)\n\n    在其他情况下, 如果缺省参数对可读性的提升远远超过了以上提及的缺点的话, 可以使用缺省参数. 如果仍有疑惑, 就使用函数重载.\n\n\n## 来自Google的奇技\n\nGoogle 用了很多自己实现的技巧 / 工具使 C++ 代码更加健壮, 我们使用 C++ 的方式可能和你在其它地方见到的有所不同.\n\n#### 所有权与智能指针\n\n- 总述\n\n    动态分配出的对象最好有单一且固定的所有主, 并通过智能指针传递所有权.\n\n- 定义\n\n    所有权是一种登记／管理动态内存和其它资源的技术. 动态分配对象的所有主是一个对象或函数, 后者负责确保当前者无用时就自动销毁前者. 所有权有时可以共享, 此时就由最后一个所有主来负责销毁它. 甚至也可以不用共享, 在代码中直接把所有权传递给其它对象.\n\n    智能指针是一个通过重载`*`和`->`运算符以表现得如指针一样的类. 智能指针类型被用来自动化所有权的登记工作, 来确保执行销毁义务到位.`std::unique_ptr`是 C++11 新推出的一种智能指针类型, 用来表示动态分配出的对象的独一无二的所有权; 当`std::unique_ptr`离开作用域时, 对象就会被销毁.`std::unique_ptr`不能被复制, 但可以把它移动（move）给新所有主.`std::shared_ptr`同样表示动态分配对象的所有权, 但可以被共享, 也可以被复制; 对象的所有权由所有复制者共同拥有, 最后一个复制者被销毁时, 对象也会随着被销毁.\n\n- 优点\n\n    - 如果没有清晰、逻辑条理的所有权安排, 不可能管理好动态分配的内存.\n    - 传递对象的所有权, 开销比复制来得小, 如果可以复制的话.\n    - 传递所有权也比”借用”指针或引用来得简单, 毕竟它大大省去了两个用户一起协调对象生命周期的工作.\n    - 如果所有权逻辑条理, 有文档且不紊乱的话, 可读性会有很大提升.\n    - 可以不用手动完成所有权的登记工作, 大大简化了代码, 也免去了一大波错误之恼.\n    - 对于 const 对象来说, 智能指针简单易用, 也比深度复制高效.\n\n- 缺点\n\n    - 不得不用指针（不管是智能的还是原生的）来表示和传递所有权. 指针语义可要比值语义复杂得许多了, 特别是在 API 里：这时不光要操心所有权, 还要顾及别名, 生命周期, 可变性以及其它大大小小的问题.\n    - 其实值语义的开销经常被高估, 所以所有权传递带来的性能提升不一定能弥补可读性和复杂度的损失.\n    - 如果 API 依赖所有权的传递, 就会害得客户端不得不用单一的内存管理模型.\n    - 如果使用智能指针, 那么资源释放发生的位置就会变得不那么明显.\n    - `std::unique_ptr`的所有权传递原理是 C++11 的 move 语法, 后者毕竟是刚刚推出的, 容易迷惑程序员.\n    - 如果原本的所有权设计已经够完善了, 那么若要引入所有权共享机制, 可能不得不重构整个系统.\n    - 所有权共享机制的登记工作在运行时进行, 开销可能相当大.\n    - 某些极端情况下 (例如循环引用), 所有权被共享的对象永远不会被销毁.\n    - 智能指针并不能够完全代替原生指针.\n\n- 结论\n\n    如果必须使用动态分配, 那么更倾向于将所有权保持在分配者手中. 如果其他地方要使用这个对象, 最好传递它的拷贝, 或者传递一个不用改变所有权的指针或引用. 倾向于使用`std::unique_ptr`来明确所有权传递, 例如：\n\n    ```C++\n    std::unique_ptr<Foo> FooFactory();\n    void FooConsumer(std::unique_ptr<Foo> ptr);\n    ```\n\n    如果没有很好的理由, 则不要使用共享所有权. 这里的理由可以是为了避免开销昂贵的拷贝操作, 但是只有当性能提升非常明显, 并且操作的对象是不可变的（比如说`std::shared_ptr<const Foo>`）时候, 才能这么做. 如果确实要使用共享所有权, 建议于使用`std::shared_ptr`.\n\n    不要使用`std::auto_ptr`, 使用`std::unique_ptr`代替它.\n\n#### Cpplint\n\n- 总述\n\n    使用`cpplint.py`检查风格错误.\n\n- 说明\n\n    `cpplint.py`是一个用来分析源文件, 能检查出多种风格错误的工具. 它不并完美, 甚至还会漏报和误报, 但它仍然是一个非常有用的工具. 在行尾加`// NOLINT`, 或在上一行加`// NOLINTNEXTLINE`, 可以忽略报错.\n\n    某些项目会指导你如何使用他们的项目工具运行`cpplint.py`. 如果你参与的项目没有提供, 你可以单独下载`cpplint.py`.\n\n## 其他C++特性\n\n#### 引用参数\n\n>Tip: 所有按引用传递的参数**必须**加上`const`.\n\n- 定义\n\n    在 C 语言中, 如果函数需要修改变量的值, 参数必须为指针, 如`int foo(int *pval)`. 在 C++ 中, 函数还可以声明引用参数:`int foo(int &val)`.\n\n- 优点\n\n    定义引用参数防止出现`(*pval)++`这样丑陋的代码. 像拷贝构造函数这样的应用也是必需的. 而且更明确, 不接受`NULL`指针.\n\n- 缺点\n\n    容易引起误解, 因为引用在语法上是值变量却拥有指针的语义.\n\n- 结论\n\n    函数参数列表中, 所有引用参数都必须是`const`:\n\n    ```C++\n    void Foo(const string &in, string *out);\n    ```\n\n    事实上这在 Google Code 是一个硬性约定: 输入参数是值参或`const`引用, 输出参数为指针. 输入参数可以是`const`指针, 但决不能是非`const`的引用参数，除非用于交换，比如`swap()`.\n\n    有时候，在输入形参中用`const T*`指针比`const T&`更明智。比如：\n\n        - 您会传 null 指针。\n        - 函数要把指针或对地址的引用赋值给输入形参。\n\n    总之大多时候输入形参往往是`const T&`. 若用`const T*`说明输入另有处理。所以若您要用 `const T*`, 则应有理有据，否则会害得读者误解。\n\n#### 右值引用\n\n> Tip: 只在定义移动构造函数与移动赋值操作时使用右值引用. 不要使用`std::forward`.\n\n- 定义\n\n    右值引用是一种只能绑定到临时对象的引用的一种, 其语法与传统的引用语法相似. 例如,`void f(string&& s)`; 声明了一个其参数是一个字符串的右值引用的函数.\n\n- 优点\n\n    用于定义移动构造函数 (使用类的右值引用进行构造的函数) 使得移动一个值而非拷贝之成为可能. 例如, 如果`v1`是一个`vector<string>`, 则`auto v2(std::move(v1))`将很可能不再进行大量的数据复制而只是简单地进行指针操作, 在某些情况下这将带来大幅度的性能提升.\n\n- 缺点\n\n    右值引用是一个相对比较新的特性 (由 C++11 引入), 它尚未被广泛理解. 类似引用崩溃, 移动构造函数的自动推导这样的规则都是很复杂的.\n\n- 结论\n\n    只在定义移动构造函数与移动赋值操作时使用右值引用, 不要使用`std::forward`功能函数. 你可能会使用`std::move`来表示将值从一个对象移动而不是复制到另一个对象.\n\n#### 函数重载\n\n> Tip: 若要用好函数重载，最好能让读者一看调用点（call site）就胸有成竹，不用花心思猜测调用的重载函数到底是哪一种。该规则适用于构造函数。\n\n- 定义\n\n    你可以编写一个参数类型为`const string&`的函数, 然后用另一个参数类型为`const char*`的函数重载它:\n\n    ```C++\n    class MyClass {\n        public:\n        void Analyze(const string &text);\n        void Analyze(const char *text, size_t textlen);\n    };\n    ```\n\n- 优点\n\n    通过重载参数不同的同名函数, 令代码更加直观. 模板化代码需要重载, 同时为使用者带来便利.\n\n- 缺点\n\n    如果函数单单靠不同的参数类型而重载，读者就得十分熟悉 C++ 五花八门的匹配规则，以了解匹配过程具体到底如何。另外，当派生类只重载了某个函数的部分变体，继承语义容易令人困惑。\n\n- 结论\n\n    如果您打算重载一个函数, 可以试试改在函数名里加上参数信息。例如，用`AppendString()`和`AppendInt()`等， 而不是一口气重载多个`Append()`.\n\n#### 缺省参数\n\n> Tip: 我们不允许使用缺省函数参数，少数极端情况除外。尽可能改用函数重载。\n\n- 优点\n\n    当您有依赖缺省参数的函数时，您也许偶尔会修改修改这些缺省参数。通过缺省参数，不用再为个别情况而特意定义一大堆函数了。与函数重载相比，缺省参数语法更为清晰，代码少，也很好地区分了「必选参数」和「可选参数」。\n\n- 缺点\n\n    缺省参数会干扰函数指针，害得后者的函数签名（function signature）往往对不上所实际要调用的函数签名。即在一个现有函数添加缺省参数，就会改变它的类型，那么调用其地址的代码可能会出错，不过函数重载就没这问题了。此外，缺省参数会造成臃肿的代码，毕竟它们在每一个调用点（call site）都有重复。函数重载正好相反，毕竟它们所谓的「缺省参数」只会出现在函数定义里。\n\n- 结论\n\n    由于缺点并不是很严重，有些人依旧偏爱缺省参数胜于函数重载。所以除了以下情况，我们要求必须显式提供所有参数。\n\n    1. 位于`.cc`文件里的静态函数或匿名空间函数，毕竟都只能在局部文件里调用该函数了\n    1. 可以在构造函数里用缺省参数，毕竟不可能取得它们的地址\n    1. 可以用来模拟变长数组\n\n#### 变长数组和alloca()\n\n> Tip: 我们不允许使用变长数组和`alloca()`.\n\n- 优点\n\n    变长数组具有浑然天成的语法. 变长数组和`alloca()`也都很高效.\n\n- 缺点\n\n    变长数组和`alloca()`不是标准 C++ 的组成部分. 更重要的是, 它们根据数据大小动态分配堆栈内存, 会引起难以发现的内存越界 bugs: “在我的机器上运行的好好的, 发布后却莫名其妙的挂掉了”.\n\n- 结论\n\n    改用更安全的分配器（allocator），就像`std::vector`或`std::unique_ptr<T[]>`.\n\n#### 友元\n\n> Tip: 我们允许合理的使用友元类及友元函数.\n\n通常友元应该定义在同一文件内, 避免代码读者跑到其它文件查找使用该私有成员的类. 经常用到友元的一个地方是将`FooBuilder`声明为`Foo`的友元, 以便`FooBuilder`正确构造 Foo 的内部状态, 而无需将该状态暴露出来. 某些情况下, 将一个单元测试类声明成待测类的友元会很方便.\n\n友元扩大了 (但没有打破) 类的封装边界. 某些情况下, 相对于将类成员声明为`public`, 使用友元是更好的选择, 尤其是如果你只允许另一个类访问该类的私有成员时. 当然, 大多数类都只应该通过其提供的公有成员进行互操作.\n\n#### 运行时类型识别\n\n> Tip: 禁止使用 RTTI(Run-Time Type Identification).\n\n- 定义\n\n    RTTI 允许程序员在运行时识别 C++ 类对象的类型. 它通过使用`typeid`或者`dynamic_cast`完成.\n\n- 优点\n\n    RTTI 的标准替代 (下面将描述) 需要对有问题的类层级进行修改或重构. 有时这样的修改并不是我们所想要的, 甚至是不可取的, 尤其是在一个已经广泛使用的或者成熟的代码中.\n\n    RTTI 在某些单元测试中非常有用. 比如进行工厂类测试时, 用来验证一个新建对象是否为期望的动态类型. RTTI 对于管理对象和派生对象的关系也很有用.\n\n    在考虑多个抽象对象时 RTTI 也很好用. 例如:\n\n    ```C++\n    bool Base::Equal(Base* other) = 0;\n    bool Derived::Equal(Base* other) {\n    Derived* that = dynamic_cast<Derived*>(other);\n    if (that == NULL)\n        return false;\n    ...\n    }\n    ```\n\n- 缺点\n\n    在运行时判断类型通常意味着设计问题. 如果你需要在运行期间确定一个对象的类型, 这通常说明你需要考虑重新设计你的类.\n\n    随意地使用 RTTI 会使你的代码难以维护. 它使得基于类型的判断树或者 switch 语句散布在代码各处. 如果以后要进行修改, 你就必须检查它们.\n\n- 结论\n\n    基于类型的判断树是一个很强的暗示, 它说明你的代码已经偏离正轨了. 不要像下面这样:\n\n    ```C++\n    if (typeid(*data) == typeid(D1)) {\n    ...\n    } else if (typeid(*data) == typeid(D2)) {\n    ...\n    } else if (typeid(*data) == typeid(D3)) {\n    ...\n    ```\n\n    一旦在类层级中加入新的子类, 像这样的代码往往会崩溃. 而且, 一旦某个子类的属性改变了, 你很难找到并修改所有受影响的代码块.\n\n    不要去手工实现一个类似 RTTI 的方案. 反对 RTTI 的理由同样适用于这些方案, 比如带类型标签的类继承体系. 而且, 这些方案会掩盖你的真实意图.\n\n#### 类型转换\n\n> Tip: 使用 C++ 的类型转换, 如`static_cast<>()`. 不要使用`int y = (int)x`或`int y = int(x)`等转换方式\n\n- 定义\n\n    C++ 采用了有别于 C 的类型转换机制, 对转换操作进行归类.\n\n- 优点\n\n    C 语言的类型转换问题在于模棱两可的操作; 有时是在做强制转换 (如 `(int)3.5`), 有时是在做类型转换 (如 `(int)\"hello\"`). 另外, C++ 的类型转换在查找时更醒目.\n\n- 结论\n\n    不要使用 C 风格类型转换. 而应该使用 C++ 风格.\n    - 用`static_cast`替代 C 风格的值转换, 或某个类指针需要明确的向上转换为父类指针时.\n    - 用`const_cast`去掉`const`限定符.\n    - 用`reinterpret_cast`指针类型和整型或其它指针之间进行不安全的相互转换. 仅在你对所做一切了然于心时使用.\n\n#### 流\n\n> Tip: 只在记录日志时使用流.\n\n- 定义\n\n    流用来替代`printf()`和`scanf()`.\n\n- 优点\n\n    有了流, 在打印时不需要关心对象的类型. 不用担心格式化字符串与参数列表不匹配 (虽然在 gcc 中使用`printf`也不存在这个问题). 流的构造和析构函数会自动打开和关闭对应的文件.\n\n- 缺点\n\n    流使得`pread()`等功能函数很难执行. 如果不使用`printf`风格的格式化字符串, 某些格式化操作 (尤其是常用的格式字符串 %.*s) 用流处理性能是很低的. 流不支持字符串操作符重新排序 (%1s), 而这一点对于软件国际化很有用.\n\n- 结论\n\n    不要使用流, 除非是日志接口需要. 使用`printf`之类的代替.\n\n    使用流还有很多利弊, 但代码一致性胜过一切. 不要在代码中使用流.\n\n#### 前置自增和自减减\n\n> Tip: 对于迭代器和其他模板对象使用前缀形式`(++i)`的自增, 自减运算符.\n\n- 定义\n\n    对于变量在自增 (`++i`或`i++`) 或自减 (`--i`或`i--`) 后表达式的值又没有没用到的情况下, 需要确定到底是使用前置还是后置的自增 (自减).\n\n- 优点\n\n    不考虑返回值的话, 前置自增 (`++i`) 通常要比后置自增 (`i++`) 效率更高. 因为后置自增 (或自减) 需要对表达式的值 i 进行一次拷贝. 如果 i 是迭代器或其他非数值类型, 拷贝的代价是比较大的. 既然两种自增方式实现的功能一样, 为什么不总是使用前置自增呢?\n\n- 缺点\n\n    在 C 开发中, 当表达式的值未被使用时, 传统的做法是使用后置自增, 特别是在`for`循环中. 有些人觉得后置自增更加易懂, 因为这很像自然语言, 主语 (`i`) 在谓语动词 (`++`) 前.\n\n- 结论\n\n    对简单数值 (非对象), 两种都无所谓. 对迭代器和模板类型, 使用前置自增 (自减).\n\n#### `const`用法\n\n> Tip: 我们强烈建议你在任何可能的情况下都要使用`const`. 此外有时改用 C++11 推出的 constexpr 更好。\n\n- 定义\n\n    在声明的变量或参数前加上关键字`const`用于指明变量值不可被篡改 (如 `const int foo`). 为类中的函数加上`const`限定符表明该函数不会修改类成员变量的状态 (如`class Foo { int Bar(char c) const; };`).\n\n- 优点\n\n    大家更容易理解如何使用变量. 编译器可以更好地进行类型检测, 相应地, 也能生成更好的代码. 人们对编写正确的代码更加自信, 因为他们知道所调用的函数被限定了能或不能修改变量值. 即使是在无锁的多线程编程中, 人们也知道什么样的函数是安全的.\n\n- 缺点\n\n    `const`是入侵性的: 如果你向一个函数传入`const`变量, 函数原型声明中也必须对应`const`参数 (否则变量需要`const_cast`类型转换), 在调用库函数时显得尤其麻烦.\n\n- 结论\n\n    `const`变量, 数据成员, 函数和参数为编译时类型检测增加了一层保障; 便于尽早发现错误. 因此, 我们强烈建议在任何可能的情况下使用`const`:\n\n    - 如果函数不会修改传你入的引用或指针类型参数, 该参数应声明为 `const`.\n    - 尽可能将函数声明为`const`. 访问函数应该总是`const`. 其他不会修改任何数据成员, 未调用非`const`函数, 不会返回数据成员非 `const`指针或引用的函数也应该声明成`const`.\n    - 如果数据成员在对象构造之后不再发生变化, 可将其定义为`const`.\n\n#### `constexpr`用法\n\n> Tip: 在 C++11 里，用 constexpr 来定义真正的常量，或实现常量初始化。\n\n- 定义\n\n    变量可以被声明成`constexpr`以表示它是真正意义上的常量，即在编译时和运行时都不变。函数或构造函数也可以被声明成`constexpr`, 以用来定义 `constexpr`变量。\n\n- 优点\n\n    如今 constexpr 就可以定义浮点式的真・常量，不用再依赖字面值了；也可以定义用户自定义类型上的常量；甚至也可以定义函数调用所返回的常量。\n\n- 缺点\n\n    若过早把变量优化成 constexpr 变量，将来又要把它改为常规变量时，挺麻烦的；当前对constexpr函数和构造函数中允许的限制可能会导致这些定义中解决的方法模糊。\n\n- 结论\n\n    靠 constexpr 特性，方才实现了 C++ 在接口上打造真正常量机制的可能。好好用 constexpr 来定义真・常量以及支持常量的函数。避免复杂的函数定义，以使其能够与constexpr一起使用。 千万别痴心妄想地想靠 constexpr 来强制代码「内联」。\n\n#### 预处理宏\n\n> Tip: 使用宏时要非常谨慎, 尽量以内联函数, 枚举和常量代替之.\n\n宏意味着你和编译器看到的代码是不同的. 这可能会导致异常行为, 尤其因为宏具有全局作用域.\n\n值得庆幸的是, C++ 中, 宏不像在 C 中那么必不可少. 以往用宏展开性能关键的代码, 现在可以用内联函数替代. 用宏表示常量可被`const`变量代替. 用宏 “缩写” 长变量名可被引用代替. 用宏进行条件编译… 这个, 千万别这么做, 会令测试更加痛苦 (`#define`防止头文件重包含当然是个特例).\n\n宏可以做一些其他技术无法实现的事情, 在一些代码库 (尤其是底层库中) 可以看到宏的某些特性 (如用`#`字符串化, 用`##`连接等等). 但在使用前, 仔细考虑一下能不能不使用宏达到同样的目的.\n\n下面给出的用法模式可以避免使用宏带来的问题; 如果你要宏, 尽可能遵守:\n\n- 不要在`.h`文件中定义宏.\n- 在马上要使用时才进行`#define`, 使用后要立即 `#undef`.\n- 不要只是对已经存在的宏使用#undef，选择一个不会冲突的名称；\n- 不要试图使用展开后会导致 C++ 构造不稳定的宏, 不然也至少要附上文档说明其行为.\n- 不要用`##`处理函数，类和变量的名字。\n\n#### `nullptr`和`NULL`\n\n> Tip: 对于指针 (地址值), 到底是用`0`,`NULL`还是`nullptr`. C++11 项目用`nullptr`; C++03 项目则用`NULL`, 毕竟它看起来像指针。实际上，一些 C++ 编译器对`NULL`的定义比较特殊，可以输出有用的警告，特别是 `sizeof(NULL)`就和`sizeof(0)`不一样。\n\n#### `sizeof`\n\n> Tip: 尽可能用`sizeof(varname)`代替`sizeof(type)`.\n使用`sizeof(varname)`是因为当代码中变量类型改变时会自动更新. 您或许会用`sizeof(type)`处理不涉及任何变量的代码，比如处理来自外部或内部的数据格式，这时用变量就不合适了。\n\n#### `auto`\n\n> Tip: 用`auto`绕过烦琐的类型名，只要可读性好就继续用，别用在局部变量之外的地方。\n\n- 定义\n\nC++11 中，若变量被声明成`auto`, 那它的类型就会被自动匹配成初始化表达式的类型。您可以用`auto`来复制初始化或绑定引用。\n\n```C++\nvector<string> v;\n...\nauto s1 = v[0];  // 创建一份 v[0] 的拷贝。\nconst auto& s2 = v[0];  // s2 是 v[0] 的一个引用。\n```\n\n- 优点\n\nC++ 类型名有时又长又臭，特别是涉及模板或命名空间的时候。就像：\n\n```C++\nsparse_hash_map<string, int>::iterator iter = m.find(val);\n```\n\n返回类型好难读，代码目的也不够一目了然。重构其：\n\n```C++\nauto iter = m.find(val);\n```\n\n好多了。\n\n没有`auto`的话，我们不得不在同一个表达式里写同一个类型名两次，无谓的重复，就像：\n\n```C++\ndiagnostics::ErrorStatus* status = new diagnostics::ErrorStatus(\"xyz\");\n```\n\n有了 auto, 可以更方便地用中间变量，显式编写它们的类型轻松点。\n\n- 缺点\n\n类型够明显时，特别是初始化变量时，代码才会够一目了然。但以下就不一样了：\n\n```C++\nauto i = x.Lookup(key);\n```\n\n看不出其类型是啥，x 的类型声明恐怕远在几百行之外了。\n\n程序员必须会区分`auto`和`const auto&`的不同之处，否则会复制错东西。\n\nauto 和 C++11 列表初始化的合体令人摸不着头脑：\n\n```C++\nauto x(3);  // 圆括号。\nauto y{3};  // 大括号。\n```\n\n它们不是同一回事——`x`是`int`,`y`则是`std::initializer_list<int>`. 其它一般不可见的代理类型也有大同小异的陷阱。\n\n如果在接口里用`auto`, 比如声明头文件里的一个常量，那么只要仅仅因为程序员一时修改其值而导致类型变化的话——API 要翻天覆地了。\n\n- 结论\n\n`auto`只能用在局部变量里用。别用在文件作用域变量，命名空间作用域变量和类数据成员里。永远别列表初始化`auto`变量。\n\n`auto`还可以和 C++11 特性「尾置返回类型（trailing return type）」一起用，不过后者只能用在`lambda`表达式里。\n\n#### 列表初始化\n\n早在 C++03 里，聚合类型（aggregate types）就已经可以被列表初始化了，比如数组和不自带构造函数的结构体：\n\n```C++\nstruct Point { int x; int y; };\nPoint p = {1, 2};\n```\n\nC++11 中，该特性得到进一步的推广，任何对象类型都可以被列表初始化。示范如下：\n\n```C++\n// Vector 接收了一个初始化列表。\nvector<string> v{\"foo\", \"bar\"};\n\n// 不考虑细节上的微妙差别，大致上相同。\n// 您可以任选其一。\nvector<string> v = {\"foo\", \"bar\"};\n\n// 可以配合 new 一起用。\nauto p = new vector<string>{\"foo\", \"bar\"};\n\n// 初始化列表也可以用在返回类型上的隐式转换。\nvector<int> test_function() { return {1, 2, 3}; }\n\n// 初始化列表可迭代。\nfor (int i : {-1, -2, -3}) {}\n\n// 在函数调用里用列表初始化。\nvoid TestFunction2(vector<int> v) {}\nTestFunction2({1, 2, 3});\n```\n\n用户自定义类型也可以定义接收`std::initializer_list<T>`的构造函数和赋值运算符，以自动列表初始化：\n\n```C++\nclass MyType {\n public:\n  // std::initializer_list 专门接收 init 列表。\n  // 得以值传递。\n  MyType(std::initializer_list<int> init_list) {\n    for (int i : init_list) append(i);\n  }\n  MyType& operator=(std::initializer_list<int> init_list) {\n    clear();\n    for (int i : init_list) append(i);\n  }\n};\nMyType m{2, 3, 5, 7};\n```\n\n最后，列表初始化也适用于常规数据类型的构造，哪怕没有接收`std::initializer_list<T>`的构造函数。\n\n```C++\ndouble d{1.23};\n// MyOtherType 没有 std::initializer_list 构造函数，\n // 直接上接收常规类型的构造函数。\nclass MyOtherType {\n public:\n  explicit MyOtherType(string);\n  MyOtherType(int, string);\n};\nMyOtherType m = {1, \"b\"};\n// 不过如果构造函数是显式的（explict），您就不能用 `= {}` 了。\nMyOtherType m{\"b\"};\n```\n\n#### Lambda表达式\n\n> Tip: 适当使用`lambda`表达式。别用默认`lambda`捕获，所有捕获都要显式写出来。\n\n- 定义\n\n    Lambda 表达式是创建匿名函数对象的一种简易途径，常用于把函数当参数传，例如：\n\n    ```C++\n    std::sort(v.begin(), v.end(), [](int x, int y) {\n        return Weight(x) < Weight(y);\n    });\n    ```\n\n    C++11 首次提出 Lambdas, 还提供了一系列处理函数对象的工具，比如多态包装器（polymorphic wrapper）`std::function`.\n\n- 优点\n\n    - 传函数对象给 STL 算法，Lambdas 最简易，可读性也好。\n    - Lambdas,`std::functions`和`std::bind`可以搭配成通用回调机制（general purpose callback mechanism）；写接收有界函数为参数的函数也很容易了。\n\n- 缺点\n\n    - Lambdas 的变量捕获略旁门左道，可能会造成悬空指针。\n    - Lambdas 可能会失控；层层嵌套的匿名函数难以阅读。\n\n- 结论\n\n    - 按 format 小用 lambda 表达式怡情。\n    - **禁用默认捕获([=] [&])**，捕获都要显式写出来。打比方，比起`[=](int x) {return x + n;}`, 您该写成`[n](int x) {return x + n;}`才对，这样读者也好一眼看出`n`是被捕获的值。\n    - 匿名函数始终要简短，如果函数体超过了五行，那么还不如起名，或改用函数。\n    - 如果可读性更好，就显式写出 lambd 的尾置返回类型，就像auto.\n\n## 命名约定\n\n最重要的一致性规则是命名管理. 命名的风格能让我们在不需要去查找类型声明的条件下快速地了解某个名字代表的含义: 类型, 变量, 函数, 常量, 宏, 等等, 甚至. 我们大脑中的模式匹配引擎非常依赖这些命名规则.\n\n命名规则具有一定随意性, 但相比按个人喜好命名, 一致性更重要, 所以无论你认为它们是否重要, 规则总归是规则.\n\n#### 通用命名规则\n\n- 总述\n\n    函数命名, 变量命名, 文件命名要有描述性; 少用缩写\n\n- 说明\n\n    尽可能使用描述性的命名, 别心疼空间, 毕竟相比之下让代码易于新读者理解更重要. 不要用只有项目开发者能理解的缩写, 也不要通过砍掉几个字母来缩写单词.\n\n    ```C++\n    int price_count_reader;    // 无缩写\n    int num_errors;            // \"num\" 是一个常见的写法\n    int num_dns_connections;   // 人人都知道 \"DNS\" 是什么\n    ```\n\n    ```C++\n    int n;                     // 毫无意义.\n    int nerr;                  // 含糊不清的缩写.\n    int n_comp_conns;          // 含糊不清的缩写.\n    int wgc_connections;       // 只有贵团队知道是什么意思.\n    int pc_reader;             // \"pc\" 有太多可能的解释了.\n    int cstmr_id;              // 删减了若干字母.\n    ```\n\n    注意, 一些特定的广为人知的缩写是允许的, 例如用 i 表示迭代变量和用 T 表示模板参数.\n\n#### 文件命名\n\n- 总述\n\n    文件名要全部小写, 可以包含下划线`_`或连字符`-`, 依照项目的约定. 如果没有约定, 那么`_`更好.\n\n- 说明\n\n    可接受的文件命名示例:\n\n    - `my_useful_class.cc`\n    - `my-useful-class.cc`\n    - `myusefulclass.cc`\n    - `myusefulclass_test.cc` // `_unittest` 和 `_regtest` 已弃用\n\n    C++ 文件要以`.cc`结尾, 头文件以`.h`结尾. 专门插入文本的文件则以`.inc`结尾\n\n    不要使用已经存在于`/usr/include`下的文件名, 如`db.h`.\n\n    通常应尽量让文件名更加明确.`http_server_logs.h`就比`logs.h`要好. 定义类时文件名一般成对出现, 如`foo_bar.h`和`foo_bar.cc`, 对应于类`FooBar`.\n\n    内联函数必须放在`.h`文件中. 如果内联函数比较短, 就直接放在`.h`中.\n\n#### 类型命名\n\n- 总述\n\n    类型名称的每个单词首字母均大写, 不包含下划线: `MyExcitingClass`, `MyExcitingEnum`.\n\n- 说明\n\n    所有类型命名 —— 类, 结构体, 类型定义 (typedef), 枚举, 类型模板参数 —— 均使用相同约定, 即以大写字母开始, 每个单词首字母均大写, 不包含下划线. 例如:\n\n    ```C++\n    // 类和结构体\n    class UrlTable { ...\n    class UrlTableTester { ...\n    struct UrlTableProperties { ...\n\n    // 类型定义\n    typedef hash_map<UrlTableProperties *, string> PropertiesMap;\n\n    // using 别名\n    using PropertiesMap = hash_map<UrlTableProperties *, string>;\n\n    // 枚举\n    enum UrlTableErrors { ...\n    ```\n\n#### 变量命名\n\n- 总述\n\n    变量 (包括函数参数) 和数据成员名一律小写, 单词之间用下划线连接. 类的成员变量*以下划线结尾*, 但结构体的就不用, 如: `a_local_variable`, `a_struct_data_member`, `a_class_data_member_`.\n\n- 说明\n\n    - 普通变量命名\n\n    ```C++\n    string table_name;  // 好 - 用下划线.\n    string tablename;   // 好 - 全小写.\n    string tableName;  // 差 - 混合大小写\n    ```\n\n    - 类数据成员\n\n    ```C++\n    class TableInfo {\n      ...\n     private:\n      string table_name_;  // 好 - 后加下划线.\n      string tablename_;   // 好.\n      static Pool<TableInfo>* pool_;  // 好.\n    };\n    ```\n    \n    - 结构体变量\n    \n    ```C++\n    struct UrlTableProperties {\n      string name;\n      int num_entries;\n      static Pool<UrlTableProperties>* pool;\n    };\n    ```\n\n#### 常量命名\n\n- 总述\n\n    声明为`constexpr`或`const`的变量, 或在程序运行期间其值始终保持不变的,命名时以 “k” 开头, 大小写混合. 例如:\n\n    ```C++\n    const int kDaysInAWeek = 7;\n    ```\n\n- 说明\n\n所有具有静态存储类型的变量 (例如静态变量或全局变量) 都应当以此方式命名. 对于其他存储类型的变量, 如自动变量等, 这条规则是可选的. 如果不采用这条规则, 就按照一般的变量命名规则.\n\n#### 函数命名\n\n- 总述\n\n    常规函数使用大小写混合, 取值和设值函数则要求与变量名匹配: `MyExcitingFunction()`, `MyExcitingMethod()`, `my_exciting_member_variable()`, `set_my_exciting_member_variable()`.\n\n- 说明\n\n    一般来说, 函数名的每个单词首字母大写 (即 “驼峰变量名” 或 “帕斯卡变量名”), 没有下划线. 对于首字母缩写的单词, 更倾向于将它们视作一个单词进行首字母大写 (例如, 写作`StartRpc()`而非`StartRPC()`).\n\n    ```C++\n    AddTableEntry()\n    DeleteUrl()\n    OpenFileOrDie()\n    ```\n\n    取值和设值函数的命名与变量一致. 一般来说它们的名称与实际的成员变量对应, 但并不强制要求. 例如`int count()`与`void set_count(int count)`.\n\n#### 命名空间命名\n\n- 总述\n\n    命名空间以小写字母命名. 最高级命名空间的名字取决于项目名称. 要注意避免嵌套命名空间的名字之间和常见的顶级命名空间的名字之间发生冲突.\n\n    顶级命名空间的名称应当是项目名或者是该命名空间中的代码所属的团队的名字. 命名空间中的代码, 应当存放于和命名空间的名字匹配的文件夹或其子文件夹中.\n\n    要避免嵌套的命名空间与常见的顶级命名空间发生名称冲突. 由于名称查找规则的存在, 命名空间之间的冲突完全有可能导致编译失败. 尤其是, 不要创建嵌套的`std`命名空间. 建议使用更独特的项目标识符 (`websearch::index`,`websearch::index_util`) 而非常见的极易发生冲突的名称 (比如`websearch::util`).\n\n    对于`internal`命名空间, 要当心加入到同一`internal`命名空间的代码之间发生冲突 (由于内部维护人员通常来自同一团队, 因此常有可能导致冲突). 在这种情况下, 请使用文件名以使得内部名称独一无二 (例如对于`frobber.h`, 使用`websearch::index::frobber_internal`).\n\n#### 枚举命名\n\n- 总述\n\n    枚举的命名应当和 常量 或 宏 一致: `kEnumName`或是`ENUM_NAME`.\n\n- 说明\n\n    单独的枚举值应该优先采用 常量 的命名方式. 但 宏 方式的命名也可以接受. 枚举名`UrlTableErrors`(以及 `AlternateUrlTableErrors`) 是类型, 所以要用大小写混合的方式.\n\n    ```C++\n    enum UrlTableErrors {\n        kOK = 0,\n        kErrorOutOfMemory,\n        kErrorMalformedInput,\n    };\n    enum AlternateUrlTableErrors {\n        OK = 0,\n        OUT_OF_MEMORY = 1,\n        MALFORMED_INPUT = 2,\n    };\n    ```\n\n#### 宏命名\n\n你并不打算 使用宏, 对吧? 如果你一定要用, 像这样命名: `MY_MACRO_THAT_SCARES_SMALL_CHILDREN`.\n\n## 注释\n\n注释虽然写起来很痛苦, 但对保证代码可读性至关重要. 下面的规则描述了如何注释以及在哪儿注释. 当然也要记住: 注释固然很重要, 但最好的代码应当本身就是文档. 有意义的类型名和变量名, 要远胜过要用注释解释的含糊不清的名字.\n\n#### 注释风格\n\n- 总述\n\n    使用`//`或`/* */`, 统一就好.\n\n- 说明\n\n    `//`或`/* */`都可以; 但`//`更 常用. 要在如何注释及注释风格上确保统一.\n\n#### 文件注释\n\n- 总述\n\n    在每一个文件开头加入版权公告.\n\n    文件注释描述了该文件的内容. 如果一个文件只声明, 或实现, 或测试了一个对象, 并且这个对象已经在它的声明处进行了详细的注释, 那么就没必要再加上文件注释. 除此之外的其他文件都需要文件注释.\n\n- 说明\n\n    - 法律公告和作者信息\n\n        每个文件都应该包含许可证引用. 为项目选择合适的许可证版本.(比如, Apache 2.0, BSD, LGPL, GPL)\n\n        如果你对原始作者的文件做了重大修改, 请考虑删除原作者信息.\n    - 文件内容\n\n        如果一个`.h`文件声明了多个概念, 则文件注释应当对文件的内容做一个大致的说明, 同时说明各概念之间的联系. 一个一到两行的文件注释就足够了, 对于每个概念的详细文档应当放在各个概念中, 而不是文件注释中.\n\n        不要在`.h`和`.cc`之间复制注释, 这样的注释偏离了注释的实际意义.\n\n#### 类注释\n\n- 总述\n\n    每个类的定义都要附带一份注释, 描述类的功能和用法, 除非它的功能相当明显.\n\n    ```C++\n    // Iterates over the contents of a GargantuanTable.\n    // Example:\n    //    GargantuanTableIterator* iter = table->NewIterator();\n    //    for (iter->Seek(\"foo\"); !iter->done(); iter->Next()) {\n    //      process(iter->key(), iter->value());\n    //    }\n    //    delete iter;\n    class GargantuanTableIterator {\n    ...\n    };\n    ```\n\n- 说明\n\n    类注释应当为读者理解如何使用与何时使用类提供足够的信息, 同时应当提醒读者在正确使用此类时应当考虑的因素. 如果类有任何同步前提, 请用文档说明. 如果该类的实例可被多线程访问, 要特别注意文档说明多线程环境下相关的规则和常量使用.\n\n    如果你想用一小段代码演示这个类的基本用法或通常用法, 放在类注释里也非常合适.\n\n    如果类的声明和定义分开了(例如分别放在了`.h`和`.cc`文件中), 此时, 描述类用法的注释应当和接口定义放在一起, 描述类的操作和实现的注释应当和实现放在一起.\n\n#### 函数注释\n\n- 总述\n\n函数声明处的注释描述函数功能; 定义处的注释描述函数实现.\n\n- 说明\n\n    - 函数说明\n\n        基本上每个函数声明处前都应当加上注释, 描述函数的功能和用途. 只有在函数的功能简单而明显时才能省略这些注释(例如, 简单的取值和设值函数). 注释使用叙述式 (“Opens the file”) 而非指令式 (“Open the file”); 注释只是为了描述函数, 而不是命令函数做什么. 通常, 注释不会描述函数如何工作. 那是函数定义部分的事情.\n\n        函数声明处注释的内容:\n\n        - 函数的输入输出.\n        - 对类成员函数而言: 函数调用期间对象是否需要保持引用参数, 是否会释放这些参数.\n        - 函数是否分配了必须由调用者释放的空间.\n        - 参数是否可以为空指针.\n        - 是否存在函数使用上的性能隐患.\n        - 如果函数是可重入的, 其同步前提是什么?\n\n        举例如下\n\n        ```C++\n        // Returns an iterator for this table.  It is the client's\n        // responsibility to delete the iterator when it is done with it,\n        // and it must not use the iterator once the GargantuanTable object\n        // on which the iterator was created has been deleted.\n        //\n        // The iterator is initially positioned at the beginning of the table.\n        //\n        // This method is equivalent to:\n        //    Iterator* iter = table->NewIterator();\n        //    iter->Seek(\"\");\n        //    return iter;\n        // If you are going to immediately seek to another place in the\n        // returned iterator, it will be faster to use NewIterator()\n        // and avoid the extra seek.\n        Iterator* GetIterator() const;\n        ```\n\n        但也要避免罗罗嗦嗦, 或者对显而易见的内容进行说明. 下面的注释就没有必要加上 “否则返回 false”, 因为已经暗含其中了:\n\n        ```C++\n        // Returns true if the table cannot hold any more entries.\n        bool IsTableFull();\n        ```\n\n        注释函数重载时, 注释的重点应该是函数中被重载的部分, 而不是简单的重复被重载的函数的注释. 多数情况下, 函数重载不需要额外的文档, 因此也没有必要加上注释.\n\n        注释构造/析构函数时, 切记读代码的人知道构造/析构函数的功能, 所以 “销毁这一对象” 这样的注释是没有意义的. 你应当注明的是注明构造函数对参数做了什么 (例如, 是否取得指针所有权) 以及析构函数清理了什么. 如果都是些无关紧要的内容, 直接省掉注释. 析构函数前没有注释是很正常的.\n        \n    - 函数定义\n\n        如果函数的实现过程中用到了很巧妙的方式, 那么在函数定义处应当加上解释性的注释. 例如, 你所使用的编程技巧, 实现的大致步骤, 或解释如此实现的理由. 举个例子, 你可以说明为什么函数的前半部分要加锁而后半部分不需要.\n\n        不要 从`.h`文件或其他地方的函数声明处直接复制注释. 简要重述函数功能是可以的, 但注释重点要放在如何实现上.\n\n#### 变量注释\n\n- 总述\n\n通常变量名本身足以很好说明变量用途. 某些情况下, 也需要额外的注释说明.\n\n- 说明\n\n    - 类数据成员\n\n        每个类数据成员 (也叫实例变量或成员变量) 都应该用注释说明用途. 如果有非变量的参数(例如特殊值, 数据成员之间的关系, 生命周期等)不能够用类型与变量名明确表达, 则应当加上注释. 然而, 如果变量类型与变量名已经足以描述一个变量, 那么就不再需要加上注释.\n\n        特别地, 如果变量可以接受`NULL`或`-1`等警戒值, 须加以说明. 比如:\n\n        ```C++\n        private:\n        // Used to bounds-check table accesses. -1 means\n        // that we don't yet know how many entries the table has.\n        int num_total_entries_;\n        ```\n\n    - 全局变量\n\n        和数据成员一样, 所有全局变量也要注释说明含义及用途, 以及作为全局变量的原因. 比如:\n\n        ```C++\n        // The total number of tests cases that we run through in this regression test.\n        const int kNumTestCases = 6;\n        ```\n\n#### 实现注释\n\n- 总述\n\n对于代码中巧妙的, 晦涩的, 有趣的, 重要的地方加以注释.\n\n- 说明\n\n    - 代码前注释\n\n        巧妙或复杂的代码段前要加注释. 比如:\n\n        ```C++\n        // Divide result by two, taking into account that x\n        // contains the carry from the add.\n        for (int i = 0; i < result->size(); i++) {\n        x = (x << 8) + (*result)[i];\n        (*result)[i] = x >> 1;\n        x &= 1;\n        }\n        ```\n\n    - 行注释\n\n        比较隐晦的地方要在行尾加入注释. 在行尾空两格进行注释. 比如:\n\n        ```C++\n        // If we have enough memory, mmap the data portion too.\n        mmap_budget = max<int64>(0, mmap_budget - index_->length());\n        if (mmap_budget >= data_size_ && !MmapData(mmap_chunk_bytes, mlock))\n        return;  // Error already logged.\n        ```\n\n        注意, 这里用了两段注释分别描述这段代码的作用, 和提示函数返回时错误已经被记入日志.\n\n    - 函数参数注释\n\n        如果函数参数的意义不明显, 考虑用下面的方式进行弥补:\n\n        - 如果参数是一个字面常量, 并且这一常量在多处函数调用中被使用, 用以推断它们一致, 你应当用一个常量名让这一约定变得更明显, 并且保证这一约定不会被打破.\n        - 考虑更改函数的签名, 让某个`bool`类型的参数变为`enum`类型, 这样可以让这个参数的值表达其意义.\n        - 如果某个函数有多个配置选项, 你可以考虑定义一个类或结构体以保存所有的选项, 并传入类或结构体的实例. 这样的方法有许多优点, 例如这样的选项可以在调用处用变量名引用, 这样就能清晰地表明其意义. 同时也减少了函数参数的数量, 使得函数调用更易读也易写. 除此之外, 以这样的方式, 如果你使用其他的选项, 就无需对调用点进行更改.\n        - 用具名变量代替大段而复杂的嵌套表达式.\n        - 万不得已时, 才考虑在调用点用注释阐明参数的意义.\n\n    - 不允许的行为\n\n        不要描述显而易见的现象, *永远不要*用自然语言翻译代码作为注释, 除非即使对深入理解 C++ 的读者来说代码的行为都是不明显的. 要假设读代码的人 C++ 水平比你高, 即便他/她可能不知道你的用意:\n\n        你所提供的注释应当解释代码*为什么*要这么做和代码的目的, 或者最好是让代码自文档化.\n\n        比较这样的注释:\n\n        ```C++\n        // Find the element in the vector.  <-- 差: 这太明显了!\n        auto iter = std::find(v.begin(), v.end(), element);\n        if (iter != v.end()) {\n            Process(element);\n        }\n        ```\n\n        和这样的注释:\n\n        ```C++\n        // Process \"element\" unless it was already processed.\n        auto iter = std::find(v.begin(), v.end(), element);\n        if (iter != v.end()) {\n            Process(element);\n        }\n        ```\n\n        自文档化的代码根本就不需要注释. 上面例子中的注释对下面的代码来说就是毫无必要的:\n\n        ```C++\n        if (!IsAlreadyProcessed(element)) {\n            Process(element);\n        }\n        ```\n\n#### TODO注释\n\n- 总述\n\n    对那些临时的, 短期的解决方案, 或已经够好但仍不完美的代码使用`TODO`注释.\n\n    `TODO`注释要使用全大写的字符串`TODO`,在随后的圆括号里写上你的名字, 邮件地址, bug ID, 或其它身份标识和与这一`TODO`相关的 issue. 主要目的是让添加注释的人 (也是可以请求提供更多细节的人) 可根据规范的`TODO`格式进行查找. 添加`TODO`注释并不意味着你要自己来修正, 因此当你加上带有姓名的`TODO`时, 一般都是写上自己的名字.\n\n    ```C++\n    // TODO(kl@gmail.com): Use a \"*\" here for concatenation operator.\n    // TODO(Zeke) change this to use relations.\n    // TODO(bug 12345): remove the \"Last visitors\" feature\n    ```\n\n    如果加`TODO`是为了在 “将来某一天做某事”, 可以附上一个非常明确的时间 “Fix by November 2005”), 或者一个明确的事项 (“Remove this code when all clients can handle XML responses.”).\n\n#### 小结\n\n1. 关于注释风格, 很多 C++ 的 coders 更喜欢行注释, C coders 或许对块注释依然情有独钟, 或者在文件头大段大段的注释时使用块注释\n1. 文件注释可以炫耀你的成就, 也是为了捅了篓子别人可以找你\n1. 注释要言简意赅, 不要拖沓冗余, 复杂的东西简单化和简单的东西复杂化都是要被鄙视的\n1. 对于 Chinese coders 来说, 用英文注释还是用中文注释, it is a problem, 但不管怎样, 注释是为了让别人看懂, 难道是为了炫耀编程语言之外的你的母语或外语水平吗\n1. 注释不要太乱, 适当的缩进才会让人乐意看. 但也没有必要规定注释从第几列开始 (我自己写代码的时候总喜欢这样), UNIX/LINUX 下还可以约定是使用 tab 还是 space, 个人倾向于 space\n1. TODO 很不错, 有时候, 注释确实是为了标记一些未完成的或完成的不尽如人意的地方, 这样一搜索, 就知道还有哪些活要干, 日志都省了\n\n## 格式\n\n#### 行长度\n\n- 总述\n\n    每一行代码字符数不超过 80.\n\n    我们也认识到这条规则是有争议的, 但很多已有代码都遵照这一规则, 因此我们感觉一致性更重要.\n\n- 优点\n\n    提倡该原则的人认为强迫他们调整编辑器窗口大小是很野蛮的行为. 很多人同时并排开几个代码窗口, 根本没有多余的空间拉伸窗口. 大家都把窗口最大尺寸加以限定, 并且 80 列宽是传统标准. 那么为什么要改变呢?\n\n- 缺点\n\n    \n    反对该原则的人则认为更宽的代码行更易阅读. 80 列的限制是上个世纪 60 年代的大型机的古板缺陷; 现代设备具有更宽的显示屏, 可以很轻松地显示更多代码.\n\n- 结论\n\n    80 个字符是最大值.\n\n    如果无法在不伤害易读性的条件下进行断行, 那么注释行可以超过 80 个字符, 这样可以方便复制粘贴. 例如, 带有命令示例或 URL 的行可以超过 80 个字符.\n\n    包含长路径的`#include`语句可以超出80列.\n\n#### 非ASCII字符\n\n- 总述\n\n    尽量不使用非 ASCII 字符, 使用时必须使用*UTF-8*编码.\n\n- 说明\n\n    即使是英文, 也不应将用户界面的文本硬编码到源代码中, 因此非 ASCII 字符应当很少被用到. 特殊情况下可以适当包含此类字符. 例如, 代码分析外部数据文件时, 可以适当硬编码数据文件中作为分隔符的非 ASCII 字符串; 更常见的是 (不需要本地化的) 单元测试代码可能包含非 ASCII 字符串. 此类情况下, 应使用 UTF-8 编码, 因为很多工具都可以理解和处理 UTF-8 编码.\n\n#### 空格还是制表位\n\n- 总述\n\n    只使用空格, 每次缩进2个空格.（如果你所在的项目使用4各空格缩进，那么请保持一致性）\n\n- 说明\n\n    我们使用空格缩进. 不要在代码中使用制表符. 你应该设置编辑器将制表符转为空格.\n\n#### 函数声明与定义\n\n- 总述\n\n    返回类型和函数名在同一行, 参数也尽量放在同一行, 如果放不下就对形参分行, 分行方式与函数调用一致.\n\n- 说明\n\n    函数看上去像这样:\n\n    ```C++\n    ReturnType ClassName::FunctionName(Type par_name1, Type par_name2) {\n      DoSomething();\n      ...\n    }\n    ```\n\n    如果同一行文本太多, 放不下所有参数:\n\n    ```C++\n    ReturnType ClassName::ReallyLongFunctionName(Type par_name1, Type par_name2,\n                                                 Type par_name3) {\n      DoSomething();\n      ...\n    }\n    ```\n\n    甚至连第一个参数都放不下:\n\n    ```C++\n    ReturnType LongClassName::ReallyReallyReallyLongFunctionName(\n        Type par_name1,  // 4 space indent\n        Type par_name2,\n        Type par_name3) {\n      DoSomething();  // 2 space indent\n      ...\n    }\n    ```\n\n    注意以下几点：\n\n    - 使用好的参数名.\n    - 只有在参数未被使用或者其用途非常明显时, 才能省略参数名.\n    - 如果返回类型和函数名在一行放不下, 分行.\n    - 如果返回类型与函数声明或定义分行了, 不要缩进.\n    - 左圆括号总是和函数名在同一行.\n    - 函数名和左圆括号间永远没有空格.\n    - 圆括号与参数间没有空格.\n    - 左大括号{总在最后一个参数同一行的末尾处, 不另起新行.\n    - 右大括号总是单独位于函数最后一行, 或者与左大括号同一行.\n    - 右圆括号和左大括号间总是有一个空格.\n    - 所有形参应尽可能对齐.\n    - 缺省缩进为 2 个空格.\n    - 换行后的参数保持 4 个空格的缩进.\n\n    未被使用的参数, 或者根据上下文很容易看出其用途的参数, 可以省略参数名:\n\n    ```C++\n    class Foo {\n     public:\n      Foo(Foo&&);\n      Foo(const Foo&);\n      Foo& operator=(Foo&&);\n      Foo& operator=(const Foo&);\n    };\n    ```\n\n    未被使用的参数如果其用途不明显的话, 在函数定义处将参数名注释起来:\n\n    ```C++\n    class Shape {\n     public:\n      virtual void Rotate(double radians) = 0;\n    };\n\n    class Circle : public Shape {\n     public:\n      void Rotate(double radians) override;\n    };\n\n    void Circle::Rotate(double /*radians*/) {}\n    ```\n\n    ```C++\n    // 差 - 如果将来有人要实现, 很难猜出变量的作用.\n    void Circle::Rotate(double) {}\n    ```\n\n    属性, 和展开为属性的宏, 写在函数声明或定义的最前面, 即返回类型之前:\n\n    ```C++\n    MUST_USE_RESULT bool IsOK();\n    ```\n\n#### Lambda表达式\n\n- 总述\n\n    Lambda 表达式对形参和函数体的格式化和其他函数一致; 捕获列表同理, 表项用逗号隔开.\n\n- 说明\n\n    若用引用捕获, 在变量名和`&`之间不留空格.\n\n    ```C++\n    int x = 0;\n    auto add_to_x = [&x](int n) { x += n; };\n    ```\n\n    短 lambda 就写得和内联函数一样.\n\n    ```C++\n    std::set<int> blacklist = {7, 8, 9};\n    std::vector<int> digits = {3, 9, 1, 8, 4, 7, 1};\n    digits.erase(std::remove_if(digits.begin(), digits.end(), [&blacklist](int i) {\n                   return blacklist.find(i) != blacklist.end();\n                }),\n                digits.end());\n    ```\n\n#### 函数调用\n\n- 总述\n\n\n    要么一行写完函数调用, 要么在圆括号里对参数分行, 要么参数另起一行且缩进四格. 如果没有其它顾虑的话, 尽可能精简行数, 比如把多个参数适当地放在同一行里.\n\n- 说明\n\n    函数调用遵循如下形式\n\n    ```C++\n    bool retval = DoSomething(argument1, argument2, argument3);\n    ```\n\n    如果同一行放不下, 可断为多行, 后面每一行都和第一个实参对齐, 左圆括号后和右圆括号前不要留空格：\n\n    ```C++\n    bool retval = DoSomething(averyveryveryverylongargument1,\n                              argument2, argument3);\n    ```\n\n    参数也可以放在次行, 缩进四格：\n\n    ```C++\n    if (...) {\n      ...\n      ...\n      if (...) {\n        DoSomething(\n            argument1, argument2,  // 4 空格缩进\n            argument3, argument4);\n    }\n    ```\n    \n    如果一些参数本身就是略复杂的表达式, 且降低了可读性, 那么可以直接创建临时变量描述该表达式, 并传递给函数：\n\n    ```C++\n    int my_heuristic = scores[x] * y + bases[x];\n    bool retval = DoSomething(my_heuristic, x, y, z);\n    ```\n\n    或者放着不管, 补充上注释：\n\n    ```C++\n    bool retval = DoSomething(scores[x] * y + bases[x],  // Score heuristic.\n                              x, y, z);\n    ```\n\n    如果某参数独立成行, 对可读性更有帮助的话, 那也可以如此做. 参数的格式处理应当以可读性而非其他作为最重要的原则.\n\n    此外, 如果一系列参数本身就有一定的结构, 可以酌情地按其结构来决定参数格式：\n\n    ```C++\n    // 通过 3x3 矩阵转换 widget.\n    my_widget.Transform(x1, x2, x3,\n                        y1, y2, y3,\n                        z1, z2, z3);\n    ```\n\n#### 列表初始化\n\n如果列表初始化伴随着名字, 比如类型或变量名, 格式化时将将名字视作函数调用名, {} 视作函数调用的括号. 如果没有名字, 就视作名字长度为零.\n\n```C++\n// 一行列表初始化示范.\nreturn {foo, bar};\nfunctioncall({foo, bar});\npair<int, int> p{foo, bar};\n\n// 当不得不断行时.\nSomeFunction(\n    {\"assume a zero-length name before {\"},  // 假设在 { 前有长度为零的名字.\n    some_other_function_parameter);\nSomeType variable{\n    some, other, values,\n    {\"assume a zero-length name before {\"},  // 假设在 { 前有长度为零的名字.\n    SomeOtherType{\n        \"Very long string requiring the surrounding breaks.\",  // 非常长的字符串, 前后都需要断行.\n        some, other values},\n    SomeOtherType{\"Slightly shorter string\",  // 稍短的字符串.\n                  some, other, values}};\nSomeType variable{\n    \"This is too long to fit all in one line\"};  // 字符串过长, 因此无法放在同一行.\nMyType m = {  // 注意了, 您可以在 { 前断行.\n    superlongvariablename1,\n    superlongvariablename2,\n    {short, interior, list},\n    {interiorwrappinglist,\n     interiorwrappinglist2}};\n```\n\n#### 条件语句\n\n- 总述\n\n    倾向于不在圆括号内使用空格. 关键字`if`和`else`另起一行.\n\n- 说明\n\n    对基本条件语句有两种可以接受的格式. 一种在圆括号和条件之间有空格, 另一种没有.\n\n    最常见的是没有空格的格式. 哪一种都可以, 最重要的是*保持一致*. 如果你是在修改一个文件, 参考当前已有格式. 如果是写新的代码, 参考目录下或项目中其它文件. 还在犹豫的话, 就不要加空格了.\n\n    ```C++\n    if (condition) {  // 圆括号里没有空格.\n      ...  // 2 空格缩进.\n    } else if (...) {  // else 与 if 的右括号同一行.\n      ...\n    } else {\n      ...\n    }\n    ```\n\n    注意所有情况下`if`和左圆括号间都有个空格. 右圆括号和左大括号之间也要有个空格:\n\n    ```C++\n    if(condition)     // 差 - IF 后面没空格.\n    if (condition){   // 差 - { 前面没空格.\n    if(condition){    // 变本加厉地差.\n    if (condition) {  // 好 - IF 和 { 都与空格紧邻.\n    ```\n\n    如果能增强可读性, 简短的条件语句允许写在同一行. 只有当语句简单并且没有使用`else`子句时使用:\n\n    ```C++\n    if (x == kFoo) return new Foo();\n    if (x == kBar) return new Bar();\n    ```\n\n    如果语句有`else`分支则不允许:\n\n    ```C++\n    // 不允许 - 当有 ELSE 分支时 IF 块却写在同一行\n    if (x) DoThis();\n    else DoThat();\n    ```\n\n    通常, 单行语句不需要使用大括号, 如果你喜欢用也没问题; 复杂的条件或循环语句用大括号可读性会更好. 也有一些项目要求`if`必须总是使用大括号:\n\n    ```C++\n    if (condition)\n      DoSomething();  // 2 空格缩进.\n\n    if (condition) {\n      DoSomething();  // 2 空格缩进.\n    }\n    ```\n\n    但如果语句中某个`if-else`分支使用了大括号的话, 其它分支也必须使用:\n\n    ```C++\n    // 不可以这样子 - IF 有大括号 ELSE 却没有.\n    if (condition) {\n      foo;\n    } else\n      bar;\n\n    // 不可以这样子 - ELSE 有大括号 IF 却没有.\n    if (condition)\n      foo;\n    else {\n      bar;\n    }\n    ```\n\n    ```C++\n    // 只要其中一个分支用了大括号, 两个分支都要用上大括号.\n    if (condition) {\n      foo;\n    } else {\n      bar;\n    }\n    ```\n\n#### 循环和开关选择语句\n\n- 总述\n\n    `switch`语句可以使用大括号分段, 以表明 cases 之间不是连在一起的. 在单语句循环里, 括号可用可不用. 空循环体应使用`{}`或`continue`.\n\n- 说明\n\n    `switch`语句中的`case`块可以使用大括号也可以不用, 取决于你的个人喜好. 如果用的话, 要按照下文所述的方法.\n\n    如果有不满足`case`条件的枚举值, `switch`应该总是包含一个`default`匹配 (如果有输入值没有 case 去处理, 编译器将给出 warning). 如果`default`应该永远执行不到, 简单的加条 `assert`:\n\n    ```C++\n    switch (var) {\n      case 0: {  // 2 空格缩进\n        ...      // 4 空格缩进\n        break;\n      }\n      case 1: {\n        ...\n        break;\n      }\n      default: {\n        assert(false);\n      }\n    }\n    ```\n\n    在单语句循环里, 括号可用可不用：\n\n    ```C++\n    for (int i = 0; i < kSomeNumber; ++i)\n      printf(\"I love you\\n\");\n\n    for (int i = 0; i < kSomeNumber; ++i) {\n      printf(\"I take it back\\n\");\n    }\n    ```\n\n    空循环体应使用`{}`或`continue`, 而不是一个简单的分号.\n\n    ```C++\n    while (condition) {\n      // 反复循环直到条件失效.\n    }\n    for (int i = 0; i < kSomeNumber; ++i) {}  // 可 - 空循环体.\n    while (condition) continue;  // 可 - contunue 表明没有逻辑.\n    ```\n\n#### 指针和引用表达式\n\n- 总述\n\n    句点或箭头前后不要有空格. 指针/地址操作符 (`*, &`) 之后不能有空格.\n\n- 说明\n\n    下面是指针和引用表达式的正确使用范例:\n\n    ```C++\n    x = *p;\n    p = &x;\n    x = r.y;\n    x = r->y;\n    ```\n\n    注意\n\n    - 在访问成员时, 句点或箭头前后没有空格.\n    - 指针操作符 * 或 & 后没有空格.\n\n    在声明指针变量或参数时, 星号与类型或变量名紧挨都可以:\n\n    ```C++\n    // 好, 空格前置.\n    char *c;\n    const string &str;\n\n    // 好, 空格后置.\n    char* c;\n    const string& str;\n    ```\n\n    ```C++\n    int x, *y;  // 不允许 - 在多重声明中不能使用 & 或 *\n    char * c;  // 差 - * 两边都有空格\n    const string & str;  // 差 - & 两边都有空格.\n    ```\n\n    在单个文件内要保持风格一致, 所以, 如果是修改现有文件, 要遵照该文件的风格.\n\n#### 布尔表达式\n\n- 总述\n\n    如果一个布尔表达式超过标准行宽, 断行方式要统一一下.\n\n- 说明\n\n    下例中, 逻辑与 (`&&`) 操作符总位于行尾:\n\n    ```C++\n    if (this_one_thing > this_other_thing &&\n        a_third_thing == a_fourth_thing &&\n        yet_another && last_one) {\n      ...\n    }\n    ```\n\n#### 函数返回值\n\n- 总述\n\n    不要在`return`表达式里加上非必须的圆括号.\n\n- 说明\n\n    只有在写`x = expr`要加上括号的时候才在`return expr;`里使用括号.\n\n    ```C++\n    return result;                  // 返回值很简单, 没有圆括号.\n    // 可以用圆括号把复杂表达式圈起来, 改善可读性.\n    return (some_long_condition &&\n            another_condition);\n    ```\n\n#### 变量及数组初始化\n\n- 总述\n\n    用`=`,`()`和`{}`均可.\n\n- 说明\n\n    您可以用`=`,`()`和`{}`, 以下的例子都是正确的：\n\n    ```C++\n    int x = 3;\n    int x(3);\n    int x{3};\n    string name(\"Some Name\");\n    string name = \"Some Name\";\n    string name{\"Some Name\"};\n    ```\n\n    请务必小心列表初始化`{...}`用`std::initializer_list`构造函数初始化出的类型. 非空列表初始化就会优先调用`std::initializer_list`, 不过空列表初始化除外, 后者原则上会调用默认构造函数. 为了强制禁用`std::initializer_list`构造函数, 请改用括号.\n\n    ```C++\n    vector<int> v(100, 1);  // 内容为 100 个 1 的向量.\n    vector<int> v{100, 1};  // 内容为 100 和 1 的向量.\n    ```\n\n    此外, 列表初始化不允许整型类型的四舍五入, 这可以用来避免一些类型上的编程失误.\n\n    ```C++\n    int pi(3.14);  // 好 - pi == 3.\n    int pi{3.14};  // 编译错误: 缩窄转换.\n    ```\n\n#### 预处理指令\n\n- 总述\n\n    预处理指令不要缩进, 从行首开始.\n\n- 说明\n\n    即使预处理指令位于缩进代码块中, 指令也应从行首开始.\n\n    ```C++\n    // 好 - 指令从行首开始\n      if (lopsided_score) {\n    #if DISASTER_PENDING      // 正确 - 从行首开始\n        DropEverything();\n    # if NOTIFY               // 非必要 - # 后跟空格\n        NotifyClient();\n    # endif\n    #endif\n        BackToNormal();\n      }\n    ```\n\n#### 构造函数初始值列表\n\n- 总述\n\n    构造函数初始化列表放在同一行或按四格缩进并排多行.\n\n- 说明\n\n    下面两种初始值列表方式都可以接受:\n\n    ```C++\n    // 如果所有变量能放在同一行:\n    MyClass::MyClass(int var) : some_var_(var) {\n      DoSomething();\n    }\n\n    // 如果不能放在同一行,\n    // 必须置于冒号后, 并缩进 4 个空格\n    MyClass::MyClass(int var)\n        : some_var_(var), some_other_var_(var + 1) {\n      DoSomething();\n    }\n\n    // 如果初始化列表需要置于多行, 将每一个成员放在单独的一行\n    // 并逐行对齐\n    MyClass::MyClass(int var)\n        : some_var_(var),             // 4 space indent\n        some_other_var_(var + 1) {  // lined up\n      DoSomething();\n    }\n\n    // 右大括号 } 可以和左大括号 { 放在同一行\n    // 如果这样做合适的话\n    MyClass::MyClass(int var)\n        : some_var_(var) {}\n    ```\n\n#### 命名空间格式化\n\n- 总述\n\n    命名空间内容不缩进.\n\n- 说明\n\n    命名空间 不要增加额外的缩进层次, 例如:\n\n    ```C++\n    namespace {\n\n    void foo() {  // 正确. 命名空间内没有额外的缩进.\n      ...\n    }\n\n    }  // namespace\n    ```\n\n    不要在命名空间内缩进:\n\n    ```C++\n    namespace {\n\n      // 错, 缩进多余了.\n      void foo() {\n        ...\n      }\n\n    }  // namespace\n    ```\n\n    声明嵌套命名空间时, 每个命名空间都独立成行.\n    \n    ```C++\n    namespace foo {\n    namespace bar {\n    ```\n\n#### 水平留白\n\n- 总述\n\n    水平留白的使用根据在代码中的位置决定. 永远不要在行尾添加没意义的留白.\n\n- 说明\n\n    - 通用\n\n        ```C++\n        void f(bool b) {  // 左大括号前总是有空格.\n          ...\n        int i = 0;  // 分号前不加空格.\n        // 列表初始化中大括号内的空格是可选的.\n        // 如果加了空格, 那么两边都要加上.\n        int x[] = { 0 };\n        int x[] = {0};\n\n        // 继承与初始化列表中的冒号前后恒有空格.\n        class Foo : public Bar {\n         public:\n          // 对于单行函数的实现, 在大括号内加上空格\n          // 然后是函数实现\n          Foo(int b) : Bar(), baz_(b) {}  // 大括号里面是空的话, 不加空格.\n          void Reset() { baz_ = 0; }  // 用括号把大括号与实现分开.\n        ...\n        ```\n\n        添加冗余的留白会给其他人编辑时造成额外负担. 因此, 行尾不要留空格. 如果确定一行代码已经修改完毕, 将多余的空格去掉; 或者在专门清理空格时去掉（尤其是在没有其他人在处理这件事的时候).\n\n    - 循环和条件语句\n\n        ```C++\n        if (b) {          // if 条件语句和循环语句关键字后均有空格.\n        } else {          // else 前后有空格.\n        }\n        while (test) {}   // 圆括号内部不紧邻空格.\n        switch (i) {\n        for (int i = 0; i < 5; ++i) {\n        switch ( i ) {    // 循环和条件语句的圆括号里可以与空格紧邻.\n        if ( test ) {     // 圆括号, 但这很少见. 总之要一致.\n        for ( int i = 0; i < 5; ++i ) {\n        for ( ; i < 5 ; ++i) {  // 循环里内 ; 后恒有空格, ;  前可以加个空格.\n        switch (i) {\n          case 1:         // switch case 的冒号前无空格.\n            ...\n          case 2: break;  // 如果冒号有代码, 加个空格.\n        ```\n\n    - 操作符\n\n        ```C++\n        // 赋值运算符前后总是有空格.\n        x = 0;\n\n        // 其它二元操作符也前后恒有空格, 不过对于表达式的子式可以不加空格.\n        // 圆括号内部没有紧邻空格.\n        v = w * x + y / z;\n        v = w*x + y/z;\n        v = w * (x + z);\n\n        // 在参数和一元操作符之间不加空格.\n        x = -5;\n        ++x;\n        if (x && !y)\n          ...\n        ```\n\n    - 模板和转换\n\n        ```C++\n        // 尖括号(< and >) 不与空格紧邻, < 前没有空格, > 和 ( 之间也没有.\n        vector<string> x;\n        y = static_cast<char*>(x);\n\n        // 在类型与指针操作符之间留空格也可以, 但要保持一致.\n        vector<char *> x;\n        ```\n\n#### 垂直留白\n\n- 总述\n\n    垂直留白越少越好.\n\n- 说明\n\n    这不仅仅是规则而是原则问题了: 不在万不得已, 不要使用空行. 尤其是: 两个函数定义之间的空行不要超过 2 行, 函数体首尾不要留空行, 函数体中也不要随意添加空行.\n\n    基本原则是: 同一屏可以显示的代码越多, 越容易理解程序的控制流. 当然, 过于密集的代码块和过于疏松的代码块同样难看, 这取决于你的判断. 但通常是垂直留白越少越好.\n\n    下面的规则可以让加入的空行更有效:\n\n    - 函数体内开头或结尾的空行可读性微乎其微.\n    - 在多重 if-else 块里加空行或许有点可读性.\n\n#### 总结\n\n- 对于代码格式, 因人, 系统而异各有优缺点, 但同一个项目中遵循同一标准还是有必要的;\n- 行宽原则上不超过 80 列, 把 22 寸的显示屏都占完, 怎么也说不过去;\n- 80 行限制事实上有助于避免代码可读性失控, 比如超多重嵌套块, 超多重函数调用等等.\n- 尽量不使用非 ASCII 字符, 如果使用的话, 参考 UTF-8 格式 (尤其是 UNIX/Linux 下, Windows 下可以考虑宽字符), 尽量不将字符串常量耦合到代码中, 比如独立出资源文件, 这不仅仅是风格问题了;\n- UNIX/Linux 下无条件使用空格, MSVC 的话使用 Tab 也无可厚非;\n- 函数参数, 逻辑条件, 初始化列表: 要么所有参数和函数名放在同一行, 要么所有参数并排分行;\n- 除函数定义的左大括号可以置于行首外, 包括函数/类/结构体/枚举声明, 各种语句的左大括号置于行尾, 所有右大括号独立成行;\n- Google 强调有一对 if-else 时, 不论有没有嵌套, 都要有大括号\n- `.`/`->` 操作符前后不留空格, `*`/`&` 不要前后都留, 一个就可, 靠左靠右依各人喜好;\n- 预处理指令/命名空间不使用额外缩进, 类/结构体/枚举/函数/语句使用缩进;\n- 初始化用`=`还是`()`依个人喜好, 统一就好;\n- `return`不要加`()`;\n- 水平/垂直留白不要滥用, 怎么易读怎么来.","source":"_posts/Google C++ Code Style.md","raw":"---\nlayout: post\ntitle: Google C++ 编程风格\nsubtitle: 养成良好的编程习惯和风格，让代码像诗一样优美\ndate: 2018-04-26\ncopyright: true\nphotos:\n  - images/tabs-or-spaces.png\ntags:\n  - C++\n  - 代码风格\ncategories:\n  - 编码技能\n---\n\n# Google C++ Code Style\n\nC++ 是 Google 大部分开源项目的主要编程语言。正如每个 C++ 程序员都知道的， C++ 有很多强大的特性， 但这种强大不可避免的导致它走向复杂，使代码更容易产生 bug， 难以阅读和维护。\n\n本指南的目的是通过详细阐述 C++ 注意事项来驾驭其复杂性。这些规则在保证代码易于管理的同时， 也能高效使用 C++ 的语言特性。\n\n<!-- more -->\n\n风格， 亦被称作可读性， 也就是指导 C++ 编程的约定. 使用术语 “风格” 有些用词不当， 因为这些习惯远不止源代码文件格式化这么简单。\n\n使代码易于管理的方法之一是加强代码一致性。让任何程序员都可以快速读懂你的代码这点非常重要。保持统一编程风格并遵守约定意味着可以很容易根据 “模式匹配” 规则来推断各种标识符的含义。创建通用， 必需的习惯用语和模式可以使代码更容易理解。在一些情况下可能有充分的理由改变某些编程风格， 但我们还是应该遵循一致性原则，尽量不这么做。\n\n## 头文件\n\n一个`.cc/.cpp`文件都应该对应一个`.h`文件。也有些常见例外，例如单元测试代码和只包含`main()`入口函数的源文件。\n\n#### Self-contained 头文件\n\n> Tip: 头文件应该能够自给自足（**self-contained**，也就是可以作为第一个头文件被引入），简单来说就是头文件中依赖的其他声明要在头文件中定义清楚，而不能依赖在`.cc`文件中调整引入顺序解决依赖。\n\n如果`.h`文件声明了一个模板或内联函数，同时也在该文件加以定义。凡是有用到这些的`.cc`文件，就得统统包含该头文件，否则程序可能会在构建中链接失败。\n\n有个例外：如果某函数模板为所有相关模板参数显式实例化，或本身就是某类的一个私有成员，那么它就只能定义在实例化该模板的 .cc 文件里。\n\n#### #define保护\n\n> Tip: 所有头文件都应该使用 `#define` 来防止头文件被多重包含， 命名格式当是: `<PROJECT>_<PATH>_<FILE>_H_`。\n\n为保证唯一性， 头文件的命名应该基于所在项目源代码树的全路径. 例如， 项目 `foo`中的头文件`foo/src/bar/baz.h`可按如下方式保护:\n\n```C++\n#ifndef FOO_BAR_BAZ_H_\n#define FOO_BAR_BAZ_H_\n...\n#endif // FOO_BAR_BAZ_H_\n```\n\n`#define` 与 `#pragma once`区别\n\n`#pragma once`是编译相关，就是说这个编译系统上能用，但在其他编译系统不一定可以，也就是说移植性差。\n\n所以尽量使用`#ifndef`来避免头文件重复引用。\n\n#### 前置声明\n\n> Tip: 尽可能地**避免使用**前置声明。使用 #include 包含需要的头文件即可。\n\n所谓「前置声明」（forward declaration）是类、函数和模板的纯粹声明，没伴随着其定义。\n\n- 优点\n\n    - 前置声明能够节省编译时间，多余的`#include`会迫使编译器展开更多的文件，处理更多的输入。\n    - 前置声明能够节省不必要的重新编译的时间。`#include`使代码因为头文件中无关的改动而被重新编译多次。\n\n- 缺点\n\n    - 前置声明隐藏了依赖关系，头文件改动时，用户的代码会跳过必要的重新编译过程。\n    - 前置声明可能会被库的后续更改所破坏。前置声明函数或模板有时会妨碍头文件开发者变动其API。例如扩大形参类型，加个自带默认参数的模板形参等等。\n    - 前置声明来自命名空间 `std::`的symbol时，其**行为未定义**。\n    - 很难判断什么时候该用前置声明，什么时候该用`#include`。极端情况下，用前置声明代替`includes`甚至都会暗暗地改变代码的含义：\n        ```C++\n        // b.h:\n        struct B {};\n        struct D : B {}\n\n        // good_user.cc:\n        #include \"b.h\"\n        void f(B*);\n        void f(void*);\n        void test(D* x) { f(x); }  // calls f(B*)\n        ```\n        如果`#include`被 B 和 D 的前置声明替代，`test()`就会调用`f(void*)`。\n    - 前置声明了不少来自头文件的symbol时，就会比单单一行的**include冗长**。\n    - 仅仅为了能前置声明而重构代码（比如用指针成员代替对象成员）会使代码变得更慢更复杂。\n\n- 结论\n\n    - 尽量避免前置声明那些定义在其他项目中的实体。\n    - 函数：总是使用`#include`。\n    - 类模板：优先使用`#include`。\n\n\n#### 内联函数\n\n> Tip: 只有当函数只有**10行甚至更少**时才将其定义为内联函数。\n\n- 定义\n\n    当函数被声明为内联函数之后， 编译器会将其内联展开， 而不是按通常的函数调用机制进行调用。\n\n- 优点\n\n    只要内联的函数体较小， 内联该函数可以令目标代码更加高效. 对于存取函数以及其它函数体比较短， 性能关键的函数， 鼓励使用内联。\n\n- 缺点\n\n    滥用内联将导致程序变得更慢。内联可能使目标代码量或增或减， 这取决于内联函数的大小。内联非常短小的存取函数通常会减少代码大小， 但内联一个相当大的函数将戏剧性的增加代码大小。现代处理器由于更好的利用了指令缓存， 小巧的代码往往执行更快。\n\n- 结论\n\n    一个较为合理的经验准则是， **不要内联超过10行**的函数。**谨慎对待析构函数**， 析构函数往往比其表面看起来要更长， 因为有隐含的成员和基类析构函数被调用!\n\n    有些函数即使声明为内联的也不一定会被编译器内联， 这点很重要; 比如**虚函数**和**递归函数**就不会被正常内联。通常， 递归函数不应该声明成内联函数，递归调用堆栈的展开并不像循环那么简单， 比如递归层数在编译时可能是未知的， 大多数编译器都不支持内联递归函数。虚函数内联的主要原因则是想把它的函数体放在类定义内， 为了图个方便， 抑或是当作文档描述其行为， 比如精短的存取函数.\n\n#### `#include`的路径及顺序\n\n> Tip: 使用标准的头文件包含顺序可增强可读性， 避免隐藏依赖: 相关头文件， C 库， C++ 库， 其他库的 .h， 本项目内的 .h。\n\n项目内头文件应按照项目源代码目录树结构排列， 避免使用 UNIX 特殊的快捷目录`.`(当前目录)或`..`(上级目录). 例如， `google-awesome-project/src/base/logging.h`应该按如下方式包含:\n\n> `#include \"base/logging.h\"`\n\n又如，`dir/foo.cc`或`dir/foo_test.cc`的主要作用是实现或测试`dir2/foo2.h`的功能，`foo.cc`中包含头文件的次序如下：\n\n1. `dir2/foo2.h`（优先位置，详情如下）\n1. C 系统文件\n1. C++ 系统文件\n1. 其他库的`.h`文件\n1. 本项目内`.h`文件\n\n这种优先的顺序排序保证当`dir2/foo2.h`遗漏某些必要的库时，`dir/foo.cc`或`dir/foo_test.cc`的构建会立刻中止。因此这一条规则保证维护这些文件的人们首先看到构建中止的消息而不是维护其他包的人们。\n\n您所依赖的符号(symbols)被哪些头文件所定义，您就应该包含`(include)`哪些头文件，前置声明(forward declarations)情况除外。比如您要用到`bar.h`中的某个符号， 哪怕您所包含的 `foo.h`已经包含了`bar.h`， 也照样得包含`bar.h`， 除非 `foo.h`有明确说明它会自动向您提供`bar.h`中的symbol。 不过，凡是cc文件所对应的「相关头文件」已经包含的，就不用再重复包含进其cc文件里面了，就像`foo.cc`只包含`foo.h`就够了，不用再管后者所包含的其它内容。\n\n举例来说，`google-awesome-project/src/foo/internal/fooserver.cc`的包含次序如下:\n\n```C++\n#include \"foo/public/fooserver.h\" // 优先位置\n\n#include <sys/types.h>\n#include <unistd.h>\n\n#include <hash_map>\n#include <vector>\n\n#include \"base/basictypes.h\"\n#include \"base/commandlineflags.h\"\n#include \"foo/public/bar.h\"\n```\n\n#### 小结\n\n1. 避免多重包含\n1. 头文件尽量避免使用前置声明，直接`include`\n1. 内联函数最好少于10行。类内部的函数一般会自动内联。所以某函数一旦不需要内联，其定义就不要再放在头文件里，而是放到对应的`.cc`文件里\n1. 包含文件的次序除了美观之外， 最重要的是可以减少隐藏依赖，使每个头文件在“最需要编译”的地方编译。\n\n## 作用域\n\n#### 命名空间\n\n> Tip: 鼓励在`.cc`文件内使用匿名命名空间或`static`声明. 使用具名的命名空间时，其名称可基于项目名或相对路径。**禁止使用using指示(using-directive e.g. using namespace foo;)**。禁止使用内联命名空间(inline namespace)。\n\n- 定义\n\n    命名空间将全局作用域细分为独立的， 具名的作用域， 可有效防止全局作用域的命名冲突。\n\n- 优点\n\n    类已经提将命名分割在不同类的作用域内， 命名空间在这基础上又封装了一层。\n\n    举例来说， 两个不同项目的全局作用域都有一个类`Foo`， 这样在编译或运行时造成冲突。如果每个项目将代码置于不同命名空间中，`project1::Foo`和`project2::Foo`作为不同符号自然不会冲突。\n\n    内联命名空间会自动把内部的标识符放到外层作用域，比如：\n\n    ```C++\n    namespace X {\n    inline namespace Y {\n    void foo();\n    }  // namespace Y\n    }  // namespace X\n    ```\n\n    `X::Y::foo()`与`X::foo()`彼此可代替。内联命名空间主要用来保持跨版本的 ABI 兼容性。\n\n- 缺点\n\n    命名空间具有迷惑性， 因为它们使得区分两个相同命名所指代的定义更加困难。\n\n    内联命名空间很容易令人迷惑，毕竟其内部的成员不再受其声明所在命名空间的限制。内联命名空间只在大型版本控制里有用。\n\n- 结论\n\n    根据下文将要提到的策略合理使用命名空间。\n    - 遵守`命名空间命名`中的规则。\n    - 像之前的几个例子中一样，在命名空间的最后注释出命名空间的名字。\n    - 用命名空间把文件包含， 以及类的前置声明**以外**的整个源文件封装起来， 以区别于其它命名空间:\n\n        ```C++\n        // .h 文件\n        namespace mynamespace {\n\n        // 所有声明都置于命名空间中\n        // 注意不要使用缩进\n        class MyClass {\n            public:\n            ...\n            void Foo();\n        };\n\n        } // namespace mynamespace\n        ```\n\n        ```C++\n        // .cc 文件\n        namespace mynamespace {\n\n        // 函数定义都置于命名空间中\n        void MyClass::Foo() {\n            ...\n        }\n\n        } // namespace mynamespace\n        ```\n    - 不要在命名空间`std`内声明任何东西， 包括标准库的类前置声明。在`std`命名空间声明实体是未定义的行为， 会导致如不可移植。声明标准库下的实体， 需要包含对应的头文件。\n    - 不应该使用`using`指示 引入整个命名空间的标识符号。\n        ```C++\n        // 禁止 —— 污染命名空间\n        using namespace foo;\n        ```\n    - 不要在头文件中使用`命名空间别名`除非显式标记内部命名空间使用。因为任何在头文件中引入的命名空间都会成为公开API的一部分。\n    - 禁止用内联命名空间\n\n#### 匿名命名空间和静态变量\n\n> Tip: 在`.cc`文件中定义一个不需要被外部引用的变量时，可以将它们放在匿名命名空间或声明为`static`。但是不要在`.h`文件中这么做。\n\n- 定义\n\n    所有置于匿名命名空间的声明都具有内部链接性，函数和变量可以经由声明为`static`拥有内部链接性，这意味着你在这个文件中声明的这些标识符都不能在另一个文件中被访问。即使两个文件声明了完全一样名字的标识符，它们所指向的实体实际上是完全不同的。\n\n- 结论\n\n    推荐、鼓励在`.cc`中对于不需要在其他地方引用的标识符使用内部链接性声明，但是不要在`.h`中使用。\n\n    匿名命名空间的声明和具名的格式相同，在最后注释上`namespace`:\n\n    ```C++\n    namespace {\n    ...\n    }  // namespace\n    ```\n\n#### 非成员函数、静态成员函数和全局函数\n\n> Tip: 使用静态成员函数或命名空间内的非成员函数，尽量不要用裸的全局函数。将一系列函数直接置于命名空间中，不要用类的静态方法模拟出命名空间的效果，类的静态方法应当和类的实例或静态数据紧密相关。\n\n- 优点\n\n    某些情况下，非成员函数和静态成员函数是非常有用的，将非成员函数放在命名空间内可避免污染全局作用域。\n\n- 缺点\n\n    将非成员函数和静态成员函数作为新类的成员或许更有意义，当它们需要访问外部资源或具有重要的依赖关系时更是如此。\n\n- 结论\n\n    有时，把函数的定义同类的实例脱钩是有益的，甚至是必要的。这样的函数可以被定义成静态成员，或是非成员函数。非成员函数不应依赖于外部变量，应尽量置于某个命名空间内。相比单纯为了封装若干不共享任何静态数据的静态成员函数而创建类，不如使用`2.1命名空间`。举例而言，对于头文件`myproject/foo_bar.h`，应当使用\n\n    ```C++\n    namespace myproject {\n    namespace foo_bar {\n    void Function1();\n    void Function2();\n    }  // namespace foo_bar\n    }  // namespace myproject\n    ```\n\n    而非\n\n    ```C++\n    namespace myproject {\n    class FooBar {\n    public:\n    static void Function1();\n    static void Function2();\n    };\n    }  // namespace myproject\n    ```\n\n    定义在同一编译单元的函数，被其他编译单元直接调用可能会引入不必要的耦合和链接时依赖；静态成员函数对此尤其敏感。可以考虑提取到新类中，或者将函数置于独立库的命名空间内。\n\n    如果你必须定义非成员函数，又只是在`.cc`文件中使用它，可使用`匿名命名空间`或`static`链接关键字(如`static int Foo() {...}`) 限定其作用域。\n\n#### 局部变量\n\n> Tip: 将函数变量尽可能置于最小作用域内, 并在变量声明时进行初始化。\n\nC++允许在函数的任何位置声明变量。我们提倡在尽可能小的作用域中声明变量，离第一次使用越近越好。这使得代码浏览者更容易定位变量声明的位置, 了解变量的类型和初始值。特别是，应使用初始化的方式替代声明再赋值, 比如:\n\n```C++\nint i;\ni = f(); // 坏——初始化和声明分离\n```\n\n```C++\nint j = g(); // 好——初始化时声明\n```\n\n```C++\nvector<int> v;\nv.push_back(1); // 用花括号初始化更好\nv.push_back(2);\n```\n\n```C++\nvector<int> v = {1, 2}; // 好——v 一开始就初始化\n```\n\n属于`if`,`while`和`for`语句的变量应当在这些语句中正常地声明，这样子这些变量的作用域就被限制在这些语句中了，举例而言:\n\n```C++\nwhile (const char* p = strchr(str, '/')) str = p + 1;\n```\n\n有一个例外, 如果变量是一个对象, 每次进入作用域都要调用其构造函数, 每次退出作用域都要调用其析构函数。这会导致效率降低。\n\n\n```C++\n// 低效的实现\nfor (int i = 0; i < 1000000; ++i) {\n    Foo f;    // 构造函数和析构函数分别调用 1000000 次!\n    f.DoSomething(i);\n}\n```\n\n```C++\nFoo f;    // 构造函数和析构函数只调用 1 次\nfor (int i = 0; i < 1000000; ++i) {\n    f.DoSomething(i);\n}\n```\n\n#### 静态和全局变量\n\n> Tip: 禁止定义静态储存周期非POD变量，禁止使用含有副作用的函数初始化POD全局变量，因为多编译单元中的静态变量执行时的构造和析构顺序是未明确的，这将导致代码的不可移植。\n\n静态生存周期的对象，即包括了全局变量，静态变量，静态类成员变量和函数静态变量，都必须是原生数据类型`(POD : Plain Old Data)`: 即`int`,`char`和`float`, 以及 POD类型的`指针`、`数组`和`结构体`。\n\n静态变量的构造函数、析构函数和初始化的顺序在`C++`中是只有部分明确的，甚至随着构建变化而变化，导致难以发现的 bug。所以除了禁用类类型的全局变量，我们也不允许用函数返回值来初始化POD 变量，除非该函数（比如 getenv() 或 getpid() ）不涉及任何全局变量。函数作用域里的静态变量除外，毕竟它的初始化顺序是有明确定义的，而且只会在指令执行到它的声明那里才会发生。\n\n综上所述，我们只允许POD类型的静态变量，即**完全禁用**`vector`(使用 C 数组替代) 和`string`(使用`const char []`)。\n\n#### 小结\n\n1. `cc`中的匿名命名空间可避免命名冲突, 限定作用域, 避免直接使用`using`关键字污染命名空间\n1. 尽量不用全局函数和全局变量, 考虑作用域和命名空间限制, 尽量单独形成编译单元\n1. 多线程中的全局变量 (含静态成员变量) 不要使用`class`类型(含 STL 容器), 避免不明确行为导致的 bug\n1. 局部变量在声明的同时进行显式值初始化，比起隐式初始化再赋值的两步过程要高效\n\n## 类\n\n类是 C++ 中代码的基本单元. 显然, 它们被广泛使用. 本节列举了在写一个类时的主要注意事项.\n\n#### 构造函数的职责\n\n- 总述\n\n    不要在构造函数中调用虚函数, 也不要在无法报出错误时进行可能失败的初始化.\n\n- 定义\n\n    在构造函数中可以进行各种初始化操作.\n\n- 优点\n\n    - 无需考虑类是否被初始化\n    - 经过构造函数完全初始化后的对象可以为`const`类型, 也能更方便地被标准容器或算法使用\n\n- 缺点\n\n    - 如果在构造函数内调用了自身的虚函数, 这类调用是不会重定向到子类的虚函数实现. 即使当前没有子类化实现, 将来仍是隐患.\n    - 如果执行失败, 会得到一个初始化失败的对象, 这个对象有可能进入不正常的状态, 必须使用`bool isValid()`或类似这样的机制才能检查出来, 然而这是一个十分容易被疏忽的方法.\n    - 构造函数的地址是无法被取得的, 因此, 举例来说, 由构造函数完成的工作是无法以简单的方式交给其他线程的.\n\n- 结论\n\n    构造函数不允许调用虚函数. 如果代码允许, 直接终止程序是一个合适的处理错误的方式. 否则, 考虑用`Init()`方法或工厂函数.\n\n#### 隐式类型转换\n\n- 总述\n\n    不要定义隐式类型转换. 对于转换运算符和单参数构造函数, 请使用`explicit`关键字.\n\n- 定义\n\n    隐式类型转换允许一个某种类型 (称作 源类型) 的对象被用于需要另一种类型 (称作 目的类型) 的位置, 例如, 将一个`int`类型的参数传递给需要`double`类型的函数.\n\n    `explicit`关键字可以用于构造函数或 (在 C++11 引入) 类型转换运算符, 以保证只有当目的类型在调用点被显式写明时才能进行类型转换,例如使用`cast`. 这不仅作用于隐式类型转换, 还能作用于 C++11 的列表初始化语法:\n\n    ```C++\n    class Foo {\n        explicit Foo(int x, double y);\n        ...\n    };\n\n    void Func(Foo f);\n    ```\n\n    此时下面的代码是不允许的:\n\n    ```C++\n    Func({42, 3.14});  // Error\n    ```\n\n    这一代码从技术上说并非隐式类型转换, 但是语言标准认为这是`explicit`应当限制的行为.\n\n- 优点\n\n    - 有时目的类型名是一目了然的, 通过避免显式地写出类型名, 隐式类型转换可以让一个类型的可用性和表达性更强.\n    - 隐式类型转换可以简单地取代函数重载.\n    - 在初始化对象时, 列表初始化语法是一种简洁明了的写法.\n\n- 缺点\n\n    - 隐式类型转换会隐藏类型不匹配的错误. 有时, 目的类型并不符合用户的期望, 甚至用户根本没有意识到发生了类型转换.\n    - 隐式类型转换会让代码难以阅读, 尤其是在有函数重载的时候, 因为这时很难判断到底是哪个函数被调用.\n    - 单参数构造函数有可能会被无意地用作隐式类型转换.\n    - 如果单参数构造函数没有加上`explicit`关键字, 读者无法判断这一函数究竟是要作为隐式类型转换, 还是作者忘了加上`explicit`标记.\n    - 并没有明确的方法用来判断哪个类应该提供类型转换, 这会使得代码变得含糊不清.\n    - 如果目的类型是隐式指定的, 那么列表初始化会出现和隐式类型转换一样的问题, 尤其是在列表中只有一个元素的时候.\n\n- 结论\n\n    在类型定义中, 类型转换运算符和单参数构造函数都应当用`explicit`进行标记. 一个例外是, 拷贝和移动构造函数不应当被标记为`explicit`, 因为它们并不执行类型转换.\n\n    不能以一个参数进行调用的构造函数不应当加上`explicit`. 接受一个`std::initializer_list`作为参数的构造函数也应当省略 `explicit`, 以便支持拷贝初始化 (例如`MyType m = {1, 2};`)\n\n#### 可拷贝类型和可移动类型\n\n- 总述\n\n    如果你的类型需要, 就让它们支持拷贝 / 移动. 否则, 就把隐式产生的拷贝和移动函数禁用.\n\n- 定义\n\n    可拷贝类型允许对象在初始化时得到来自相同类型的另一对象的值, 或在赋值时被赋予相同类型的另一对象的值, 同时不改变源对象的值. 对于用户定义的类型, 拷贝操作一般通过拷贝构造函数与拷贝赋值操作符定义. `string`类型就是一个可拷贝类型的例子.\n\n    可移动类型允许对象在初始化时得到来自相同类型的临时对象的值, 或在赋值时被赋予相同类型的临时对象的值 (因此所有可拷贝对象也是可移动的). `std::unique_ptr<int>`就是一个可移动但不可复制的对象的例子. 对于用户定义的类型, 移动操作一般是通过移动构造函数和移动赋值操作符实现的.\n\n    拷贝 / 移动构造函数在某些情况下会被编译器隐式调用. 例如, 通过传值的方式传递对象.\n\n- 优点\n\n    可移动及可拷贝类型的对象可以通过传值的方式进行传递或者返回, 这使得 API 更简单, 更安全也更通用. 与传指针和引用不同, 这样的传递不会造成所有权, 生命周期, 可变性等方面的混乱, 也就没必要在协议中予以明确. 这同时也防止了客户端与实现在非作用域内的交互, 使得它们更容易被理解与维护. 这样的对象可以和需要传值操作的通用 API 一起使用, 例如大多数容器.\n\n    拷贝 / 移动构造函数与赋值操作一般来说要比它们的各种替代方案, 比如`Clone()`, `CopyFrom()` or `Swap()`, 更容易定义, 因为它们能通过编译器产生, 无论是隐式的还是通过`= default`. 这种方式很简洁, 也保证所有数据成员都会被复制. 拷贝与移动构造函数一般也更高效, 因为它们不需要堆的分配或者是单独的初始化和赋值步骤, 同时,对于类似省略不必要的拷贝这样的优化它们也更加合适.\n\n    移动操作允许隐式且高效地将源数据转移出右值对象. 这有时能让代码风格更加清晰.\n\n- 缺点\n\n    许多类型都不需要拷贝, 为它们提供拷贝操作会让人迷惑, 也显得荒谬而不合理. 单件类型(`Registerer`), 与特定的作用域相关的类型 (`Cleanup`), 与其他对象实体紧耦合的类型 (`Mutex`) 从逻辑上来说都不应该提供拷贝操作. 为基类提供拷贝 / 赋值操作是有害的, 因为在使用它们时会造成对象切割. 默认的或者随意的拷贝操作实现可能是不正确的, 这往往导致令人困惑并且难以诊断出的错误.\n\n    拷贝构造函数是隐式调用的, 也就是说, 这些调用很容易被忽略. 这会让人迷惑, 尤其是对那些所用的语言约定或强制要求传引用的程序员来说更是如此. 同时, 这从一定程度上说会鼓励过度拷贝, 从而导致性能上的问题.\n\n- 结论\n\n    如果需要就让你的类型可拷贝 / 可移动. 作为一个经验法则, 如果对于你的用户来说这个拷贝操作不是一眼就能看出来的, 那就不要把类型设置为可拷贝. 如果让类型可拷贝, 一定要同时给出拷贝构造函数和赋值操作的定义, 反之亦然. 如果让类型可拷贝, 同时移动操作的效率高于拷贝操作, 那么就把移动的两个操作 (移动构造函数和赋值操作) 也给出定义. 如果类型不可拷贝, 但是移动操作的正确性对用户显然可见, 那么把这个类型设置为只可移动并定义移动的两个操作.\n\n    如果定义了拷贝/移动操作, 则要保证这些操作的默认实现是正确的. 记得时刻检查默认操作的正确性, 并且在文档中说明类是可拷贝的且/或可移动的.\n\n    ```C++\n    class Foo {\n    public:\n        Foo(Foo&& other) : field_(other.field) {}\n        // 差, 只定义了移动构造函数, 而没有定义对应的赋值运算符.\n\n    private:\n        Field field_;\n    };\n    ```\n\n    由于存在对象切割的风险, 不要为任何有可能有派生类的对象提供赋值操作或者拷贝 / 移动构造函数 (当然也不要继承有这样的成员函数的类). 如果你的基类需要可复制属性, 请提供一个`public virtual Clone()`和一个`protected`的拷贝构造函数以供派生类实现.\n\n    如果你的类不需要拷贝 / 移动操作, 请显式地通过在`public`域中使用`= delete`或其他手段禁用之.\n\n    ```C++\n    // MyClass is neither copyable nor movable.\n    MyClass(const MyClass&) = delete;\n    MyClass& operator=(const MyClass&) = delete;\n    ```\n\n#### 结构体 VS 类\n\n- 总述\n\n    仅当只有数据成员时使用`struct`, 其它一概使用`class`.\n\n- 说明\n\n    在 C++ 中`struct`和`class`关键字几乎含义一样. 我们为这两个关键字添加我们自己的语义理解, 以便为定义的数据类型选择合适的关键字.\n\n    `struct`用来定义包含数据的被动式对象, 也可以包含相关的常量, 但除了存取数据成员之外, 没有别的函数功能. 并且存取功能是通过直接访问位域, 而非函数调用. 除了构造函数, 析构函数, `Initialize()`, `Reset()`, `Validate()` 等类似的用于设定数据成员的函数外, 不能提供其它功能的函数.\n\n    如果需要更多的函数功能, `class`更适合. 如果拿不准, 就用 `class`.\n\n    为了和STL保持一致, 对于仿函数等特性可以不用`class`而是使用`struct`.\n\n    注意: 类和结构体的成员变量使用不同的命名规则.\n\n#### 继承\n\n- 总述\n\n    使用组合常常比使用继承更合理. 如果使用继承的话, 定义为 public 继承.\n\n- 定义\n\n    当子类继承基类时, 子类包含了父基类所有数据及操作的定义. C++ 实践中, 继承主要用于两种场合: 实现继承, 子类继承父类的实现代码; 接口继承, 子类仅继承父类的方法名称.\n\n- 优点\n\n    实现继承通过原封不动的复用基类代码减少了代码量. 由于继承是在编译时声明, 程序员和编译器都可以理解相应操作并发现错误. 从编程角度而言, 接口继承是用来强制类输出特定的 API. 在类没有实现 API 中某个必须的方法时, 编译器同样会发现并报告错误.\n\n- 缺点\n\n    对于实现继承, 由于子类的实现代码散布在父类和子类间之间, 要理解其实现变得更加困难. 子类不能重写父类的非虚函数, 当然也就不能修改其实现. 基类也可能定义了一些数据成员, 因此还必须区分基类的实际布局.\n\n- 结论\n\n    所有继承必须是`public`的. 如果你想使用私有继承, 你应该替换成把基类的实例作为成员对象的方式.\n\n    不要过度使用实现继承. 组合常常更合适一些. 尽量做到只在 “是一个” (“is-a”, 其他 “has-a” 情况下请使用组合) 的情况下使用继承: 如果`Bar`的确 “是一种” `Foo`, `Bar`才能继承`Foo`.\n\n    必要的话, 析构函数声明为`virtual`. 如果你的类有虚函数, 则析构函数也应该为虚函数.\n\n    对于可能被子类访问的成员函数, 不要过度使用`protected`关键字. 注意, 数据成员都必须是**私有的**.\n\n    对于重载的虚函数或虚析构函数, 使用`override`, 或 (较不常用的)`final`关键字显式地进行标记. 较早 (早于 C++11) 的代码可能会使用`virtual`关键字作为不得已的选项. 因此, 在声明重载时, 请使用 `override`, `final`或`virtual`的其中之一进行标记. 标记为`override`或`final`的析构函数如果不是对基类虚函数的重载的话, 编译会报错, 这有助于捕获常见的错误. 这些标记起到了文档的作用, 因为如果省略这些关键字, 代码阅读者不得不检查所有父类, 以判断该函数是否是虚函数.\n\n#### 多重继承\n\n- 总述\n\n    真正需要用到多重实现继承的情况少之又少. 只在以下情况我们才允许多重继承: 最多只有一个基类是非抽象类; 其它基类都是以`Interface`为后缀的纯接口类.\n\n- 定义\n\n    多重继承允许子类拥有多个基类. 要将作为*纯接口*的基类和具有*实现*的基类区别开来.\n\n- 优点\n\n    相比单继承, 多重实现继承可以复用更多的代码.\n\n- 缺点\n\n    真正需要用到多重 实现 继承的情况少之又少. 有时多重实现继承看上去是不错的解决方案, 但这时你通常也可以找到一个更明确, 更清晰的不同解决方案.\n\n- 结论\n\n    只有当所有父类除第一个外都是*纯接口类*时, 才允许使用多重继承. 为确保它们是纯接口, 这些类必须以`Interface`为后缀.\n\n#### 接口\n\n- 总述\n\n    接口是指满足特定条件的类, 这些类以`Interface`为后缀 (不强制).\n\n- 定义\n\n    当一个类满足以下要求时, 称之为纯接口:\n\n    - 只有纯虚函数 (“`=0`”) 和静态函数 (除了下文提到的析构函数).\n    - 没有非静态数据成员.\n    - 没有定义任何构造函数. 如果有, 也不能带有参数, 并且必须为`protected`.\n    - 如果它是一个子类, 也只能从满足上述条件并以`Interface`为后缀的类继承.\n\n    接口类不能被直接实例化, 因为它声明了纯虚函数. 为确保接口类的所有实现可被正确销毁, 必须为之声明虚析构函数\n\n- 优点\n\n    以`Interface`为后缀可以提醒其他人不要为该接口类增加函数实现或非静态数据成员. 这一点对于`多重继承`尤其重要.\n\n- 缺点\n\n    `Interface`后缀增加了类名长度, 为阅读和理解带来不便. 同时, 接口属性作为实现细节不应暴露给用户.\n\n- 结论\n\n    只有在满足上述条件时, 类才以`Interface`结尾, 但反过来, 满足上述需要的类未必一定以`Interface`结尾.\n\n#### 运算符重载\n\n- 总述\n\n    除少数特定环境外, 不要重载运算符. 也不要创建用户定义字面量.\n\n- 定义\n\n    C++ 允许用户通过使用`operator`关键字对内建运算符进行重载定义, 只要其中一个参数是用户定义的类型. `operator`关键字还允许用户使用`operator\"\"`定义新的字面运算符, 并且定义类型转换函数, 例如`operator bool()`.\n\n- 优点\n\n    重载运算符可以让代码更简洁易懂, 也使得用户定义的类型和内建类型拥有相似的行为. 重载运算符对于某些运算来说是符合符合语言习惯的名称 (例如`==`,`<`,`=`,`<<`), 遵循这些语言约定可以让用户定义的类型更易读, 也能更好地和需要这些重载运算符的函数库进行交互操作.\n\n    对于创建用户定义的类型的对象来说, 用户定义字面量是一种非常简洁的标记.\n\n- 缺点\n\n    - 要提供正确, 一致, 不出现异常行为的操作符运算需要花费不少精力, 而且如果达不到这些要求的话, 会导致令人迷惑的 Bug.\n    - 过度使用运算符会带来难以理解的代码, 尤其是在重载的操作符的语义与通常的约定不符合时.\n    - 函数重载有多少弊端, 运算符重载就至少有多少.\n    - 运算符重载会混淆视听, 让你误以为一些耗时的操作和操作内建类型一样轻巧.\n    - 对重载运算符的调用点的查找需要的可就不仅仅是像 grep 那样的程序了, 这时需要能够理解 C++ 语法的搜索工具.\n    - 重载某些运算符本身就是有害的. 例如, 重载一元运算符 & 会导致同样的代码有完全不同的含义, 这取决于重载的声明对某段代码而言是否是可见的. 重载诸如`&&`,`||`和`,` 会导致运算顺序和内建运算的顺序不一致.\n\n- 结论\n\n    只有在意义明显, 不会出现奇怪的行为并且与对应的内建运算符的行为一致时才定义重载运算符. 例如, | 要作为位或或逻辑或来使用, 而不是作为 shell 中的管道.\n\n    只有对用户自己定义的类型重载运算符. 更准确地说, 将它们和它们所操作的类型定义在同一个头文件中, `.cc`中和命名空间中. 这样做无论类型在哪里都能够使用定义的运算符, 并且最大程度上避免了多重定义的风险. 如果可能的话, 请避免将运算符定义为模板, 因为此时它们必须对任何模板参数都能够作用. 如果你定义了一个运算符, 请将其相关且有意义的运算符都进行定义, 并且保证这些定义的语义是一致的. 例如, 如果你重载了`<`, 那么请将所有的比较运算符都进行重载, 并且保证对于同一组参数,`<`和`>`不会同时返回`true`.\n\n    不要为了避免重载操作符而走极端. 比如说, 应当定义`==`,`=`,和`<<`而不是`Equals()`,`CopyFrom()`和`PrintTo()`. 反过来说, 不要只是为了满足函数库需要而去定义运算符重载. 比如说, 如果你的类型没有自然顺序, 而你要将它们存入`std::set`中, 最好还是定义一个自定义的比较运算符而不是重载`<`.\n\n    不要重载`&&`,`||`,`,`或一元运算符`&`. 不要重载`operator\"\"`, 也就是说, 不要引入用户定义字面量.\n\n#### 存取控制\n\n- 总述\n\n    将*所有*数据成员声明为`private`, 除非是`static const`类型成员 (遵循 常量命名规则). 处于技术上的原因, 在使用`Google Test`时我们允许测试固件类中的数据成员为`protected`.\n\n#### 声明顺序\n\n- 总述\n\n    将相似的声明放在一起, 将`public`部分放在最前.\n\n- 说明\n\n    类定义一般应以`public:`开始, 后跟`protected:`, 最后是`private:`. 省略空部分.\n\n    在各个部分中, 建议将类似的声明放在一起, 并且建议以如下的顺序: 类型 (包括`typedef`,`using`和嵌套的结构体与类), 常量, 工厂函数, 构造函数, 赋值运算符, 析构函数, 其它函数, 数据成员.\n\n    不要将大段的函数定义内联在类定义中. 通常，只有那些普通的, 或性能关键且短小的函数可以内联在类定义中. 参见 内联函数 一节.\n\n#### 小结\n\n1. 不在构造函数中做太多逻辑相关的初始化\n1. 编译器提供的默认构造函数不会对变量进行初始化, 如果定义了其他构造函数, 编译器不再提供, 需要编码者自行提供默认构造函数\n1. 为避免隐式转换, 需将单参数构造函数声明为`explicit`\n1. 为避免拷贝构造函数, 赋值操作的滥用和编译器自动生成, 可将其声明为`private`且无需实现\n1. 仅在作为数据集合时使用`struct`\n1. 组合 > 实现继承 > 接口继承 > 私有继承, 子类重载的虚函数也要声明`virtual`关键字, 虽然编译器允许不这样做\n1. 避免使用多重继承, 使用时, 除一个基类含有实现外, 其他基类均为纯接口\n1. 接口类类名以`Interface`为后缀, 除提供带实现的虚析构函数, 静态成员函数外, 其他均为纯虚函数, 不定义非静态数据成员, 不提供构造函数, 提供的话, 声明为`protected`\n1. 为降低复杂性, 尽量不重载操作符, 模板, 标准类中使用时提供文档说明\n1. 存取函数一般内联在头文件中\n1. 声明次序:`public` -> `protected` -> `private`\n1. 函数体尽量短小, 紧凑, 功能单一\n\n## 函数\n\n#### 参数顺序\n\n- 总述\n\n    函数的参数顺序为: 输入参数在先, 后跟输出参数.\n\n- 说明\n\n    C/C++ 中的函数参数或者是函数的输入, 或者是函数的输出, 或兼而有之. 输入参数通常是值参或`const`引用, 输出参数或输入/输出参数则一般为非`const`指针. 在排列参数顺序时, 将所有的输入参数置于输出参数之前. 特别要注意, 在加入新参数时不要因为它们是新参数就置于参数列表最后, 而是仍然要按照前述的规则, 即将新的输入参数也置于输出参数之前.\n\n    这并非一个硬性规定. 输入/输出参数 (通常是类或结构体) 让这个问题变得复杂. 并且, 有时候为了其他函数保持一致, 你可能不得不有所变通.\n\n#### 编写简短函数\n\n- 总述\n\n    我们倾向于编写简短, 凝练的函数.\n\n- 说明\n\n    我们承认长函数有时是合理的, 因此并不硬性限制函数的长度. 如果函数超过`40`行, 可以思索一下能不能在不影响程序结构的前提下对其进行分割.\n\n    即使一个长函数现在工作的非常好, 一旦有人对其修改, 有可能出现新的问题, 甚至导致难以发现的 bug. 使函数尽量简短,以便于他人阅读和修改代码.\n\n    在处理代码时, 你可能会发现复杂的长函数. 不要害怕修改现有代码: 如果证实这些代码使用/调试起来很困难, 或者你只需要使用其中的一小段代码, 考虑将其分割为更加简短并易于管理的若干函数.\n\n#### 引用参数\n\n- 总述\n\n    所有按引用传递的参数必须加上`const`.\n\n- 定义\n\n    在 C 语言中, 如果函数需要修改变量的值, 参数必须为指针, 如`int foo(int *pval)`. 在 C++ 中, 函数还可以声明为引用参数: `int foo(int &val)`.\n\n- 优点\n\n    定义引用参数可以防止出现`(*pval)++`这样丑陋的代码. 引用参数对于拷贝构造函数这样的应用也是必需的. 同时也更明确地不接受空指针.\n\n- 缺点\n\n    容易引起误解, 因为引用在语法上是值变量却拥有指针的语义.\n\n- 结论\n\n    函数参数列表中, 所有引用参数都必须是`const`:\n\n    ```C++\n    void Foo(const string &in, string *out);\n    ```\n\n    事实上这在Google Code是一个硬性约定: 输入参数是值参或`const`引用, 输出参数为指针. 输入参数可以是`const`指针, 但决不能是非`const`的引用参数, 除非特殊要求, 比如 swap().\n\n    有时候, 在输入形参中用`const T*`指针比`const T&`更明智. 比如:\n\n    - 可能会传递空指针.\n    - 函数要把指针或对地址的引用赋值给输入形参.\n\n    总而言之, 大多时候输入形参往往是`const T&`. 若用`const T*`则说明输入另有处理. 所以若要使用`const T*`, 则应给出相应的理由, 否则会使得读者感到迷惑.\n\n#### 函数重载\n\n- 总述\n\n    若要使用函数重载, 则必须能让读者一看调用点就胸有成竹, 而不用花心思猜测调用的重载函数到底是哪一种. 这一规则也适用于构造函数.\n\n- 定义\n\n    你可以编写一个参数类型为`const string&`的函数, 然后用另一个参数类型为`const char*`的函数对其进行重载:\n\n    ```C++\n    class MyClass {\n        public:\n        void Analyze(const string &text);\n        void Analyze(const char *text, size_t textlen);\n    };\n    ```\n\n- 优点\n\n    通过重载参数不同的同名函数, 可以令代码更加直观. 模板化代码需要重载, 这同时也能为使用者带来便利.\n\n- 缺点\n\n    如果函数单靠不同的参数类型而重载, 读者就得十分熟悉 C++ 五花八门的匹配规则, 以了解匹配过程具体到底如何. 另外, 如果派生类只重载了某个函数的部分变体, 继承语义就容易令人困惑.\n\n- 结论\n\n    如果打算重载一个函数, 可以试试改在函数名里加上参数信息. 例如, 用`AppendString()`和`AppendInt()`等, 而不是一口气重载多个`Append()`. 如果重载函数的目的是为了支持不同数量的同一类型参数, 则优先考虑使用`std::vector`以便使用者可以用 列表初始化 指定参数.\n\n#### 缺省参数\n\n- 总述\n\n    只允许在非虚函数中使用缺省参数, 且必须保证缺省参数的值始终一致. 缺省参数与 函数重载 遵循同样的规则. 一般情况下建议使用函数重载, 尤其是在缺省函数带来的可读性提升不能弥补下文中所提到的缺点的情况下.\n\n- 优点\n\n    有些函数一般情况下使用默认参数, 但有时需要又使用非默认的参数. 缺省参数为这样的情形提供了便利, 使程序员不需要为了极少的例外情况编写大量的函数. 和函数重载相比, 缺省参数的语法更简洁明了, 减少了大量的样板代码, 也更好地区别了 “必要参数” 和 “可选参数”.\n\n- 缺点\n\n    缺省参数实际上是函数重载语义的另一种实现方式, 因此所有 不应当使用函数重载的理由 也都适用于缺省参数.\n\n    虚函数调用的缺省参数取决于目标对象的静态类型, 此时无法保证给定函数的所有重载声明的都是同样的缺省参数.\n\n    缺省参数是在每个调用点都要进行重新求值的, 这会造成生成的代码迅速膨胀. 作为读者, 一般来说也更希望缺省的参数在声明时就已经被固定了, 而不是在每次调用时都可能会有不同的取值.\n\n    缺省参数会干扰函数指针, 导致函数签名与调用点的签名不一致. 而函数重载不会导致这样的问题.\n\n- 结论\n\n    对于虚函数, 不允许使用缺省参数, 因为在虚函数中缺省参数不一定能正常工作. 如果在每个调用点缺省参数的值都有可能不同, 在这种情况下缺省函数也不允许使用. (例如, 不要写像`void f(int n = counter++);` 这样的代码.)\n\n    在其他情况下, 如果缺省参数对可读性的提升远远超过了以上提及的缺点的话, 可以使用缺省参数. 如果仍有疑惑, 就使用函数重载.\n\n\n## 来自Google的奇技\n\nGoogle 用了很多自己实现的技巧 / 工具使 C++ 代码更加健壮, 我们使用 C++ 的方式可能和你在其它地方见到的有所不同.\n\n#### 所有权与智能指针\n\n- 总述\n\n    动态分配出的对象最好有单一且固定的所有主, 并通过智能指针传递所有权.\n\n- 定义\n\n    所有权是一种登记／管理动态内存和其它资源的技术. 动态分配对象的所有主是一个对象或函数, 后者负责确保当前者无用时就自动销毁前者. 所有权有时可以共享, 此时就由最后一个所有主来负责销毁它. 甚至也可以不用共享, 在代码中直接把所有权传递给其它对象.\n\n    智能指针是一个通过重载`*`和`->`运算符以表现得如指针一样的类. 智能指针类型被用来自动化所有权的登记工作, 来确保执行销毁义务到位.`std::unique_ptr`是 C++11 新推出的一种智能指针类型, 用来表示动态分配出的对象的独一无二的所有权; 当`std::unique_ptr`离开作用域时, 对象就会被销毁.`std::unique_ptr`不能被复制, 但可以把它移动（move）给新所有主.`std::shared_ptr`同样表示动态分配对象的所有权, 但可以被共享, 也可以被复制; 对象的所有权由所有复制者共同拥有, 最后一个复制者被销毁时, 对象也会随着被销毁.\n\n- 优点\n\n    - 如果没有清晰、逻辑条理的所有权安排, 不可能管理好动态分配的内存.\n    - 传递对象的所有权, 开销比复制来得小, 如果可以复制的话.\n    - 传递所有权也比”借用”指针或引用来得简单, 毕竟它大大省去了两个用户一起协调对象生命周期的工作.\n    - 如果所有权逻辑条理, 有文档且不紊乱的话, 可读性会有很大提升.\n    - 可以不用手动完成所有权的登记工作, 大大简化了代码, 也免去了一大波错误之恼.\n    - 对于 const 对象来说, 智能指针简单易用, 也比深度复制高效.\n\n- 缺点\n\n    - 不得不用指针（不管是智能的还是原生的）来表示和传递所有权. 指针语义可要比值语义复杂得许多了, 特别是在 API 里：这时不光要操心所有权, 还要顾及别名, 生命周期, 可变性以及其它大大小小的问题.\n    - 其实值语义的开销经常被高估, 所以所有权传递带来的性能提升不一定能弥补可读性和复杂度的损失.\n    - 如果 API 依赖所有权的传递, 就会害得客户端不得不用单一的内存管理模型.\n    - 如果使用智能指针, 那么资源释放发生的位置就会变得不那么明显.\n    - `std::unique_ptr`的所有权传递原理是 C++11 的 move 语法, 后者毕竟是刚刚推出的, 容易迷惑程序员.\n    - 如果原本的所有权设计已经够完善了, 那么若要引入所有权共享机制, 可能不得不重构整个系统.\n    - 所有权共享机制的登记工作在运行时进行, 开销可能相当大.\n    - 某些极端情况下 (例如循环引用), 所有权被共享的对象永远不会被销毁.\n    - 智能指针并不能够完全代替原生指针.\n\n- 结论\n\n    如果必须使用动态分配, 那么更倾向于将所有权保持在分配者手中. 如果其他地方要使用这个对象, 最好传递它的拷贝, 或者传递一个不用改变所有权的指针或引用. 倾向于使用`std::unique_ptr`来明确所有权传递, 例如：\n\n    ```C++\n    std::unique_ptr<Foo> FooFactory();\n    void FooConsumer(std::unique_ptr<Foo> ptr);\n    ```\n\n    如果没有很好的理由, 则不要使用共享所有权. 这里的理由可以是为了避免开销昂贵的拷贝操作, 但是只有当性能提升非常明显, 并且操作的对象是不可变的（比如说`std::shared_ptr<const Foo>`）时候, 才能这么做. 如果确实要使用共享所有权, 建议于使用`std::shared_ptr`.\n\n    不要使用`std::auto_ptr`, 使用`std::unique_ptr`代替它.\n\n#### Cpplint\n\n- 总述\n\n    使用`cpplint.py`检查风格错误.\n\n- 说明\n\n    `cpplint.py`是一个用来分析源文件, 能检查出多种风格错误的工具. 它不并完美, 甚至还会漏报和误报, 但它仍然是一个非常有用的工具. 在行尾加`// NOLINT`, 或在上一行加`// NOLINTNEXTLINE`, 可以忽略报错.\n\n    某些项目会指导你如何使用他们的项目工具运行`cpplint.py`. 如果你参与的项目没有提供, 你可以单独下载`cpplint.py`.\n\n## 其他C++特性\n\n#### 引用参数\n\n>Tip: 所有按引用传递的参数**必须**加上`const`.\n\n- 定义\n\n    在 C 语言中, 如果函数需要修改变量的值, 参数必须为指针, 如`int foo(int *pval)`. 在 C++ 中, 函数还可以声明引用参数:`int foo(int &val)`.\n\n- 优点\n\n    定义引用参数防止出现`(*pval)++`这样丑陋的代码. 像拷贝构造函数这样的应用也是必需的. 而且更明确, 不接受`NULL`指针.\n\n- 缺点\n\n    容易引起误解, 因为引用在语法上是值变量却拥有指针的语义.\n\n- 结论\n\n    函数参数列表中, 所有引用参数都必须是`const`:\n\n    ```C++\n    void Foo(const string &in, string *out);\n    ```\n\n    事实上这在 Google Code 是一个硬性约定: 输入参数是值参或`const`引用, 输出参数为指针. 输入参数可以是`const`指针, 但决不能是非`const`的引用参数，除非用于交换，比如`swap()`.\n\n    有时候，在输入形参中用`const T*`指针比`const T&`更明智。比如：\n\n        - 您会传 null 指针。\n        - 函数要把指针或对地址的引用赋值给输入形参。\n\n    总之大多时候输入形参往往是`const T&`. 若用`const T*`说明输入另有处理。所以若您要用 `const T*`, 则应有理有据，否则会害得读者误解。\n\n#### 右值引用\n\n> Tip: 只在定义移动构造函数与移动赋值操作时使用右值引用. 不要使用`std::forward`.\n\n- 定义\n\n    右值引用是一种只能绑定到临时对象的引用的一种, 其语法与传统的引用语法相似. 例如,`void f(string&& s)`; 声明了一个其参数是一个字符串的右值引用的函数.\n\n- 优点\n\n    用于定义移动构造函数 (使用类的右值引用进行构造的函数) 使得移动一个值而非拷贝之成为可能. 例如, 如果`v1`是一个`vector<string>`, 则`auto v2(std::move(v1))`将很可能不再进行大量的数据复制而只是简单地进行指针操作, 在某些情况下这将带来大幅度的性能提升.\n\n- 缺点\n\n    右值引用是一个相对比较新的特性 (由 C++11 引入), 它尚未被广泛理解. 类似引用崩溃, 移动构造函数的自动推导这样的规则都是很复杂的.\n\n- 结论\n\n    只在定义移动构造函数与移动赋值操作时使用右值引用, 不要使用`std::forward`功能函数. 你可能会使用`std::move`来表示将值从一个对象移动而不是复制到另一个对象.\n\n#### 函数重载\n\n> Tip: 若要用好函数重载，最好能让读者一看调用点（call site）就胸有成竹，不用花心思猜测调用的重载函数到底是哪一种。该规则适用于构造函数。\n\n- 定义\n\n    你可以编写一个参数类型为`const string&`的函数, 然后用另一个参数类型为`const char*`的函数重载它:\n\n    ```C++\n    class MyClass {\n        public:\n        void Analyze(const string &text);\n        void Analyze(const char *text, size_t textlen);\n    };\n    ```\n\n- 优点\n\n    通过重载参数不同的同名函数, 令代码更加直观. 模板化代码需要重载, 同时为使用者带来便利.\n\n- 缺点\n\n    如果函数单单靠不同的参数类型而重载，读者就得十分熟悉 C++ 五花八门的匹配规则，以了解匹配过程具体到底如何。另外，当派生类只重载了某个函数的部分变体，继承语义容易令人困惑。\n\n- 结论\n\n    如果您打算重载一个函数, 可以试试改在函数名里加上参数信息。例如，用`AppendString()`和`AppendInt()`等， 而不是一口气重载多个`Append()`.\n\n#### 缺省参数\n\n> Tip: 我们不允许使用缺省函数参数，少数极端情况除外。尽可能改用函数重载。\n\n- 优点\n\n    当您有依赖缺省参数的函数时，您也许偶尔会修改修改这些缺省参数。通过缺省参数，不用再为个别情况而特意定义一大堆函数了。与函数重载相比，缺省参数语法更为清晰，代码少，也很好地区分了「必选参数」和「可选参数」。\n\n- 缺点\n\n    缺省参数会干扰函数指针，害得后者的函数签名（function signature）往往对不上所实际要调用的函数签名。即在一个现有函数添加缺省参数，就会改变它的类型，那么调用其地址的代码可能会出错，不过函数重载就没这问题了。此外，缺省参数会造成臃肿的代码，毕竟它们在每一个调用点（call site）都有重复。函数重载正好相反，毕竟它们所谓的「缺省参数」只会出现在函数定义里。\n\n- 结论\n\n    由于缺点并不是很严重，有些人依旧偏爱缺省参数胜于函数重载。所以除了以下情况，我们要求必须显式提供所有参数。\n\n    1. 位于`.cc`文件里的静态函数或匿名空间函数，毕竟都只能在局部文件里调用该函数了\n    1. 可以在构造函数里用缺省参数，毕竟不可能取得它们的地址\n    1. 可以用来模拟变长数组\n\n#### 变长数组和alloca()\n\n> Tip: 我们不允许使用变长数组和`alloca()`.\n\n- 优点\n\n    变长数组具有浑然天成的语法. 变长数组和`alloca()`也都很高效.\n\n- 缺点\n\n    变长数组和`alloca()`不是标准 C++ 的组成部分. 更重要的是, 它们根据数据大小动态分配堆栈内存, 会引起难以发现的内存越界 bugs: “在我的机器上运行的好好的, 发布后却莫名其妙的挂掉了”.\n\n- 结论\n\n    改用更安全的分配器（allocator），就像`std::vector`或`std::unique_ptr<T[]>`.\n\n#### 友元\n\n> Tip: 我们允许合理的使用友元类及友元函数.\n\n通常友元应该定义在同一文件内, 避免代码读者跑到其它文件查找使用该私有成员的类. 经常用到友元的一个地方是将`FooBuilder`声明为`Foo`的友元, 以便`FooBuilder`正确构造 Foo 的内部状态, 而无需将该状态暴露出来. 某些情况下, 将一个单元测试类声明成待测类的友元会很方便.\n\n友元扩大了 (但没有打破) 类的封装边界. 某些情况下, 相对于将类成员声明为`public`, 使用友元是更好的选择, 尤其是如果你只允许另一个类访问该类的私有成员时. 当然, 大多数类都只应该通过其提供的公有成员进行互操作.\n\n#### 运行时类型识别\n\n> Tip: 禁止使用 RTTI(Run-Time Type Identification).\n\n- 定义\n\n    RTTI 允许程序员在运行时识别 C++ 类对象的类型. 它通过使用`typeid`或者`dynamic_cast`完成.\n\n- 优点\n\n    RTTI 的标准替代 (下面将描述) 需要对有问题的类层级进行修改或重构. 有时这样的修改并不是我们所想要的, 甚至是不可取的, 尤其是在一个已经广泛使用的或者成熟的代码中.\n\n    RTTI 在某些单元测试中非常有用. 比如进行工厂类测试时, 用来验证一个新建对象是否为期望的动态类型. RTTI 对于管理对象和派生对象的关系也很有用.\n\n    在考虑多个抽象对象时 RTTI 也很好用. 例如:\n\n    ```C++\n    bool Base::Equal(Base* other) = 0;\n    bool Derived::Equal(Base* other) {\n    Derived* that = dynamic_cast<Derived*>(other);\n    if (that == NULL)\n        return false;\n    ...\n    }\n    ```\n\n- 缺点\n\n    在运行时判断类型通常意味着设计问题. 如果你需要在运行期间确定一个对象的类型, 这通常说明你需要考虑重新设计你的类.\n\n    随意地使用 RTTI 会使你的代码难以维护. 它使得基于类型的判断树或者 switch 语句散布在代码各处. 如果以后要进行修改, 你就必须检查它们.\n\n- 结论\n\n    基于类型的判断树是一个很强的暗示, 它说明你的代码已经偏离正轨了. 不要像下面这样:\n\n    ```C++\n    if (typeid(*data) == typeid(D1)) {\n    ...\n    } else if (typeid(*data) == typeid(D2)) {\n    ...\n    } else if (typeid(*data) == typeid(D3)) {\n    ...\n    ```\n\n    一旦在类层级中加入新的子类, 像这样的代码往往会崩溃. 而且, 一旦某个子类的属性改变了, 你很难找到并修改所有受影响的代码块.\n\n    不要去手工实现一个类似 RTTI 的方案. 反对 RTTI 的理由同样适用于这些方案, 比如带类型标签的类继承体系. 而且, 这些方案会掩盖你的真实意图.\n\n#### 类型转换\n\n> Tip: 使用 C++ 的类型转换, 如`static_cast<>()`. 不要使用`int y = (int)x`或`int y = int(x)`等转换方式\n\n- 定义\n\n    C++ 采用了有别于 C 的类型转换机制, 对转换操作进行归类.\n\n- 优点\n\n    C 语言的类型转换问题在于模棱两可的操作; 有时是在做强制转换 (如 `(int)3.5`), 有时是在做类型转换 (如 `(int)\"hello\"`). 另外, C++ 的类型转换在查找时更醒目.\n\n- 结论\n\n    不要使用 C 风格类型转换. 而应该使用 C++ 风格.\n    - 用`static_cast`替代 C 风格的值转换, 或某个类指针需要明确的向上转换为父类指针时.\n    - 用`const_cast`去掉`const`限定符.\n    - 用`reinterpret_cast`指针类型和整型或其它指针之间进行不安全的相互转换. 仅在你对所做一切了然于心时使用.\n\n#### 流\n\n> Tip: 只在记录日志时使用流.\n\n- 定义\n\n    流用来替代`printf()`和`scanf()`.\n\n- 优点\n\n    有了流, 在打印时不需要关心对象的类型. 不用担心格式化字符串与参数列表不匹配 (虽然在 gcc 中使用`printf`也不存在这个问题). 流的构造和析构函数会自动打开和关闭对应的文件.\n\n- 缺点\n\n    流使得`pread()`等功能函数很难执行. 如果不使用`printf`风格的格式化字符串, 某些格式化操作 (尤其是常用的格式字符串 %.*s) 用流处理性能是很低的. 流不支持字符串操作符重新排序 (%1s), 而这一点对于软件国际化很有用.\n\n- 结论\n\n    不要使用流, 除非是日志接口需要. 使用`printf`之类的代替.\n\n    使用流还有很多利弊, 但代码一致性胜过一切. 不要在代码中使用流.\n\n#### 前置自增和自减减\n\n> Tip: 对于迭代器和其他模板对象使用前缀形式`(++i)`的自增, 自减运算符.\n\n- 定义\n\n    对于变量在自增 (`++i`或`i++`) 或自减 (`--i`或`i--`) 后表达式的值又没有没用到的情况下, 需要确定到底是使用前置还是后置的自增 (自减).\n\n- 优点\n\n    不考虑返回值的话, 前置自增 (`++i`) 通常要比后置自增 (`i++`) 效率更高. 因为后置自增 (或自减) 需要对表达式的值 i 进行一次拷贝. 如果 i 是迭代器或其他非数值类型, 拷贝的代价是比较大的. 既然两种自增方式实现的功能一样, 为什么不总是使用前置自增呢?\n\n- 缺点\n\n    在 C 开发中, 当表达式的值未被使用时, 传统的做法是使用后置自增, 特别是在`for`循环中. 有些人觉得后置自增更加易懂, 因为这很像自然语言, 主语 (`i`) 在谓语动词 (`++`) 前.\n\n- 结论\n\n    对简单数值 (非对象), 两种都无所谓. 对迭代器和模板类型, 使用前置自增 (自减).\n\n#### `const`用法\n\n> Tip: 我们强烈建议你在任何可能的情况下都要使用`const`. 此外有时改用 C++11 推出的 constexpr 更好。\n\n- 定义\n\n    在声明的变量或参数前加上关键字`const`用于指明变量值不可被篡改 (如 `const int foo`). 为类中的函数加上`const`限定符表明该函数不会修改类成员变量的状态 (如`class Foo { int Bar(char c) const; };`).\n\n- 优点\n\n    大家更容易理解如何使用变量. 编译器可以更好地进行类型检测, 相应地, 也能生成更好的代码. 人们对编写正确的代码更加自信, 因为他们知道所调用的函数被限定了能或不能修改变量值. 即使是在无锁的多线程编程中, 人们也知道什么样的函数是安全的.\n\n- 缺点\n\n    `const`是入侵性的: 如果你向一个函数传入`const`变量, 函数原型声明中也必须对应`const`参数 (否则变量需要`const_cast`类型转换), 在调用库函数时显得尤其麻烦.\n\n- 结论\n\n    `const`变量, 数据成员, 函数和参数为编译时类型检测增加了一层保障; 便于尽早发现错误. 因此, 我们强烈建议在任何可能的情况下使用`const`:\n\n    - 如果函数不会修改传你入的引用或指针类型参数, 该参数应声明为 `const`.\n    - 尽可能将函数声明为`const`. 访问函数应该总是`const`. 其他不会修改任何数据成员, 未调用非`const`函数, 不会返回数据成员非 `const`指针或引用的函数也应该声明成`const`.\n    - 如果数据成员在对象构造之后不再发生变化, 可将其定义为`const`.\n\n#### `constexpr`用法\n\n> Tip: 在 C++11 里，用 constexpr 来定义真正的常量，或实现常量初始化。\n\n- 定义\n\n    变量可以被声明成`constexpr`以表示它是真正意义上的常量，即在编译时和运行时都不变。函数或构造函数也可以被声明成`constexpr`, 以用来定义 `constexpr`变量。\n\n- 优点\n\n    如今 constexpr 就可以定义浮点式的真・常量，不用再依赖字面值了；也可以定义用户自定义类型上的常量；甚至也可以定义函数调用所返回的常量。\n\n- 缺点\n\n    若过早把变量优化成 constexpr 变量，将来又要把它改为常规变量时，挺麻烦的；当前对constexpr函数和构造函数中允许的限制可能会导致这些定义中解决的方法模糊。\n\n- 结论\n\n    靠 constexpr 特性，方才实现了 C++ 在接口上打造真正常量机制的可能。好好用 constexpr 来定义真・常量以及支持常量的函数。避免复杂的函数定义，以使其能够与constexpr一起使用。 千万别痴心妄想地想靠 constexpr 来强制代码「内联」。\n\n#### 预处理宏\n\n> Tip: 使用宏时要非常谨慎, 尽量以内联函数, 枚举和常量代替之.\n\n宏意味着你和编译器看到的代码是不同的. 这可能会导致异常行为, 尤其因为宏具有全局作用域.\n\n值得庆幸的是, C++ 中, 宏不像在 C 中那么必不可少. 以往用宏展开性能关键的代码, 现在可以用内联函数替代. 用宏表示常量可被`const`变量代替. 用宏 “缩写” 长变量名可被引用代替. 用宏进行条件编译… 这个, 千万别这么做, 会令测试更加痛苦 (`#define`防止头文件重包含当然是个特例).\n\n宏可以做一些其他技术无法实现的事情, 在一些代码库 (尤其是底层库中) 可以看到宏的某些特性 (如用`#`字符串化, 用`##`连接等等). 但在使用前, 仔细考虑一下能不能不使用宏达到同样的目的.\n\n下面给出的用法模式可以避免使用宏带来的问题; 如果你要宏, 尽可能遵守:\n\n- 不要在`.h`文件中定义宏.\n- 在马上要使用时才进行`#define`, 使用后要立即 `#undef`.\n- 不要只是对已经存在的宏使用#undef，选择一个不会冲突的名称；\n- 不要试图使用展开后会导致 C++ 构造不稳定的宏, 不然也至少要附上文档说明其行为.\n- 不要用`##`处理函数，类和变量的名字。\n\n#### `nullptr`和`NULL`\n\n> Tip: 对于指针 (地址值), 到底是用`0`,`NULL`还是`nullptr`. C++11 项目用`nullptr`; C++03 项目则用`NULL`, 毕竟它看起来像指针。实际上，一些 C++ 编译器对`NULL`的定义比较特殊，可以输出有用的警告，特别是 `sizeof(NULL)`就和`sizeof(0)`不一样。\n\n#### `sizeof`\n\n> Tip: 尽可能用`sizeof(varname)`代替`sizeof(type)`.\n使用`sizeof(varname)`是因为当代码中变量类型改变时会自动更新. 您或许会用`sizeof(type)`处理不涉及任何变量的代码，比如处理来自外部或内部的数据格式，这时用变量就不合适了。\n\n#### `auto`\n\n> Tip: 用`auto`绕过烦琐的类型名，只要可读性好就继续用，别用在局部变量之外的地方。\n\n- 定义\n\nC++11 中，若变量被声明成`auto`, 那它的类型就会被自动匹配成初始化表达式的类型。您可以用`auto`来复制初始化或绑定引用。\n\n```C++\nvector<string> v;\n...\nauto s1 = v[0];  // 创建一份 v[0] 的拷贝。\nconst auto& s2 = v[0];  // s2 是 v[0] 的一个引用。\n```\n\n- 优点\n\nC++ 类型名有时又长又臭，特别是涉及模板或命名空间的时候。就像：\n\n```C++\nsparse_hash_map<string, int>::iterator iter = m.find(val);\n```\n\n返回类型好难读，代码目的也不够一目了然。重构其：\n\n```C++\nauto iter = m.find(val);\n```\n\n好多了。\n\n没有`auto`的话，我们不得不在同一个表达式里写同一个类型名两次，无谓的重复，就像：\n\n```C++\ndiagnostics::ErrorStatus* status = new diagnostics::ErrorStatus(\"xyz\");\n```\n\n有了 auto, 可以更方便地用中间变量，显式编写它们的类型轻松点。\n\n- 缺点\n\n类型够明显时，特别是初始化变量时，代码才会够一目了然。但以下就不一样了：\n\n```C++\nauto i = x.Lookup(key);\n```\n\n看不出其类型是啥，x 的类型声明恐怕远在几百行之外了。\n\n程序员必须会区分`auto`和`const auto&`的不同之处，否则会复制错东西。\n\nauto 和 C++11 列表初始化的合体令人摸不着头脑：\n\n```C++\nauto x(3);  // 圆括号。\nauto y{3};  // 大括号。\n```\n\n它们不是同一回事——`x`是`int`,`y`则是`std::initializer_list<int>`. 其它一般不可见的代理类型也有大同小异的陷阱。\n\n如果在接口里用`auto`, 比如声明头文件里的一个常量，那么只要仅仅因为程序员一时修改其值而导致类型变化的话——API 要翻天覆地了。\n\n- 结论\n\n`auto`只能用在局部变量里用。别用在文件作用域变量，命名空间作用域变量和类数据成员里。永远别列表初始化`auto`变量。\n\n`auto`还可以和 C++11 特性「尾置返回类型（trailing return type）」一起用，不过后者只能用在`lambda`表达式里。\n\n#### 列表初始化\n\n早在 C++03 里，聚合类型（aggregate types）就已经可以被列表初始化了，比如数组和不自带构造函数的结构体：\n\n```C++\nstruct Point { int x; int y; };\nPoint p = {1, 2};\n```\n\nC++11 中，该特性得到进一步的推广，任何对象类型都可以被列表初始化。示范如下：\n\n```C++\n// Vector 接收了一个初始化列表。\nvector<string> v{\"foo\", \"bar\"};\n\n// 不考虑细节上的微妙差别，大致上相同。\n// 您可以任选其一。\nvector<string> v = {\"foo\", \"bar\"};\n\n// 可以配合 new 一起用。\nauto p = new vector<string>{\"foo\", \"bar\"};\n\n// 初始化列表也可以用在返回类型上的隐式转换。\nvector<int> test_function() { return {1, 2, 3}; }\n\n// 初始化列表可迭代。\nfor (int i : {-1, -2, -3}) {}\n\n// 在函数调用里用列表初始化。\nvoid TestFunction2(vector<int> v) {}\nTestFunction2({1, 2, 3});\n```\n\n用户自定义类型也可以定义接收`std::initializer_list<T>`的构造函数和赋值运算符，以自动列表初始化：\n\n```C++\nclass MyType {\n public:\n  // std::initializer_list 专门接收 init 列表。\n  // 得以值传递。\n  MyType(std::initializer_list<int> init_list) {\n    for (int i : init_list) append(i);\n  }\n  MyType& operator=(std::initializer_list<int> init_list) {\n    clear();\n    for (int i : init_list) append(i);\n  }\n};\nMyType m{2, 3, 5, 7};\n```\n\n最后，列表初始化也适用于常规数据类型的构造，哪怕没有接收`std::initializer_list<T>`的构造函数。\n\n```C++\ndouble d{1.23};\n// MyOtherType 没有 std::initializer_list 构造函数，\n // 直接上接收常规类型的构造函数。\nclass MyOtherType {\n public:\n  explicit MyOtherType(string);\n  MyOtherType(int, string);\n};\nMyOtherType m = {1, \"b\"};\n// 不过如果构造函数是显式的（explict），您就不能用 `= {}` 了。\nMyOtherType m{\"b\"};\n```\n\n#### Lambda表达式\n\n> Tip: 适当使用`lambda`表达式。别用默认`lambda`捕获，所有捕获都要显式写出来。\n\n- 定义\n\n    Lambda 表达式是创建匿名函数对象的一种简易途径，常用于把函数当参数传，例如：\n\n    ```C++\n    std::sort(v.begin(), v.end(), [](int x, int y) {\n        return Weight(x) < Weight(y);\n    });\n    ```\n\n    C++11 首次提出 Lambdas, 还提供了一系列处理函数对象的工具，比如多态包装器（polymorphic wrapper）`std::function`.\n\n- 优点\n\n    - 传函数对象给 STL 算法，Lambdas 最简易，可读性也好。\n    - Lambdas,`std::functions`和`std::bind`可以搭配成通用回调机制（general purpose callback mechanism）；写接收有界函数为参数的函数也很容易了。\n\n- 缺点\n\n    - Lambdas 的变量捕获略旁门左道，可能会造成悬空指针。\n    - Lambdas 可能会失控；层层嵌套的匿名函数难以阅读。\n\n- 结论\n\n    - 按 format 小用 lambda 表达式怡情。\n    - **禁用默认捕获([=] [&])**，捕获都要显式写出来。打比方，比起`[=](int x) {return x + n;}`, 您该写成`[n](int x) {return x + n;}`才对，这样读者也好一眼看出`n`是被捕获的值。\n    - 匿名函数始终要简短，如果函数体超过了五行，那么还不如起名，或改用函数。\n    - 如果可读性更好，就显式写出 lambd 的尾置返回类型，就像auto.\n\n## 命名约定\n\n最重要的一致性规则是命名管理. 命名的风格能让我们在不需要去查找类型声明的条件下快速地了解某个名字代表的含义: 类型, 变量, 函数, 常量, 宏, 等等, 甚至. 我们大脑中的模式匹配引擎非常依赖这些命名规则.\n\n命名规则具有一定随意性, 但相比按个人喜好命名, 一致性更重要, 所以无论你认为它们是否重要, 规则总归是规则.\n\n#### 通用命名规则\n\n- 总述\n\n    函数命名, 变量命名, 文件命名要有描述性; 少用缩写\n\n- 说明\n\n    尽可能使用描述性的命名, 别心疼空间, 毕竟相比之下让代码易于新读者理解更重要. 不要用只有项目开发者能理解的缩写, 也不要通过砍掉几个字母来缩写单词.\n\n    ```C++\n    int price_count_reader;    // 无缩写\n    int num_errors;            // \"num\" 是一个常见的写法\n    int num_dns_connections;   // 人人都知道 \"DNS\" 是什么\n    ```\n\n    ```C++\n    int n;                     // 毫无意义.\n    int nerr;                  // 含糊不清的缩写.\n    int n_comp_conns;          // 含糊不清的缩写.\n    int wgc_connections;       // 只有贵团队知道是什么意思.\n    int pc_reader;             // \"pc\" 有太多可能的解释了.\n    int cstmr_id;              // 删减了若干字母.\n    ```\n\n    注意, 一些特定的广为人知的缩写是允许的, 例如用 i 表示迭代变量和用 T 表示模板参数.\n\n#### 文件命名\n\n- 总述\n\n    文件名要全部小写, 可以包含下划线`_`或连字符`-`, 依照项目的约定. 如果没有约定, 那么`_`更好.\n\n- 说明\n\n    可接受的文件命名示例:\n\n    - `my_useful_class.cc`\n    - `my-useful-class.cc`\n    - `myusefulclass.cc`\n    - `myusefulclass_test.cc` // `_unittest` 和 `_regtest` 已弃用\n\n    C++ 文件要以`.cc`结尾, 头文件以`.h`结尾. 专门插入文本的文件则以`.inc`结尾\n\n    不要使用已经存在于`/usr/include`下的文件名, 如`db.h`.\n\n    通常应尽量让文件名更加明确.`http_server_logs.h`就比`logs.h`要好. 定义类时文件名一般成对出现, 如`foo_bar.h`和`foo_bar.cc`, 对应于类`FooBar`.\n\n    内联函数必须放在`.h`文件中. 如果内联函数比较短, 就直接放在`.h`中.\n\n#### 类型命名\n\n- 总述\n\n    类型名称的每个单词首字母均大写, 不包含下划线: `MyExcitingClass`, `MyExcitingEnum`.\n\n- 说明\n\n    所有类型命名 —— 类, 结构体, 类型定义 (typedef), 枚举, 类型模板参数 —— 均使用相同约定, 即以大写字母开始, 每个单词首字母均大写, 不包含下划线. 例如:\n\n    ```C++\n    // 类和结构体\n    class UrlTable { ...\n    class UrlTableTester { ...\n    struct UrlTableProperties { ...\n\n    // 类型定义\n    typedef hash_map<UrlTableProperties *, string> PropertiesMap;\n\n    // using 别名\n    using PropertiesMap = hash_map<UrlTableProperties *, string>;\n\n    // 枚举\n    enum UrlTableErrors { ...\n    ```\n\n#### 变量命名\n\n- 总述\n\n    变量 (包括函数参数) 和数据成员名一律小写, 单词之间用下划线连接. 类的成员变量*以下划线结尾*, 但结构体的就不用, 如: `a_local_variable`, `a_struct_data_member`, `a_class_data_member_`.\n\n- 说明\n\n    - 普通变量命名\n\n    ```C++\n    string table_name;  // 好 - 用下划线.\n    string tablename;   // 好 - 全小写.\n    string tableName;  // 差 - 混合大小写\n    ```\n\n    - 类数据成员\n\n    ```C++\n    class TableInfo {\n      ...\n     private:\n      string table_name_;  // 好 - 后加下划线.\n      string tablename_;   // 好.\n      static Pool<TableInfo>* pool_;  // 好.\n    };\n    ```\n    \n    - 结构体变量\n    \n    ```C++\n    struct UrlTableProperties {\n      string name;\n      int num_entries;\n      static Pool<UrlTableProperties>* pool;\n    };\n    ```\n\n#### 常量命名\n\n- 总述\n\n    声明为`constexpr`或`const`的变量, 或在程序运行期间其值始终保持不变的,命名时以 “k” 开头, 大小写混合. 例如:\n\n    ```C++\n    const int kDaysInAWeek = 7;\n    ```\n\n- 说明\n\n所有具有静态存储类型的变量 (例如静态变量或全局变量) 都应当以此方式命名. 对于其他存储类型的变量, 如自动变量等, 这条规则是可选的. 如果不采用这条规则, 就按照一般的变量命名规则.\n\n#### 函数命名\n\n- 总述\n\n    常规函数使用大小写混合, 取值和设值函数则要求与变量名匹配: `MyExcitingFunction()`, `MyExcitingMethod()`, `my_exciting_member_variable()`, `set_my_exciting_member_variable()`.\n\n- 说明\n\n    一般来说, 函数名的每个单词首字母大写 (即 “驼峰变量名” 或 “帕斯卡变量名”), 没有下划线. 对于首字母缩写的单词, 更倾向于将它们视作一个单词进行首字母大写 (例如, 写作`StartRpc()`而非`StartRPC()`).\n\n    ```C++\n    AddTableEntry()\n    DeleteUrl()\n    OpenFileOrDie()\n    ```\n\n    取值和设值函数的命名与变量一致. 一般来说它们的名称与实际的成员变量对应, 但并不强制要求. 例如`int count()`与`void set_count(int count)`.\n\n#### 命名空间命名\n\n- 总述\n\n    命名空间以小写字母命名. 最高级命名空间的名字取决于项目名称. 要注意避免嵌套命名空间的名字之间和常见的顶级命名空间的名字之间发生冲突.\n\n    顶级命名空间的名称应当是项目名或者是该命名空间中的代码所属的团队的名字. 命名空间中的代码, 应当存放于和命名空间的名字匹配的文件夹或其子文件夹中.\n\n    要避免嵌套的命名空间与常见的顶级命名空间发生名称冲突. 由于名称查找规则的存在, 命名空间之间的冲突完全有可能导致编译失败. 尤其是, 不要创建嵌套的`std`命名空间. 建议使用更独特的项目标识符 (`websearch::index`,`websearch::index_util`) 而非常见的极易发生冲突的名称 (比如`websearch::util`).\n\n    对于`internal`命名空间, 要当心加入到同一`internal`命名空间的代码之间发生冲突 (由于内部维护人员通常来自同一团队, 因此常有可能导致冲突). 在这种情况下, 请使用文件名以使得内部名称独一无二 (例如对于`frobber.h`, 使用`websearch::index::frobber_internal`).\n\n#### 枚举命名\n\n- 总述\n\n    枚举的命名应当和 常量 或 宏 一致: `kEnumName`或是`ENUM_NAME`.\n\n- 说明\n\n    单独的枚举值应该优先采用 常量 的命名方式. 但 宏 方式的命名也可以接受. 枚举名`UrlTableErrors`(以及 `AlternateUrlTableErrors`) 是类型, 所以要用大小写混合的方式.\n\n    ```C++\n    enum UrlTableErrors {\n        kOK = 0,\n        kErrorOutOfMemory,\n        kErrorMalformedInput,\n    };\n    enum AlternateUrlTableErrors {\n        OK = 0,\n        OUT_OF_MEMORY = 1,\n        MALFORMED_INPUT = 2,\n    };\n    ```\n\n#### 宏命名\n\n你并不打算 使用宏, 对吧? 如果你一定要用, 像这样命名: `MY_MACRO_THAT_SCARES_SMALL_CHILDREN`.\n\n## 注释\n\n注释虽然写起来很痛苦, 但对保证代码可读性至关重要. 下面的规则描述了如何注释以及在哪儿注释. 当然也要记住: 注释固然很重要, 但最好的代码应当本身就是文档. 有意义的类型名和变量名, 要远胜过要用注释解释的含糊不清的名字.\n\n#### 注释风格\n\n- 总述\n\n    使用`//`或`/* */`, 统一就好.\n\n- 说明\n\n    `//`或`/* */`都可以; 但`//`更 常用. 要在如何注释及注释风格上确保统一.\n\n#### 文件注释\n\n- 总述\n\n    在每一个文件开头加入版权公告.\n\n    文件注释描述了该文件的内容. 如果一个文件只声明, 或实现, 或测试了一个对象, 并且这个对象已经在它的声明处进行了详细的注释, 那么就没必要再加上文件注释. 除此之外的其他文件都需要文件注释.\n\n- 说明\n\n    - 法律公告和作者信息\n\n        每个文件都应该包含许可证引用. 为项目选择合适的许可证版本.(比如, Apache 2.0, BSD, LGPL, GPL)\n\n        如果你对原始作者的文件做了重大修改, 请考虑删除原作者信息.\n    - 文件内容\n\n        如果一个`.h`文件声明了多个概念, 则文件注释应当对文件的内容做一个大致的说明, 同时说明各概念之间的联系. 一个一到两行的文件注释就足够了, 对于每个概念的详细文档应当放在各个概念中, 而不是文件注释中.\n\n        不要在`.h`和`.cc`之间复制注释, 这样的注释偏离了注释的实际意义.\n\n#### 类注释\n\n- 总述\n\n    每个类的定义都要附带一份注释, 描述类的功能和用法, 除非它的功能相当明显.\n\n    ```C++\n    // Iterates over the contents of a GargantuanTable.\n    // Example:\n    //    GargantuanTableIterator* iter = table->NewIterator();\n    //    for (iter->Seek(\"foo\"); !iter->done(); iter->Next()) {\n    //      process(iter->key(), iter->value());\n    //    }\n    //    delete iter;\n    class GargantuanTableIterator {\n    ...\n    };\n    ```\n\n- 说明\n\n    类注释应当为读者理解如何使用与何时使用类提供足够的信息, 同时应当提醒读者在正确使用此类时应当考虑的因素. 如果类有任何同步前提, 请用文档说明. 如果该类的实例可被多线程访问, 要特别注意文档说明多线程环境下相关的规则和常量使用.\n\n    如果你想用一小段代码演示这个类的基本用法或通常用法, 放在类注释里也非常合适.\n\n    如果类的声明和定义分开了(例如分别放在了`.h`和`.cc`文件中), 此时, 描述类用法的注释应当和接口定义放在一起, 描述类的操作和实现的注释应当和实现放在一起.\n\n#### 函数注释\n\n- 总述\n\n函数声明处的注释描述函数功能; 定义处的注释描述函数实现.\n\n- 说明\n\n    - 函数说明\n\n        基本上每个函数声明处前都应当加上注释, 描述函数的功能和用途. 只有在函数的功能简单而明显时才能省略这些注释(例如, 简单的取值和设值函数). 注释使用叙述式 (“Opens the file”) 而非指令式 (“Open the file”); 注释只是为了描述函数, 而不是命令函数做什么. 通常, 注释不会描述函数如何工作. 那是函数定义部分的事情.\n\n        函数声明处注释的内容:\n\n        - 函数的输入输出.\n        - 对类成员函数而言: 函数调用期间对象是否需要保持引用参数, 是否会释放这些参数.\n        - 函数是否分配了必须由调用者释放的空间.\n        - 参数是否可以为空指针.\n        - 是否存在函数使用上的性能隐患.\n        - 如果函数是可重入的, 其同步前提是什么?\n\n        举例如下\n\n        ```C++\n        // Returns an iterator for this table.  It is the client's\n        // responsibility to delete the iterator when it is done with it,\n        // and it must not use the iterator once the GargantuanTable object\n        // on which the iterator was created has been deleted.\n        //\n        // The iterator is initially positioned at the beginning of the table.\n        //\n        // This method is equivalent to:\n        //    Iterator* iter = table->NewIterator();\n        //    iter->Seek(\"\");\n        //    return iter;\n        // If you are going to immediately seek to another place in the\n        // returned iterator, it will be faster to use NewIterator()\n        // and avoid the extra seek.\n        Iterator* GetIterator() const;\n        ```\n\n        但也要避免罗罗嗦嗦, 或者对显而易见的内容进行说明. 下面的注释就没有必要加上 “否则返回 false”, 因为已经暗含其中了:\n\n        ```C++\n        // Returns true if the table cannot hold any more entries.\n        bool IsTableFull();\n        ```\n\n        注释函数重载时, 注释的重点应该是函数中被重载的部分, 而不是简单的重复被重载的函数的注释. 多数情况下, 函数重载不需要额外的文档, 因此也没有必要加上注释.\n\n        注释构造/析构函数时, 切记读代码的人知道构造/析构函数的功能, 所以 “销毁这一对象” 这样的注释是没有意义的. 你应当注明的是注明构造函数对参数做了什么 (例如, 是否取得指针所有权) 以及析构函数清理了什么. 如果都是些无关紧要的内容, 直接省掉注释. 析构函数前没有注释是很正常的.\n        \n    - 函数定义\n\n        如果函数的实现过程中用到了很巧妙的方式, 那么在函数定义处应当加上解释性的注释. 例如, 你所使用的编程技巧, 实现的大致步骤, 或解释如此实现的理由. 举个例子, 你可以说明为什么函数的前半部分要加锁而后半部分不需要.\n\n        不要 从`.h`文件或其他地方的函数声明处直接复制注释. 简要重述函数功能是可以的, 但注释重点要放在如何实现上.\n\n#### 变量注释\n\n- 总述\n\n通常变量名本身足以很好说明变量用途. 某些情况下, 也需要额外的注释说明.\n\n- 说明\n\n    - 类数据成员\n\n        每个类数据成员 (也叫实例变量或成员变量) 都应该用注释说明用途. 如果有非变量的参数(例如特殊值, 数据成员之间的关系, 生命周期等)不能够用类型与变量名明确表达, 则应当加上注释. 然而, 如果变量类型与变量名已经足以描述一个变量, 那么就不再需要加上注释.\n\n        特别地, 如果变量可以接受`NULL`或`-1`等警戒值, 须加以说明. 比如:\n\n        ```C++\n        private:\n        // Used to bounds-check table accesses. -1 means\n        // that we don't yet know how many entries the table has.\n        int num_total_entries_;\n        ```\n\n    - 全局变量\n\n        和数据成员一样, 所有全局变量也要注释说明含义及用途, 以及作为全局变量的原因. 比如:\n\n        ```C++\n        // The total number of tests cases that we run through in this regression test.\n        const int kNumTestCases = 6;\n        ```\n\n#### 实现注释\n\n- 总述\n\n对于代码中巧妙的, 晦涩的, 有趣的, 重要的地方加以注释.\n\n- 说明\n\n    - 代码前注释\n\n        巧妙或复杂的代码段前要加注释. 比如:\n\n        ```C++\n        // Divide result by two, taking into account that x\n        // contains the carry from the add.\n        for (int i = 0; i < result->size(); i++) {\n        x = (x << 8) + (*result)[i];\n        (*result)[i] = x >> 1;\n        x &= 1;\n        }\n        ```\n\n    - 行注释\n\n        比较隐晦的地方要在行尾加入注释. 在行尾空两格进行注释. 比如:\n\n        ```C++\n        // If we have enough memory, mmap the data portion too.\n        mmap_budget = max<int64>(0, mmap_budget - index_->length());\n        if (mmap_budget >= data_size_ && !MmapData(mmap_chunk_bytes, mlock))\n        return;  // Error already logged.\n        ```\n\n        注意, 这里用了两段注释分别描述这段代码的作用, 和提示函数返回时错误已经被记入日志.\n\n    - 函数参数注释\n\n        如果函数参数的意义不明显, 考虑用下面的方式进行弥补:\n\n        - 如果参数是一个字面常量, 并且这一常量在多处函数调用中被使用, 用以推断它们一致, 你应当用一个常量名让这一约定变得更明显, 并且保证这一约定不会被打破.\n        - 考虑更改函数的签名, 让某个`bool`类型的参数变为`enum`类型, 这样可以让这个参数的值表达其意义.\n        - 如果某个函数有多个配置选项, 你可以考虑定义一个类或结构体以保存所有的选项, 并传入类或结构体的实例. 这样的方法有许多优点, 例如这样的选项可以在调用处用变量名引用, 这样就能清晰地表明其意义. 同时也减少了函数参数的数量, 使得函数调用更易读也易写. 除此之外, 以这样的方式, 如果你使用其他的选项, 就无需对调用点进行更改.\n        - 用具名变量代替大段而复杂的嵌套表达式.\n        - 万不得已时, 才考虑在调用点用注释阐明参数的意义.\n\n    - 不允许的行为\n\n        不要描述显而易见的现象, *永远不要*用自然语言翻译代码作为注释, 除非即使对深入理解 C++ 的读者来说代码的行为都是不明显的. 要假设读代码的人 C++ 水平比你高, 即便他/她可能不知道你的用意:\n\n        你所提供的注释应当解释代码*为什么*要这么做和代码的目的, 或者最好是让代码自文档化.\n\n        比较这样的注释:\n\n        ```C++\n        // Find the element in the vector.  <-- 差: 这太明显了!\n        auto iter = std::find(v.begin(), v.end(), element);\n        if (iter != v.end()) {\n            Process(element);\n        }\n        ```\n\n        和这样的注释:\n\n        ```C++\n        // Process \"element\" unless it was already processed.\n        auto iter = std::find(v.begin(), v.end(), element);\n        if (iter != v.end()) {\n            Process(element);\n        }\n        ```\n\n        自文档化的代码根本就不需要注释. 上面例子中的注释对下面的代码来说就是毫无必要的:\n\n        ```C++\n        if (!IsAlreadyProcessed(element)) {\n            Process(element);\n        }\n        ```\n\n#### TODO注释\n\n- 总述\n\n    对那些临时的, 短期的解决方案, 或已经够好但仍不完美的代码使用`TODO`注释.\n\n    `TODO`注释要使用全大写的字符串`TODO`,在随后的圆括号里写上你的名字, 邮件地址, bug ID, 或其它身份标识和与这一`TODO`相关的 issue. 主要目的是让添加注释的人 (也是可以请求提供更多细节的人) 可根据规范的`TODO`格式进行查找. 添加`TODO`注释并不意味着你要自己来修正, 因此当你加上带有姓名的`TODO`时, 一般都是写上自己的名字.\n\n    ```C++\n    // TODO(kl@gmail.com): Use a \"*\" here for concatenation operator.\n    // TODO(Zeke) change this to use relations.\n    // TODO(bug 12345): remove the \"Last visitors\" feature\n    ```\n\n    如果加`TODO`是为了在 “将来某一天做某事”, 可以附上一个非常明确的时间 “Fix by November 2005”), 或者一个明确的事项 (“Remove this code when all clients can handle XML responses.”).\n\n#### 小结\n\n1. 关于注释风格, 很多 C++ 的 coders 更喜欢行注释, C coders 或许对块注释依然情有独钟, 或者在文件头大段大段的注释时使用块注释\n1. 文件注释可以炫耀你的成就, 也是为了捅了篓子别人可以找你\n1. 注释要言简意赅, 不要拖沓冗余, 复杂的东西简单化和简单的东西复杂化都是要被鄙视的\n1. 对于 Chinese coders 来说, 用英文注释还是用中文注释, it is a problem, 但不管怎样, 注释是为了让别人看懂, 难道是为了炫耀编程语言之外的你的母语或外语水平吗\n1. 注释不要太乱, 适当的缩进才会让人乐意看. 但也没有必要规定注释从第几列开始 (我自己写代码的时候总喜欢这样), UNIX/LINUX 下还可以约定是使用 tab 还是 space, 个人倾向于 space\n1. TODO 很不错, 有时候, 注释确实是为了标记一些未完成的或完成的不尽如人意的地方, 这样一搜索, 就知道还有哪些活要干, 日志都省了\n\n## 格式\n\n#### 行长度\n\n- 总述\n\n    每一行代码字符数不超过 80.\n\n    我们也认识到这条规则是有争议的, 但很多已有代码都遵照这一规则, 因此我们感觉一致性更重要.\n\n- 优点\n\n    提倡该原则的人认为强迫他们调整编辑器窗口大小是很野蛮的行为. 很多人同时并排开几个代码窗口, 根本没有多余的空间拉伸窗口. 大家都把窗口最大尺寸加以限定, 并且 80 列宽是传统标准. 那么为什么要改变呢?\n\n- 缺点\n\n    \n    反对该原则的人则认为更宽的代码行更易阅读. 80 列的限制是上个世纪 60 年代的大型机的古板缺陷; 现代设备具有更宽的显示屏, 可以很轻松地显示更多代码.\n\n- 结论\n\n    80 个字符是最大值.\n\n    如果无法在不伤害易读性的条件下进行断行, 那么注释行可以超过 80 个字符, 这样可以方便复制粘贴. 例如, 带有命令示例或 URL 的行可以超过 80 个字符.\n\n    包含长路径的`#include`语句可以超出80列.\n\n#### 非ASCII字符\n\n- 总述\n\n    尽量不使用非 ASCII 字符, 使用时必须使用*UTF-8*编码.\n\n- 说明\n\n    即使是英文, 也不应将用户界面的文本硬编码到源代码中, 因此非 ASCII 字符应当很少被用到. 特殊情况下可以适当包含此类字符. 例如, 代码分析外部数据文件时, 可以适当硬编码数据文件中作为分隔符的非 ASCII 字符串; 更常见的是 (不需要本地化的) 单元测试代码可能包含非 ASCII 字符串. 此类情况下, 应使用 UTF-8 编码, 因为很多工具都可以理解和处理 UTF-8 编码.\n\n#### 空格还是制表位\n\n- 总述\n\n    只使用空格, 每次缩进2个空格.（如果你所在的项目使用4各空格缩进，那么请保持一致性）\n\n- 说明\n\n    我们使用空格缩进. 不要在代码中使用制表符. 你应该设置编辑器将制表符转为空格.\n\n#### 函数声明与定义\n\n- 总述\n\n    返回类型和函数名在同一行, 参数也尽量放在同一行, 如果放不下就对形参分行, 分行方式与函数调用一致.\n\n- 说明\n\n    函数看上去像这样:\n\n    ```C++\n    ReturnType ClassName::FunctionName(Type par_name1, Type par_name2) {\n      DoSomething();\n      ...\n    }\n    ```\n\n    如果同一行文本太多, 放不下所有参数:\n\n    ```C++\n    ReturnType ClassName::ReallyLongFunctionName(Type par_name1, Type par_name2,\n                                                 Type par_name3) {\n      DoSomething();\n      ...\n    }\n    ```\n\n    甚至连第一个参数都放不下:\n\n    ```C++\n    ReturnType LongClassName::ReallyReallyReallyLongFunctionName(\n        Type par_name1,  // 4 space indent\n        Type par_name2,\n        Type par_name3) {\n      DoSomething();  // 2 space indent\n      ...\n    }\n    ```\n\n    注意以下几点：\n\n    - 使用好的参数名.\n    - 只有在参数未被使用或者其用途非常明显时, 才能省略参数名.\n    - 如果返回类型和函数名在一行放不下, 分行.\n    - 如果返回类型与函数声明或定义分行了, 不要缩进.\n    - 左圆括号总是和函数名在同一行.\n    - 函数名和左圆括号间永远没有空格.\n    - 圆括号与参数间没有空格.\n    - 左大括号{总在最后一个参数同一行的末尾处, 不另起新行.\n    - 右大括号总是单独位于函数最后一行, 或者与左大括号同一行.\n    - 右圆括号和左大括号间总是有一个空格.\n    - 所有形参应尽可能对齐.\n    - 缺省缩进为 2 个空格.\n    - 换行后的参数保持 4 个空格的缩进.\n\n    未被使用的参数, 或者根据上下文很容易看出其用途的参数, 可以省略参数名:\n\n    ```C++\n    class Foo {\n     public:\n      Foo(Foo&&);\n      Foo(const Foo&);\n      Foo& operator=(Foo&&);\n      Foo& operator=(const Foo&);\n    };\n    ```\n\n    未被使用的参数如果其用途不明显的话, 在函数定义处将参数名注释起来:\n\n    ```C++\n    class Shape {\n     public:\n      virtual void Rotate(double radians) = 0;\n    };\n\n    class Circle : public Shape {\n     public:\n      void Rotate(double radians) override;\n    };\n\n    void Circle::Rotate(double /*radians*/) {}\n    ```\n\n    ```C++\n    // 差 - 如果将来有人要实现, 很难猜出变量的作用.\n    void Circle::Rotate(double) {}\n    ```\n\n    属性, 和展开为属性的宏, 写在函数声明或定义的最前面, 即返回类型之前:\n\n    ```C++\n    MUST_USE_RESULT bool IsOK();\n    ```\n\n#### Lambda表达式\n\n- 总述\n\n    Lambda 表达式对形参和函数体的格式化和其他函数一致; 捕获列表同理, 表项用逗号隔开.\n\n- 说明\n\n    若用引用捕获, 在变量名和`&`之间不留空格.\n\n    ```C++\n    int x = 0;\n    auto add_to_x = [&x](int n) { x += n; };\n    ```\n\n    短 lambda 就写得和内联函数一样.\n\n    ```C++\n    std::set<int> blacklist = {7, 8, 9};\n    std::vector<int> digits = {3, 9, 1, 8, 4, 7, 1};\n    digits.erase(std::remove_if(digits.begin(), digits.end(), [&blacklist](int i) {\n                   return blacklist.find(i) != blacklist.end();\n                }),\n                digits.end());\n    ```\n\n#### 函数调用\n\n- 总述\n\n\n    要么一行写完函数调用, 要么在圆括号里对参数分行, 要么参数另起一行且缩进四格. 如果没有其它顾虑的话, 尽可能精简行数, 比如把多个参数适当地放在同一行里.\n\n- 说明\n\n    函数调用遵循如下形式\n\n    ```C++\n    bool retval = DoSomething(argument1, argument2, argument3);\n    ```\n\n    如果同一行放不下, 可断为多行, 后面每一行都和第一个实参对齐, 左圆括号后和右圆括号前不要留空格：\n\n    ```C++\n    bool retval = DoSomething(averyveryveryverylongargument1,\n                              argument2, argument3);\n    ```\n\n    参数也可以放在次行, 缩进四格：\n\n    ```C++\n    if (...) {\n      ...\n      ...\n      if (...) {\n        DoSomething(\n            argument1, argument2,  // 4 空格缩进\n            argument3, argument4);\n    }\n    ```\n    \n    如果一些参数本身就是略复杂的表达式, 且降低了可读性, 那么可以直接创建临时变量描述该表达式, 并传递给函数：\n\n    ```C++\n    int my_heuristic = scores[x] * y + bases[x];\n    bool retval = DoSomething(my_heuristic, x, y, z);\n    ```\n\n    或者放着不管, 补充上注释：\n\n    ```C++\n    bool retval = DoSomething(scores[x] * y + bases[x],  // Score heuristic.\n                              x, y, z);\n    ```\n\n    如果某参数独立成行, 对可读性更有帮助的话, 那也可以如此做. 参数的格式处理应当以可读性而非其他作为最重要的原则.\n\n    此外, 如果一系列参数本身就有一定的结构, 可以酌情地按其结构来决定参数格式：\n\n    ```C++\n    // 通过 3x3 矩阵转换 widget.\n    my_widget.Transform(x1, x2, x3,\n                        y1, y2, y3,\n                        z1, z2, z3);\n    ```\n\n#### 列表初始化\n\n如果列表初始化伴随着名字, 比如类型或变量名, 格式化时将将名字视作函数调用名, {} 视作函数调用的括号. 如果没有名字, 就视作名字长度为零.\n\n```C++\n// 一行列表初始化示范.\nreturn {foo, bar};\nfunctioncall({foo, bar});\npair<int, int> p{foo, bar};\n\n// 当不得不断行时.\nSomeFunction(\n    {\"assume a zero-length name before {\"},  // 假设在 { 前有长度为零的名字.\n    some_other_function_parameter);\nSomeType variable{\n    some, other, values,\n    {\"assume a zero-length name before {\"},  // 假设在 { 前有长度为零的名字.\n    SomeOtherType{\n        \"Very long string requiring the surrounding breaks.\",  // 非常长的字符串, 前后都需要断行.\n        some, other values},\n    SomeOtherType{\"Slightly shorter string\",  // 稍短的字符串.\n                  some, other, values}};\nSomeType variable{\n    \"This is too long to fit all in one line\"};  // 字符串过长, 因此无法放在同一行.\nMyType m = {  // 注意了, 您可以在 { 前断行.\n    superlongvariablename1,\n    superlongvariablename2,\n    {short, interior, list},\n    {interiorwrappinglist,\n     interiorwrappinglist2}};\n```\n\n#### 条件语句\n\n- 总述\n\n    倾向于不在圆括号内使用空格. 关键字`if`和`else`另起一行.\n\n- 说明\n\n    对基本条件语句有两种可以接受的格式. 一种在圆括号和条件之间有空格, 另一种没有.\n\n    最常见的是没有空格的格式. 哪一种都可以, 最重要的是*保持一致*. 如果你是在修改一个文件, 参考当前已有格式. 如果是写新的代码, 参考目录下或项目中其它文件. 还在犹豫的话, 就不要加空格了.\n\n    ```C++\n    if (condition) {  // 圆括号里没有空格.\n      ...  // 2 空格缩进.\n    } else if (...) {  // else 与 if 的右括号同一行.\n      ...\n    } else {\n      ...\n    }\n    ```\n\n    注意所有情况下`if`和左圆括号间都有个空格. 右圆括号和左大括号之间也要有个空格:\n\n    ```C++\n    if(condition)     // 差 - IF 后面没空格.\n    if (condition){   // 差 - { 前面没空格.\n    if(condition){    // 变本加厉地差.\n    if (condition) {  // 好 - IF 和 { 都与空格紧邻.\n    ```\n\n    如果能增强可读性, 简短的条件语句允许写在同一行. 只有当语句简单并且没有使用`else`子句时使用:\n\n    ```C++\n    if (x == kFoo) return new Foo();\n    if (x == kBar) return new Bar();\n    ```\n\n    如果语句有`else`分支则不允许:\n\n    ```C++\n    // 不允许 - 当有 ELSE 分支时 IF 块却写在同一行\n    if (x) DoThis();\n    else DoThat();\n    ```\n\n    通常, 单行语句不需要使用大括号, 如果你喜欢用也没问题; 复杂的条件或循环语句用大括号可读性会更好. 也有一些项目要求`if`必须总是使用大括号:\n\n    ```C++\n    if (condition)\n      DoSomething();  // 2 空格缩进.\n\n    if (condition) {\n      DoSomething();  // 2 空格缩进.\n    }\n    ```\n\n    但如果语句中某个`if-else`分支使用了大括号的话, 其它分支也必须使用:\n\n    ```C++\n    // 不可以这样子 - IF 有大括号 ELSE 却没有.\n    if (condition) {\n      foo;\n    } else\n      bar;\n\n    // 不可以这样子 - ELSE 有大括号 IF 却没有.\n    if (condition)\n      foo;\n    else {\n      bar;\n    }\n    ```\n\n    ```C++\n    // 只要其中一个分支用了大括号, 两个分支都要用上大括号.\n    if (condition) {\n      foo;\n    } else {\n      bar;\n    }\n    ```\n\n#### 循环和开关选择语句\n\n- 总述\n\n    `switch`语句可以使用大括号分段, 以表明 cases 之间不是连在一起的. 在单语句循环里, 括号可用可不用. 空循环体应使用`{}`或`continue`.\n\n- 说明\n\n    `switch`语句中的`case`块可以使用大括号也可以不用, 取决于你的个人喜好. 如果用的话, 要按照下文所述的方法.\n\n    如果有不满足`case`条件的枚举值, `switch`应该总是包含一个`default`匹配 (如果有输入值没有 case 去处理, 编译器将给出 warning). 如果`default`应该永远执行不到, 简单的加条 `assert`:\n\n    ```C++\n    switch (var) {\n      case 0: {  // 2 空格缩进\n        ...      // 4 空格缩进\n        break;\n      }\n      case 1: {\n        ...\n        break;\n      }\n      default: {\n        assert(false);\n      }\n    }\n    ```\n\n    在单语句循环里, 括号可用可不用：\n\n    ```C++\n    for (int i = 0; i < kSomeNumber; ++i)\n      printf(\"I love you\\n\");\n\n    for (int i = 0; i < kSomeNumber; ++i) {\n      printf(\"I take it back\\n\");\n    }\n    ```\n\n    空循环体应使用`{}`或`continue`, 而不是一个简单的分号.\n\n    ```C++\n    while (condition) {\n      // 反复循环直到条件失效.\n    }\n    for (int i = 0; i < kSomeNumber; ++i) {}  // 可 - 空循环体.\n    while (condition) continue;  // 可 - contunue 表明没有逻辑.\n    ```\n\n#### 指针和引用表达式\n\n- 总述\n\n    句点或箭头前后不要有空格. 指针/地址操作符 (`*, &`) 之后不能有空格.\n\n- 说明\n\n    下面是指针和引用表达式的正确使用范例:\n\n    ```C++\n    x = *p;\n    p = &x;\n    x = r.y;\n    x = r->y;\n    ```\n\n    注意\n\n    - 在访问成员时, 句点或箭头前后没有空格.\n    - 指针操作符 * 或 & 后没有空格.\n\n    在声明指针变量或参数时, 星号与类型或变量名紧挨都可以:\n\n    ```C++\n    // 好, 空格前置.\n    char *c;\n    const string &str;\n\n    // 好, 空格后置.\n    char* c;\n    const string& str;\n    ```\n\n    ```C++\n    int x, *y;  // 不允许 - 在多重声明中不能使用 & 或 *\n    char * c;  // 差 - * 两边都有空格\n    const string & str;  // 差 - & 两边都有空格.\n    ```\n\n    在单个文件内要保持风格一致, 所以, 如果是修改现有文件, 要遵照该文件的风格.\n\n#### 布尔表达式\n\n- 总述\n\n    如果一个布尔表达式超过标准行宽, 断行方式要统一一下.\n\n- 说明\n\n    下例中, 逻辑与 (`&&`) 操作符总位于行尾:\n\n    ```C++\n    if (this_one_thing > this_other_thing &&\n        a_third_thing == a_fourth_thing &&\n        yet_another && last_one) {\n      ...\n    }\n    ```\n\n#### 函数返回值\n\n- 总述\n\n    不要在`return`表达式里加上非必须的圆括号.\n\n- 说明\n\n    只有在写`x = expr`要加上括号的时候才在`return expr;`里使用括号.\n\n    ```C++\n    return result;                  // 返回值很简单, 没有圆括号.\n    // 可以用圆括号把复杂表达式圈起来, 改善可读性.\n    return (some_long_condition &&\n            another_condition);\n    ```\n\n#### 变量及数组初始化\n\n- 总述\n\n    用`=`,`()`和`{}`均可.\n\n- 说明\n\n    您可以用`=`,`()`和`{}`, 以下的例子都是正确的：\n\n    ```C++\n    int x = 3;\n    int x(3);\n    int x{3};\n    string name(\"Some Name\");\n    string name = \"Some Name\";\n    string name{\"Some Name\"};\n    ```\n\n    请务必小心列表初始化`{...}`用`std::initializer_list`构造函数初始化出的类型. 非空列表初始化就会优先调用`std::initializer_list`, 不过空列表初始化除外, 后者原则上会调用默认构造函数. 为了强制禁用`std::initializer_list`构造函数, 请改用括号.\n\n    ```C++\n    vector<int> v(100, 1);  // 内容为 100 个 1 的向量.\n    vector<int> v{100, 1};  // 内容为 100 和 1 的向量.\n    ```\n\n    此外, 列表初始化不允许整型类型的四舍五入, 这可以用来避免一些类型上的编程失误.\n\n    ```C++\n    int pi(3.14);  // 好 - pi == 3.\n    int pi{3.14};  // 编译错误: 缩窄转换.\n    ```\n\n#### 预处理指令\n\n- 总述\n\n    预处理指令不要缩进, 从行首开始.\n\n- 说明\n\n    即使预处理指令位于缩进代码块中, 指令也应从行首开始.\n\n    ```C++\n    // 好 - 指令从行首开始\n      if (lopsided_score) {\n    #if DISASTER_PENDING      // 正确 - 从行首开始\n        DropEverything();\n    # if NOTIFY               // 非必要 - # 后跟空格\n        NotifyClient();\n    # endif\n    #endif\n        BackToNormal();\n      }\n    ```\n\n#### 构造函数初始值列表\n\n- 总述\n\n    构造函数初始化列表放在同一行或按四格缩进并排多行.\n\n- 说明\n\n    下面两种初始值列表方式都可以接受:\n\n    ```C++\n    // 如果所有变量能放在同一行:\n    MyClass::MyClass(int var) : some_var_(var) {\n      DoSomething();\n    }\n\n    // 如果不能放在同一行,\n    // 必须置于冒号后, 并缩进 4 个空格\n    MyClass::MyClass(int var)\n        : some_var_(var), some_other_var_(var + 1) {\n      DoSomething();\n    }\n\n    // 如果初始化列表需要置于多行, 将每一个成员放在单独的一行\n    // 并逐行对齐\n    MyClass::MyClass(int var)\n        : some_var_(var),             // 4 space indent\n        some_other_var_(var + 1) {  // lined up\n      DoSomething();\n    }\n\n    // 右大括号 } 可以和左大括号 { 放在同一行\n    // 如果这样做合适的话\n    MyClass::MyClass(int var)\n        : some_var_(var) {}\n    ```\n\n#### 命名空间格式化\n\n- 总述\n\n    命名空间内容不缩进.\n\n- 说明\n\n    命名空间 不要增加额外的缩进层次, 例如:\n\n    ```C++\n    namespace {\n\n    void foo() {  // 正确. 命名空间内没有额外的缩进.\n      ...\n    }\n\n    }  // namespace\n    ```\n\n    不要在命名空间内缩进:\n\n    ```C++\n    namespace {\n\n      // 错, 缩进多余了.\n      void foo() {\n        ...\n      }\n\n    }  // namespace\n    ```\n\n    声明嵌套命名空间时, 每个命名空间都独立成行.\n    \n    ```C++\n    namespace foo {\n    namespace bar {\n    ```\n\n#### 水平留白\n\n- 总述\n\n    水平留白的使用根据在代码中的位置决定. 永远不要在行尾添加没意义的留白.\n\n- 说明\n\n    - 通用\n\n        ```C++\n        void f(bool b) {  // 左大括号前总是有空格.\n          ...\n        int i = 0;  // 分号前不加空格.\n        // 列表初始化中大括号内的空格是可选的.\n        // 如果加了空格, 那么两边都要加上.\n        int x[] = { 0 };\n        int x[] = {0};\n\n        // 继承与初始化列表中的冒号前后恒有空格.\n        class Foo : public Bar {\n         public:\n          // 对于单行函数的实现, 在大括号内加上空格\n          // 然后是函数实现\n          Foo(int b) : Bar(), baz_(b) {}  // 大括号里面是空的话, 不加空格.\n          void Reset() { baz_ = 0; }  // 用括号把大括号与实现分开.\n        ...\n        ```\n\n        添加冗余的留白会给其他人编辑时造成额外负担. 因此, 行尾不要留空格. 如果确定一行代码已经修改完毕, 将多余的空格去掉; 或者在专门清理空格时去掉（尤其是在没有其他人在处理这件事的时候).\n\n    - 循环和条件语句\n\n        ```C++\n        if (b) {          // if 条件语句和循环语句关键字后均有空格.\n        } else {          // else 前后有空格.\n        }\n        while (test) {}   // 圆括号内部不紧邻空格.\n        switch (i) {\n        for (int i = 0; i < 5; ++i) {\n        switch ( i ) {    // 循环和条件语句的圆括号里可以与空格紧邻.\n        if ( test ) {     // 圆括号, 但这很少见. 总之要一致.\n        for ( int i = 0; i < 5; ++i ) {\n        for ( ; i < 5 ; ++i) {  // 循环里内 ; 后恒有空格, ;  前可以加个空格.\n        switch (i) {\n          case 1:         // switch case 的冒号前无空格.\n            ...\n          case 2: break;  // 如果冒号有代码, 加个空格.\n        ```\n\n    - 操作符\n\n        ```C++\n        // 赋值运算符前后总是有空格.\n        x = 0;\n\n        // 其它二元操作符也前后恒有空格, 不过对于表达式的子式可以不加空格.\n        // 圆括号内部没有紧邻空格.\n        v = w * x + y / z;\n        v = w*x + y/z;\n        v = w * (x + z);\n\n        // 在参数和一元操作符之间不加空格.\n        x = -5;\n        ++x;\n        if (x && !y)\n          ...\n        ```\n\n    - 模板和转换\n\n        ```C++\n        // 尖括号(< and >) 不与空格紧邻, < 前没有空格, > 和 ( 之间也没有.\n        vector<string> x;\n        y = static_cast<char*>(x);\n\n        // 在类型与指针操作符之间留空格也可以, 但要保持一致.\n        vector<char *> x;\n        ```\n\n#### 垂直留白\n\n- 总述\n\n    垂直留白越少越好.\n\n- 说明\n\n    这不仅仅是规则而是原则问题了: 不在万不得已, 不要使用空行. 尤其是: 两个函数定义之间的空行不要超过 2 行, 函数体首尾不要留空行, 函数体中也不要随意添加空行.\n\n    基本原则是: 同一屏可以显示的代码越多, 越容易理解程序的控制流. 当然, 过于密集的代码块和过于疏松的代码块同样难看, 这取决于你的判断. 但通常是垂直留白越少越好.\n\n    下面的规则可以让加入的空行更有效:\n\n    - 函数体内开头或结尾的空行可读性微乎其微.\n    - 在多重 if-else 块里加空行或许有点可读性.\n\n#### 总结\n\n- 对于代码格式, 因人, 系统而异各有优缺点, 但同一个项目中遵循同一标准还是有必要的;\n- 行宽原则上不超过 80 列, 把 22 寸的显示屏都占完, 怎么也说不过去;\n- 80 行限制事实上有助于避免代码可读性失控, 比如超多重嵌套块, 超多重函数调用等等.\n- 尽量不使用非 ASCII 字符, 如果使用的话, 参考 UTF-8 格式 (尤其是 UNIX/Linux 下, Windows 下可以考虑宽字符), 尽量不将字符串常量耦合到代码中, 比如独立出资源文件, 这不仅仅是风格问题了;\n- UNIX/Linux 下无条件使用空格, MSVC 的话使用 Tab 也无可厚非;\n- 函数参数, 逻辑条件, 初始化列表: 要么所有参数和函数名放在同一行, 要么所有参数并排分行;\n- 除函数定义的左大括号可以置于行首外, 包括函数/类/结构体/枚举声明, 各种语句的左大括号置于行尾, 所有右大括号独立成行;\n- Google 强调有一对 if-else 时, 不论有没有嵌套, 都要有大括号\n- `.`/`->` 操作符前后不留空格, `*`/`&` 不要前后都留, 一个就可, 靠左靠右依各人喜好;\n- 预处理指令/命名空间不使用额外缩进, 类/结构体/枚举/函数/语句使用缩进;\n- 初始化用`=`还是`()`依个人喜好, 统一就好;\n- `return`不要加`()`;\n- 水平/垂直留白不要滥用, 怎么易读怎么来.","slug":"Google C++ Code Style","published":1,"updated":"2018-09-10T13:18:11.333Z","comments":1,"link":"","_id":"cjlwefum70012qbrt9jilw3sw","content":"<h1 id=\"Google-C-Code-Style\"><a href=\"#Google-C-Code-Style\" class=\"headerlink\" title=\"Google C++ Code Style\"></a>Google C++ Code Style</h1><p>C++ 是 Google 大部分开源项目的主要编程语言。正如每个 C++ 程序员都知道的， C++ 有很多强大的特性， 但这种强大不可避免的导致它走向复杂，使代码更容易产生 bug， 难以阅读和维护。</p>\n<p>本指南的目的是通过详细阐述 C++ 注意事项来驾驭其复杂性。这些规则在保证代码易于管理的同时， 也能高效使用 C++ 的语言特性。</p>\n<a id=\"more\"></a>\n<p>风格， 亦被称作可读性， 也就是指导 C++ 编程的约定. 使用术语 “风格” 有些用词不当， 因为这些习惯远不止源代码文件格式化这么简单。</p>\n<p>使代码易于管理的方法之一是加强代码一致性。让任何程序员都可以快速读懂你的代码这点非常重要。保持统一编程风格并遵守约定意味着可以很容易根据 “模式匹配” 规则来推断各种标识符的含义。创建通用， 必需的习惯用语和模式可以使代码更容易理解。在一些情况下可能有充分的理由改变某些编程风格， 但我们还是应该遵循一致性原则，尽量不这么做。</p>\n<h2 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h2><p>一个<code>.cc/.cpp</code>文件都应该对应一个<code>.h</code>文件。也有些常见例外，例如单元测试代码和只包含<code>main()</code>入口函数的源文件。</p>\n<h4 id=\"Self-contained-头文件\"><a href=\"#Self-contained-头文件\" class=\"headerlink\" title=\"Self-contained 头文件\"></a>Self-contained 头文件</h4><blockquote>\n<p>Tip: 头文件应该能够自给自足（<strong>self-contained</strong>，也就是可以作为第一个头文件被引入），简单来说就是头文件中依赖的其他声明要在头文件中定义清楚，而不能依赖在<code>.cc</code>文件中调整引入顺序解决依赖。</p>\n</blockquote>\n<p>如果<code>.h</code>文件声明了一个模板或内联函数，同时也在该文件加以定义。凡是有用到这些的<code>.cc</code>文件，就得统统包含该头文件，否则程序可能会在构建中链接失败。</p>\n<p>有个例外：如果某函数模板为所有相关模板参数显式实例化，或本身就是某类的一个私有成员，那么它就只能定义在实例化该模板的 .cc 文件里。</p>\n<h4 id=\"define保护\"><a href=\"#define保护\" class=\"headerlink\" title=\"#define保护\"></a>#define保护</h4><blockquote>\n<p>Tip: 所有头文件都应该使用 <code>#define</code> 来防止头文件被多重包含， 命名格式当是: <code>&lt;PROJECT&gt;_&lt;PATH&gt;_&lt;FILE&gt;_H_</code>。</p>\n</blockquote>\n<p>为保证唯一性， 头文件的命名应该基于所在项目源代码树的全路径. 例如， 项目 <code>foo</code>中的头文件<code>foo/src/bar/baz.h</code>可按如下方式保护:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> FOO_BAR_BAZ_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOO_BAR_BAZ_H_</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// FOO_BAR_BAZ_H_</span></span></span><br></pre></td></tr></table></figure>\n<p><code>#define</code> 与 <code>#pragma once</code>区别</p>\n<p><code>#pragma once</code>是编译相关，就是说这个编译系统上能用，但在其他编译系统不一定可以，也就是说移植性差。</p>\n<p>所以尽量使用<code>#ifndef</code>来避免头文件重复引用。</p>\n<h4 id=\"前置声明\"><a href=\"#前置声明\" class=\"headerlink\" title=\"前置声明\"></a>前置声明</h4><blockquote>\n<p>Tip: 尽可能地<strong>避免使用</strong>前置声明。使用 #include 包含需要的头文件即可。</p>\n</blockquote>\n<p>所谓「前置声明」（forward declaration）是类、函数和模板的纯粹声明，没伴随着其定义。</p>\n<ul>\n<li><p>优点</p>\n<ul>\n<li>前置声明能够节省编译时间，多余的<code>#include</code>会迫使编译器展开更多的文件，处理更多的输入。</li>\n<li>前置声明能够节省不必要的重新编译的时间。<code>#include</code>使代码因为头文件中无关的改动而被重新编译多次。</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>前置声明隐藏了依赖关系，头文件改动时，用户的代码会跳过必要的重新编译过程。</li>\n<li>前置声明可能会被库的后续更改所破坏。前置声明函数或模板有时会妨碍头文件开发者变动其API。例如扩大形参类型，加个自带默认参数的模板形参等等。</li>\n<li>前置声明来自命名空间 <code>std::</code>的symbol时，其<strong>行为未定义</strong>。</li>\n<li><p>很难判断什么时候该用前置声明，什么时候该用<code>#include</code>。极端情况下，用前置声明代替<code>includes</code>甚至都会暗暗地改变代码的含义：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.h:</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">B</span> &#123;</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">D</span> :</span> B &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good_user.cc:</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(B*)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">void</span>*)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(D* x)</span> </span>&#123; f(x); &#125;  <span class=\"comment\">// calls f(B*)</span></span><br></pre></td></tr></table></figure>\n<p>  如果<code>#include</code>被 B 和 D 的前置声明替代，<code>test()</code>就会调用<code>f(void*)</code>。</p>\n</li>\n<li>前置声明了不少来自头文件的symbol时，就会比单单一行的<strong>include冗长</strong>。</li>\n<li>仅仅为了能前置声明而重构代码（比如用指针成员代替对象成员）会使代码变得更慢更复杂。</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li>尽量避免前置声明那些定义在其他项目中的实体。</li>\n<li>函数：总是使用<code>#include</code>。</li>\n<li>类模板：优先使用<code>#include</code>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h4><blockquote>\n<p>Tip: 只有当函数只有<strong>10行甚至更少</strong>时才将其定义为内联函数。</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  当函数被声明为内联函数之后， 编译器会将其内联展开， 而不是按通常的函数调用机制进行调用。</p>\n</li>\n<li><p>优点</p>\n<p>  只要内联的函数体较小， 内联该函数可以令目标代码更加高效. 对于存取函数以及其它函数体比较短， 性能关键的函数， 鼓励使用内联。</p>\n</li>\n<li><p>缺点</p>\n<p>  滥用内联将导致程序变得更慢。内联可能使目标代码量或增或减， 这取决于内联函数的大小。内联非常短小的存取函数通常会减少代码大小， 但内联一个相当大的函数将戏剧性的增加代码大小。现代处理器由于更好的利用了指令缓存， 小巧的代码往往执行更快。</p>\n</li>\n<li><p>结论</p>\n<p>  一个较为合理的经验准则是， <strong>不要内联超过10行</strong>的函数。<strong>谨慎对待析构函数</strong>， 析构函数往往比其表面看起来要更长， 因为有隐含的成员和基类析构函数被调用!</p>\n<p>  有些函数即使声明为内联的也不一定会被编译器内联， 这点很重要; 比如<strong>虚函数</strong>和<strong>递归函数</strong>就不会被正常内联。通常， 递归函数不应该声明成内联函数，递归调用堆栈的展开并不像循环那么简单， 比如递归层数在编译时可能是未知的， 大多数编译器都不支持内联递归函数。虚函数内联的主要原因则是想把它的函数体放在类定义内， 为了图个方便， 抑或是当作文档描述其行为， 比如精短的存取函数.</p>\n</li>\n</ul>\n<h4 id=\"include的路径及顺序\"><a href=\"#include的路径及顺序\" class=\"headerlink\" title=\"#include的路径及顺序\"></a><code>#include</code>的路径及顺序</h4><blockquote>\n<p>Tip: 使用标准的头文件包含顺序可增强可读性， 避免隐藏依赖: 相关头文件， C 库， C++ 库， 其他库的 .h， 本项目内的 .h。</p>\n</blockquote>\n<p>项目内头文件应按照项目源代码目录树结构排列， 避免使用 UNIX 特殊的快捷目录<code>.</code>(当前目录)或<code>..</code>(上级目录). 例如， <code>google-awesome-project/src/base/logging.h</code>应该按如下方式包含:</p>\n<blockquote>\n<p><code>#include &quot;base/logging.h&quot;</code></p>\n</blockquote>\n<p>又如，<code>dir/foo.cc</code>或<code>dir/foo_test.cc</code>的主要作用是实现或测试<code>dir2/foo2.h</code>的功能，<code>foo.cc</code>中包含头文件的次序如下：</p>\n<ol>\n<li><code>dir2/foo2.h</code>（优先位置，详情如下）</li>\n<li>C 系统文件</li>\n<li>C++ 系统文件</li>\n<li>其他库的<code>.h</code>文件</li>\n<li>本项目内<code>.h</code>文件</li>\n</ol>\n<p>这种优先的顺序排序保证当<code>dir2/foo2.h</code>遗漏某些必要的库时，<code>dir/foo.cc</code>或<code>dir/foo_test.cc</code>的构建会立刻中止。因此这一条规则保证维护这些文件的人们首先看到构建中止的消息而不是维护其他包的人们。</p>\n<p>您所依赖的符号(symbols)被哪些头文件所定义，您就应该包含<code>(include)</code>哪些头文件，前置声明(forward declarations)情况除外。比如您要用到<code>bar.h</code>中的某个符号， 哪怕您所包含的 <code>foo.h</code>已经包含了<code>bar.h</code>， 也照样得包含<code>bar.h</code>， 除非 <code>foo.h</code>有明确说明它会自动向您提供<code>bar.h</code>中的symbol。 不过，凡是cc文件所对应的「相关头文件」已经包含的，就不用再重复包含进其cc文件里面了，就像<code>foo.cc</code>只包含<code>foo.h</code>就够了，不用再管后者所包含的其它内容。</p>\n<p>举例来说，<code>google-awesome-project/src/foo/internal/fooserver.cc</code>的包含次序如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"foo/public/fooserver.h\"</span> <span class=\"comment\">// 优先位置</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;hash_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"base/basictypes.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"base/commandlineflags.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"foo/public/bar.h\"</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ol>\n<li>避免多重包含</li>\n<li>头文件尽量避免使用前置声明，直接<code>include</code></li>\n<li>内联函数最好少于10行。类内部的函数一般会自动内联。所以某函数一旦不需要内联，其定义就不要再放在头文件里，而是放到对应的<code>.cc</code>文件里</li>\n<li>包含文件的次序除了美观之外， 最重要的是可以减少隐藏依赖，使每个头文件在“最需要编译”的地方编译。</li>\n</ol>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><h4 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h4><blockquote>\n<p>Tip: 鼓励在<code>.cc</code>文件内使用匿名命名空间或<code>static</code>声明. 使用具名的命名空间时，其名称可基于项目名或相对路径。<strong>禁止使用using指示(using-directive e.g. using namespace foo;)</strong>。禁止使用内联命名空间(inline namespace)。</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  命名空间将全局作用域细分为独立的， 具名的作用域， 可有效防止全局作用域的命名冲突。</p>\n</li>\n<li><p>优点</p>\n<p>  类已经提将命名分割在不同类的作用域内， 命名空间在这基础上又封装了一层。</p>\n<p>  举例来说， 两个不同项目的全局作用域都有一个类<code>Foo</code>， 这样在编译或运行时造成冲突。如果每个项目将代码置于不同命名空间中，<code>project1::Foo</code>和<code>project2::Foo</code>作为不同符号自然不会冲突。</p>\n<p>  内联命名空间会自动把内部的标识符放到外层作用域，比如：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> X &#123;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">namespace</span> Y &#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace Y</span></span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace X</span></span><br></pre></td></tr></table></figure>\n<p>  <code>X::Y::foo()</code>与<code>X::foo()</code>彼此可代替。内联命名空间主要用来保持跨版本的 ABI 兼容性。</p>\n</li>\n<li><p>缺点</p>\n<p>  命名空间具有迷惑性， 因为它们使得区分两个相同命名所指代的定义更加困难。</p>\n<p>  内联命名空间很容易令人迷惑，毕竟其内部的成员不再受其声明所在命名空间的限制。内联命名空间只在大型版本控制里有用。</p>\n</li>\n<li><p>结论</p>\n<p>  根据下文将要提到的策略合理使用命名空间。</p>\n<ul>\n<li>遵守<code>命名空间命名</code>中的规则。</li>\n<li>像之前的几个例子中一样，在命名空间的最后注释出命名空间的名字。</li>\n<li><p>用命名空间把文件包含， 以及类的前置声明<strong>以外</strong>的整个源文件封装起来， 以区别于其它命名空间:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .h 文件</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> mynamespace &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有声明都置于命名空间中</span></span><br><span class=\"line\"><span class=\"comment\">// 注意不要使用缩进</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"comment\">// namespace mynamespace</span></span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .cc 文件</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> mynamespace &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数定义都置于命名空间中</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> MyClass::Foo() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"comment\">// namespace mynamespace</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不要在命名空间<code>std</code>内声明任何东西， 包括标准库的类前置声明。在<code>std</code>命名空间声明实体是未定义的行为， 会导致如不可移植。声明标准库下的实体， 需要包含对应的头文件。</p>\n</li>\n<li><p>不应该使用<code>using</code>指示 引入整个命名空间的标识符号。</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 禁止 —— 污染命名空间</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> foo;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不要在头文件中使用<code>命名空间别名</code>除非显式标记内部命名空间使用。因为任何在头文件中引入的命名空间都会成为公开API的一部分。</p>\n</li>\n<li>禁止用内联命名空间</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"匿名命名空间和静态变量\"><a href=\"#匿名命名空间和静态变量\" class=\"headerlink\" title=\"匿名命名空间和静态变量\"></a>匿名命名空间和静态变量</h4><blockquote>\n<p>Tip: 在<code>.cc</code>文件中定义一个不需要被外部引用的变量时，可以将它们放在匿名命名空间或声明为<code>static</code>。但是不要在<code>.h</code>文件中这么做。</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  所有置于匿名命名空间的声明都具有内部链接性，函数和变量可以经由声明为<code>static</code>拥有内部链接性，这意味着你在这个文件中声明的这些标识符都不能在另一个文件中被访问。即使两个文件声明了完全一样名字的标识符，它们所指向的实体实际上是完全不同的。</p>\n</li>\n<li><p>结论</p>\n<p>  推荐、鼓励在<code>.cc</code>中对于不需要在其他地方引用的标识符使用内部链接性声明，但是不要在<code>.h</code>中使用。</p>\n<p>  匿名命名空间的声明和具名的格式相同，在最后注释上<code>namespace</code>:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"非成员函数、静态成员函数和全局函数\"><a href=\"#非成员函数、静态成员函数和全局函数\" class=\"headerlink\" title=\"非成员函数、静态成员函数和全局函数\"></a>非成员函数、静态成员函数和全局函数</h4><blockquote>\n<p>Tip: 使用静态成员函数或命名空间内的非成员函数，尽量不要用裸的全局函数。将一系列函数直接置于命名空间中，不要用类的静态方法模拟出命名空间的效果，类的静态方法应当和类的实例或静态数据紧密相关。</p>\n</blockquote>\n<ul>\n<li><p>优点</p>\n<p>  某些情况下，非成员函数和静态成员函数是非常有用的，将非成员函数放在命名空间内可避免污染全局作用域。</p>\n</li>\n<li><p>缺点</p>\n<p>  将非成员函数和静态成员函数作为新类的成员或许更有意义，当它们需要访问外部资源或具有重要的依赖关系时更是如此。</p>\n</li>\n<li><p>结论</p>\n<p>  有时，把函数的定义同类的实例脱钩是有益的，甚至是必要的。这样的函数可以被定义成静态成员，或是非成员函数。非成员函数不应依赖于外部变量，应尽量置于某个命名空间内。相比单纯为了封装若干不共享任何静态数据的静态成员函数而创建类，不如使用<code>2.1命名空间</code>。举例而言，对于头文件<code>myproject/foo_bar.h</code>，应当使用</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> myproject &#123;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> foo_bar &#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Function1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Function2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace foo_bar</span></span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace myproject</span></span><br></pre></td></tr></table></figure>\n<p>  而非</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> myproject &#123;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooBar</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Function1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Function2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace myproject</span></span><br></pre></td></tr></table></figure>\n<p>  定义在同一编译单元的函数，被其他编译单元直接调用可能会引入不必要的耦合和链接时依赖；静态成员函数对此尤其敏感。可以考虑提取到新类中，或者将函数置于独立库的命名空间内。</p>\n<p>  如果你必须定义非成员函数，又只是在<code>.cc</code>文件中使用它，可使用<code>匿名命名空间</code>或<code>static</code>链接关键字(如<code>static int Foo() {...}</code>) 限定其作用域。</p>\n</li>\n</ul>\n<h4 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h4><blockquote>\n<p>Tip: 将函数变量尽可能置于最小作用域内, 并在变量声明时进行初始化。</p>\n</blockquote>\n<p>C++允许在函数的任何位置声明变量。我们提倡在尽可能小的作用域中声明变量，离第一次使用越近越好。这使得代码浏览者更容易定位变量声明的位置, 了解变量的类型和初始值。特别是，应使用初始化的方式替代声明再赋值, 比如:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\">i = f(); <span class=\"comment\">// 坏——初始化和声明分离</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> j = g(); <span class=\"comment\">// 好——初始化时声明</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">v.push_back(<span class=\"number\">1</span>); <span class=\"comment\">// 用花括号初始化更好</span></span><br><span class=\"line\">v.push_back(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;; <span class=\"comment\">// 好——v 一开始就初始化</span></span><br></pre></td></tr></table></figure>\n<p>属于<code>if</code>,<code>while</code>和<code>for</code>语句的变量应当在这些语句中正常地声明，这样子这些变量的作用域就被限制在这些语句中了，举例而言:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* p = <span class=\"built_in\">strchr</span>(str, <span class=\"string\">'/'</span>)) str = p + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>有一个例外, 如果变量是一个对象, 每次进入作用域都要调用其构造函数, 每次退出作用域都要调用其析构函数。这会导致效率降低。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 低效的实现</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000000</span>; ++i) &#123;</span><br><span class=\"line\">    Foo f;    <span class=\"comment\">// 构造函数和析构函数分别调用 1000000 次!</span></span><br><span class=\"line\">    f.DoSomething(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo f;    <span class=\"comment\">// 构造函数和析构函数只调用 1 次</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000000</span>; ++i) &#123;</span><br><span class=\"line\">    f.DoSomething(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"静态和全局变量\"><a href=\"#静态和全局变量\" class=\"headerlink\" title=\"静态和全局变量\"></a>静态和全局变量</h4><blockquote>\n<p>Tip: 禁止定义静态储存周期非POD变量，禁止使用含有副作用的函数初始化POD全局变量，因为多编译单元中的静态变量执行时的构造和析构顺序是未明确的，这将导致代码的不可移植。</p>\n</blockquote>\n<p>静态生存周期的对象，即包括了全局变量，静态变量，静态类成员变量和函数静态变量，都必须是原生数据类型<code>(POD : Plain Old Data)</code>: 即<code>int</code>,<code>char</code>和<code>float</code>, 以及 POD类型的<code>指针</code>、<code>数组</code>和<code>结构体</code>。</p>\n<p>静态变量的构造函数、析构函数和初始化的顺序在<code>C++</code>中是只有部分明确的，甚至随着构建变化而变化，导致难以发现的 bug。所以除了禁用类类型的全局变量，我们也不允许用函数返回值来初始化POD 变量，除非该函数（比如 getenv() 或 getpid() ）不涉及任何全局变量。函数作用域里的静态变量除外，毕竟它的初始化顺序是有明确定义的，而且只会在指令执行到它的声明那里才会发生。</p>\n<p>综上所述，我们只允许POD类型的静态变量，即<strong>完全禁用</strong><code>vector</code>(使用 C 数组替代) 和<code>string</code>(使用<code>const char []</code>)。</p>\n<h4 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ol>\n<li><code>cc</code>中的匿名命名空间可避免命名冲突, 限定作用域, 避免直接使用<code>using</code>关键字污染命名空间</li>\n<li>尽量不用全局函数和全局变量, 考虑作用域和命名空间限制, 尽量单独形成编译单元</li>\n<li>多线程中的全局变量 (含静态成员变量) 不要使用<code>class</code>类型(含 STL 容器), 避免不明确行为导致的 bug</li>\n<li>局部变量在声明的同时进行显式值初始化，比起隐式初始化再赋值的两步过程要高效</li>\n</ol>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><p>类是 C++ 中代码的基本单元. 显然, 它们被广泛使用. 本节列举了在写一个类时的主要注意事项.</p>\n<h4 id=\"构造函数的职责\"><a href=\"#构造函数的职责\" class=\"headerlink\" title=\"构造函数的职责\"></a>构造函数的职责</h4><ul>\n<li><p>总述</p>\n<p>  不要在构造函数中调用虚函数, 也不要在无法报出错误时进行可能失败的初始化.</p>\n</li>\n<li><p>定义</p>\n<p>  在构造函数中可以进行各种初始化操作.</p>\n</li>\n<li><p>优点</p>\n<ul>\n<li>无需考虑类是否被初始化</li>\n<li>经过构造函数完全初始化后的对象可以为<code>const</code>类型, 也能更方便地被标准容器或算法使用</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>如果在构造函数内调用了自身的虚函数, 这类调用是不会重定向到子类的虚函数实现. 即使当前没有子类化实现, 将来仍是隐患.</li>\n<li>如果执行失败, 会得到一个初始化失败的对象, 这个对象有可能进入不正常的状态, 必须使用<code>bool isValid()</code>或类似这样的机制才能检查出来, 然而这是一个十分容易被疏忽的方法.</li>\n<li>构造函数的地址是无法被取得的, 因此, 举例来说, 由构造函数完成的工作是无法以简单的方式交给其他线程的.</li>\n</ul>\n</li>\n<li><p>结论</p>\n<p>  构造函数不允许调用虚函数. 如果代码允许, 直接终止程序是一个合适的处理错误的方式. 否则, 考虑用<code>Init()</code>方法或工厂函数.</p>\n</li>\n</ul>\n<h4 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h4><ul>\n<li><p>总述</p>\n<p>  不要定义隐式类型转换. 对于转换运算符和单参数构造函数, 请使用<code>explicit</code>关键字.</p>\n</li>\n<li><p>定义</p>\n<p>  隐式类型转换允许一个某种类型 (称作 源类型) 的对象被用于需要另一种类型 (称作 目的类型) 的位置, 例如, 将一个<code>int</code>类型的参数传递给需要<code>double</code>类型的函数.</p>\n<p>  <code>explicit</code>关键字可以用于构造函数或 (在 C++11 引入) 类型转换运算符, 以保证只有当目的类型在调用点被显式写明时才能进行类型转换,例如使用<code>cast</code>. 这不仅作用于隐式类型转换, 还能作用于 C++11 的列表初始化语法:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> &#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">Foo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">double</span> y)</span></span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Func</span><span class=\"params\">(Foo f)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>  此时下面的代码是不允许的:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Func(&#123;<span class=\"number\">42</span>, <span class=\"number\">3.14</span>&#125;);  <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n<p>  这一代码从技术上说并非隐式类型转换, 但是语言标准认为这是<code>explicit</code>应当限制的行为.</p>\n</li>\n<li><p>优点</p>\n<ul>\n<li>有时目的类型名是一目了然的, 通过避免显式地写出类型名, 隐式类型转换可以让一个类型的可用性和表达性更强.</li>\n<li>隐式类型转换可以简单地取代函数重载.</li>\n<li>在初始化对象时, 列表初始化语法是一种简洁明了的写法.</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>隐式类型转换会隐藏类型不匹配的错误. 有时, 目的类型并不符合用户的期望, 甚至用户根本没有意识到发生了类型转换.</li>\n<li>隐式类型转换会让代码难以阅读, 尤其是在有函数重载的时候, 因为这时很难判断到底是哪个函数被调用.</li>\n<li>单参数构造函数有可能会被无意地用作隐式类型转换.</li>\n<li>如果单参数构造函数没有加上<code>explicit</code>关键字, 读者无法判断这一函数究竟是要作为隐式类型转换, 还是作者忘了加上<code>explicit</code>标记.</li>\n<li>并没有明确的方法用来判断哪个类应该提供类型转换, 这会使得代码变得含糊不清.</li>\n<li>如果目的类型是隐式指定的, 那么列表初始化会出现和隐式类型转换一样的问题, 尤其是在列表中只有一个元素的时候.</li>\n</ul>\n</li>\n<li><p>结论</p>\n<p>  在类型定义中, 类型转换运算符和单参数构造函数都应当用<code>explicit</code>进行标记. 一个例外是, 拷贝和移动构造函数不应当被标记为<code>explicit</code>, 因为它们并不执行类型转换.</p>\n<p>  不能以一个参数进行调用的构造函数不应当加上<code>explicit</code>. 接受一个<code>std::initializer_list</code>作为参数的构造函数也应当省略 <code>explicit</code>, 以便支持拷贝初始化 (例如<code>MyType m = {1, 2};</code>)</p>\n</li>\n</ul>\n<h4 id=\"可拷贝类型和可移动类型\"><a href=\"#可拷贝类型和可移动类型\" class=\"headerlink\" title=\"可拷贝类型和可移动类型\"></a>可拷贝类型和可移动类型</h4><ul>\n<li><p>总述</p>\n<p>  如果你的类型需要, 就让它们支持拷贝 / 移动. 否则, 就把隐式产生的拷贝和移动函数禁用.</p>\n</li>\n<li><p>定义</p>\n<p>  可拷贝类型允许对象在初始化时得到来自相同类型的另一对象的值, 或在赋值时被赋予相同类型的另一对象的值, 同时不改变源对象的值. 对于用户定义的类型, 拷贝操作一般通过拷贝构造函数与拷贝赋值操作符定义. <code>string</code>类型就是一个可拷贝类型的例子.</p>\n<p>  可移动类型允许对象在初始化时得到来自相同类型的临时对象的值, 或在赋值时被赋予相同类型的临时对象的值 (因此所有可拷贝对象也是可移动的). <code>std::unique_ptr&lt;int&gt;</code>就是一个可移动但不可复制的对象的例子. 对于用户定义的类型, 移动操作一般是通过移动构造函数和移动赋值操作符实现的.</p>\n<p>  拷贝 / 移动构造函数在某些情况下会被编译器隐式调用. 例如, 通过传值的方式传递对象.</p>\n</li>\n<li><p>优点</p>\n<p>  可移动及可拷贝类型的对象可以通过传值的方式进行传递或者返回, 这使得 API 更简单, 更安全也更通用. 与传指针和引用不同, 这样的传递不会造成所有权, 生命周期, 可变性等方面的混乱, 也就没必要在协议中予以明确. 这同时也防止了客户端与实现在非作用域内的交互, 使得它们更容易被理解与维护. 这样的对象可以和需要传值操作的通用 API 一起使用, 例如大多数容器.</p>\n<p>  拷贝 / 移动构造函数与赋值操作一般来说要比它们的各种替代方案, 比如<code>Clone()</code>, <code>CopyFrom()</code> or <code>Swap()</code>, 更容易定义, 因为它们能通过编译器产生, 无论是隐式的还是通过<code>= default</code>. 这种方式很简洁, 也保证所有数据成员都会被复制. 拷贝与移动构造函数一般也更高效, 因为它们不需要堆的分配或者是单独的初始化和赋值步骤, 同时,对于类似省略不必要的拷贝这样的优化它们也更加合适.</p>\n<p>  移动操作允许隐式且高效地将源数据转移出右值对象. 这有时能让代码风格更加清晰.</p>\n</li>\n<li><p>缺点</p>\n<p>  许多类型都不需要拷贝, 为它们提供拷贝操作会让人迷惑, 也显得荒谬而不合理. 单件类型(<code>Registerer</code>), 与特定的作用域相关的类型 (<code>Cleanup</code>), 与其他对象实体紧耦合的类型 (<code>Mutex</code>) 从逻辑上来说都不应该提供拷贝操作. 为基类提供拷贝 / 赋值操作是有害的, 因为在使用它们时会造成对象切割. 默认的或者随意的拷贝操作实现可能是不正确的, 这往往导致令人困惑并且难以诊断出的错误.</p>\n<p>  拷贝构造函数是隐式调用的, 也就是说, 这些调用很容易被忽略. 这会让人迷惑, 尤其是对那些所用的语言约定或强制要求传引用的程序员来说更是如此. 同时, 这从一定程度上说会鼓励过度拷贝, 从而导致性能上的问题.</p>\n</li>\n<li><p>结论</p>\n<p>  如果需要就让你的类型可拷贝 / 可移动. 作为一个经验法则, 如果对于你的用户来说这个拷贝操作不是一眼就能看出来的, 那就不要把类型设置为可拷贝. 如果让类型可拷贝, 一定要同时给出拷贝构造函数和赋值操作的定义, 反之亦然. 如果让类型可拷贝, 同时移动操作的效率高于拷贝操作, 那么就把移动的两个操作 (移动构造函数和赋值操作) 也给出定义. 如果类型不可拷贝, 但是移动操作的正确性对用户显然可见, 那么把这个类型设置为只可移动并定义移动的两个操作.</p>\n<p>  如果定义了拷贝/移动操作, 则要保证这些操作的默认实现是正确的. 记得时刻检查默认操作的正确性, 并且在文档中说明类是可拷贝的且/或可移动的.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Foo(Foo&amp;&amp; other) : field_(other.field) &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 差, 只定义了移动构造函数, 而没有定义对应的赋值运算符.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Field field_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>  由于存在对象切割的风险, 不要为任何有可能有派生类的对象提供赋值操作或者拷贝 / 移动构造函数 (当然也不要继承有这样的成员函数的类). 如果你的基类需要可复制属性, 请提供一个<code>public virtual Clone()</code>和一个<code>protected</code>的拷贝构造函数以供派生类实现.</p>\n<p>  如果你的类不需要拷贝 / 移动操作, 请显式地通过在<code>public</code>域中使用<code>= delete</code>或其他手段禁用之.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyClass is neither copyable nor movable.</span></span><br><span class=\"line\">MyClass(<span class=\"keyword\">const</span> MyClass&amp;) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">MyClass&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> MyClass&amp;) = <span class=\"keyword\">delete</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"结构体-VS-类\"><a href=\"#结构体-VS-类\" class=\"headerlink\" title=\"结构体 VS 类\"></a>结构体 VS 类</h4><ul>\n<li><p>总述</p>\n<p>  仅当只有数据成员时使用<code>struct</code>, 其它一概使用<code>class</code>.</p>\n</li>\n<li><p>说明</p>\n<p>  在 C++ 中<code>struct</code>和<code>class</code>关键字几乎含义一样. 我们为这两个关键字添加我们自己的语义理解, 以便为定义的数据类型选择合适的关键字.</p>\n<p>  <code>struct</code>用来定义包含数据的被动式对象, 也可以包含相关的常量, 但除了存取数据成员之外, 没有别的函数功能. 并且存取功能是通过直接访问位域, 而非函数调用. 除了构造函数, 析构函数, <code>Initialize()</code>, <code>Reset()</code>, <code>Validate()</code> 等类似的用于设定数据成员的函数外, 不能提供其它功能的函数.</p>\n<p>  如果需要更多的函数功能, <code>class</code>更适合. 如果拿不准, 就用 <code>class</code>.</p>\n<p>  为了和STL保持一致, 对于仿函数等特性可以不用<code>class</code>而是使用<code>struct</code>.</p>\n<p>  注意: 类和结构体的成员变量使用不同的命名规则.</p>\n</li>\n</ul>\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><ul>\n<li><p>总述</p>\n<p>  使用组合常常比使用继承更合理. 如果使用继承的话, 定义为 public 继承.</p>\n</li>\n<li><p>定义</p>\n<p>  当子类继承基类时, 子类包含了父基类所有数据及操作的定义. C++ 实践中, 继承主要用于两种场合: 实现继承, 子类继承父类的实现代码; 接口继承, 子类仅继承父类的方法名称.</p>\n</li>\n<li><p>优点</p>\n<p>  实现继承通过原封不动的复用基类代码减少了代码量. 由于继承是在编译时声明, 程序员和编译器都可以理解相应操作并发现错误. 从编程角度而言, 接口继承是用来强制类输出特定的 API. 在类没有实现 API 中某个必须的方法时, 编译器同样会发现并报告错误.</p>\n</li>\n<li><p>缺点</p>\n<p>  对于实现继承, 由于子类的实现代码散布在父类和子类间之间, 要理解其实现变得更加困难. 子类不能重写父类的非虚函数, 当然也就不能修改其实现. 基类也可能定义了一些数据成员, 因此还必须区分基类的实际布局.</p>\n</li>\n<li><p>结论</p>\n<p>  所有继承必须是<code>public</code>的. 如果你想使用私有继承, 你应该替换成把基类的实例作为成员对象的方式.</p>\n<p>  不要过度使用实现继承. 组合常常更合适一些. 尽量做到只在 “是一个” (“is-a”, 其他 “has-a” 情况下请使用组合) 的情况下使用继承: 如果<code>Bar</code>的确 “是一种” <code>Foo</code>, <code>Bar</code>才能继承<code>Foo</code>.</p>\n<p>  必要的话, 析构函数声明为<code>virtual</code>. 如果你的类有虚函数, 则析构函数也应该为虚函数.</p>\n<p>  对于可能被子类访问的成员函数, 不要过度使用<code>protected</code>关键字. 注意, 数据成员都必须是<strong>私有的</strong>.</p>\n<p>  对于重载的虚函数或虚析构函数, 使用<code>override</code>, 或 (较不常用的)<code>final</code>关键字显式地进行标记. 较早 (早于 C++11) 的代码可能会使用<code>virtual</code>关键字作为不得已的选项. 因此, 在声明重载时, 请使用 <code>override</code>, <code>final</code>或<code>virtual</code>的其中之一进行标记. 标记为<code>override</code>或<code>final</code>的析构函数如果不是对基类虚函数的重载的话, 编译会报错, 这有助于捕获常见的错误. 这些标记起到了文档的作用, 因为如果省略这些关键字, 代码阅读者不得不检查所有父类, 以判断该函数是否是虚函数.</p>\n</li>\n</ul>\n<h4 id=\"多重继承\"><a href=\"#多重继承\" class=\"headerlink\" title=\"多重继承\"></a>多重继承</h4><ul>\n<li><p>总述</p>\n<p>  真正需要用到多重实现继承的情况少之又少. 只在以下情况我们才允许多重继承: 最多只有一个基类是非抽象类; 其它基类都是以<code>Interface</code>为后缀的纯接口类.</p>\n</li>\n<li><p>定义</p>\n<p>  多重继承允许子类拥有多个基类. 要将作为<em>纯接口</em>的基类和具有<em>实现</em>的基类区别开来.</p>\n</li>\n<li><p>优点</p>\n<p>  相比单继承, 多重实现继承可以复用更多的代码.</p>\n</li>\n<li><p>缺点</p>\n<p>  真正需要用到多重 实现 继承的情况少之又少. 有时多重实现继承看上去是不错的解决方案, 但这时你通常也可以找到一个更明确, 更清晰的不同解决方案.</p>\n</li>\n<li><p>结论</p>\n<p>  只有当所有父类除第一个外都是<em>纯接口类</em>时, 才允许使用多重继承. 为确保它们是纯接口, 这些类必须以<code>Interface</code>为后缀.</p>\n</li>\n</ul>\n<h4 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h4><ul>\n<li><p>总述</p>\n<p>  接口是指满足特定条件的类, 这些类以<code>Interface</code>为后缀 (不强制).</p>\n</li>\n<li><p>定义</p>\n<p>  当一个类满足以下要求时, 称之为纯接口:</p>\n<ul>\n<li>只有纯虚函数 (“<code>=0</code>”) 和静态函数 (除了下文提到的析构函数).</li>\n<li>没有非静态数据成员.</li>\n<li>没有定义任何构造函数. 如果有, 也不能带有参数, 并且必须为<code>protected</code>.</li>\n<li><p>如果它是一个子类, 也只能从满足上述条件并以<code>Interface</code>为后缀的类继承.</p>\n<p>接口类不能被直接实例化, 因为它声明了纯虚函数. 为确保接口类的所有实现可被正确销毁, 必须为之声明虚析构函数</p>\n</li>\n</ul>\n</li>\n<li><p>优点</p>\n<p>  以<code>Interface</code>为后缀可以提醒其他人不要为该接口类增加函数实现或非静态数据成员. 这一点对于<code>多重继承</code>尤其重要.</p>\n</li>\n<li><p>缺点</p>\n<p>  <code>Interface</code>后缀增加了类名长度, 为阅读和理解带来不便. 同时, 接口属性作为实现细节不应暴露给用户.</p>\n</li>\n<li><p>结论</p>\n<p>  只有在满足上述条件时, 类才以<code>Interface</code>结尾, 但反过来, 满足上述需要的类未必一定以<code>Interface</code>结尾.</p>\n</li>\n</ul>\n<h4 id=\"运算符重载\"><a href=\"#运算符重载\" class=\"headerlink\" title=\"运算符重载\"></a>运算符重载</h4><ul>\n<li><p>总述</p>\n<p>  除少数特定环境外, 不要重载运算符. 也不要创建用户定义字面量.</p>\n</li>\n<li><p>定义</p>\n<p>  C++ 允许用户通过使用<code>operator</code>关键字对内建运算符进行重载定义, 只要其中一个参数是用户定义的类型. <code>operator</code>关键字还允许用户使用<code>operator&quot;&quot;</code>定义新的字面运算符, 并且定义类型转换函数, 例如<code>operator bool()</code>.</p>\n</li>\n<li><p>优点</p>\n<p>  重载运算符可以让代码更简洁易懂, 也使得用户定义的类型和内建类型拥有相似的行为. 重载运算符对于某些运算来说是符合符合语言习惯的名称 (例如<code>==</code>,<code>&lt;</code>,<code>=</code>,<code>&lt;&lt;</code>), 遵循这些语言约定可以让用户定义的类型更易读, 也能更好地和需要这些重载运算符的函数库进行交互操作.</p>\n<p>  对于创建用户定义的类型的对象来说, 用户定义字面量是一种非常简洁的标记.</p>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>要提供正确, 一致, 不出现异常行为的操作符运算需要花费不少精力, 而且如果达不到这些要求的话, 会导致令人迷惑的 Bug.</li>\n<li>过度使用运算符会带来难以理解的代码, 尤其是在重载的操作符的语义与通常的约定不符合时.</li>\n<li>函数重载有多少弊端, 运算符重载就至少有多少.</li>\n<li>运算符重载会混淆视听, 让你误以为一些耗时的操作和操作内建类型一样轻巧.</li>\n<li>对重载运算符的调用点的查找需要的可就不仅仅是像 grep 那样的程序了, 这时需要能够理解 C++ 语法的搜索工具.</li>\n<li>重载某些运算符本身就是有害的. 例如, 重载一元运算符 &amp; 会导致同样的代码有完全不同的含义, 这取决于重载的声明对某段代码而言是否是可见的. 重载诸如<code>&amp;&amp;</code>,<code>||</code>和<code>,</code> 会导致运算顺序和内建运算的顺序不一致.</li>\n</ul>\n</li>\n<li><p>结论</p>\n<p>  只有在意义明显, 不会出现奇怪的行为并且与对应的内建运算符的行为一致时才定义重载运算符. 例如, | 要作为位或或逻辑或来使用, 而不是作为 shell 中的管道.</p>\n<p>  只有对用户自己定义的类型重载运算符. 更准确地说, 将它们和它们所操作的类型定义在同一个头文件中, <code>.cc</code>中和命名空间中. 这样做无论类型在哪里都能够使用定义的运算符, 并且最大程度上避免了多重定义的风险. 如果可能的话, 请避免将运算符定义为模板, 因为此时它们必须对任何模板参数都能够作用. 如果你定义了一个运算符, 请将其相关且有意义的运算符都进行定义, 并且保证这些定义的语义是一致的. 例如, 如果你重载了<code>&lt;</code>, 那么请将所有的比较运算符都进行重载, 并且保证对于同一组参数,<code>&lt;</code>和<code>&gt;</code>不会同时返回<code>true</code>.</p>\n<p>  不要为了避免重载操作符而走极端. 比如说, 应当定义<code>==</code>,<code>=</code>,和<code>&lt;&lt;</code>而不是<code>Equals()</code>,<code>CopyFrom()</code>和<code>PrintTo()</code>. 反过来说, 不要只是为了满足函数库需要而去定义运算符重载. 比如说, 如果你的类型没有自然顺序, 而你要将它们存入<code>std::set</code>中, 最好还是定义一个自定义的比较运算符而不是重载<code>&lt;</code>.</p>\n<p>  不要重载<code>&amp;&amp;</code>,<code>||</code>,<code>,</code>或一元运算符<code>&amp;</code>. 不要重载<code>operator&quot;&quot;</code>, 也就是说, 不要引入用户定义字面量.</p>\n</li>\n</ul>\n<h4 id=\"存取控制\"><a href=\"#存取控制\" class=\"headerlink\" title=\"存取控制\"></a>存取控制</h4><ul>\n<li><p>总述</p>\n<p>  将<em>所有</em>数据成员声明为<code>private</code>, 除非是<code>static const</code>类型成员 (遵循 常量命名规则). 处于技术上的原因, 在使用<code>Google Test</code>时我们允许测试固件类中的数据成员为<code>protected</code>.</p>\n</li>\n</ul>\n<h4 id=\"声明顺序\"><a href=\"#声明顺序\" class=\"headerlink\" title=\"声明顺序\"></a>声明顺序</h4><ul>\n<li><p>总述</p>\n<p>  将相似的声明放在一起, 将<code>public</code>部分放在最前.</p>\n</li>\n<li><p>说明</p>\n<p>  类定义一般应以<code>public:</code>开始, 后跟<code>protected:</code>, 最后是<code>private:</code>. 省略空部分.</p>\n<p>  在各个部分中, 建议将类似的声明放在一起, 并且建议以如下的顺序: 类型 (包括<code>typedef</code>,<code>using</code>和嵌套的结构体与类), 常量, 工厂函数, 构造函数, 赋值运算符, 析构函数, 其它函数, 数据成员.</p>\n<p>  不要将大段的函数定义内联在类定义中. 通常，只有那些普通的, 或性能关键且短小的函数可以内联在类定义中. 参见 内联函数 一节.</p>\n</li>\n</ul>\n<h4 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ol>\n<li>不在构造函数中做太多逻辑相关的初始化</li>\n<li>编译器提供的默认构造函数不会对变量进行初始化, 如果定义了其他构造函数, 编译器不再提供, 需要编码者自行提供默认构造函数</li>\n<li>为避免隐式转换, 需将单参数构造函数声明为<code>explicit</code></li>\n<li>为避免拷贝构造函数, 赋值操作的滥用和编译器自动生成, 可将其声明为<code>private</code>且无需实现</li>\n<li>仅在作为数据集合时使用<code>struct</code></li>\n<li>组合 &gt; 实现继承 &gt; 接口继承 &gt; 私有继承, 子类重载的虚函数也要声明<code>virtual</code>关键字, 虽然编译器允许不这样做</li>\n<li>避免使用多重继承, 使用时, 除一个基类含有实现外, 其他基类均为纯接口</li>\n<li>接口类类名以<code>Interface</code>为后缀, 除提供带实现的虚析构函数, 静态成员函数外, 其他均为纯虚函数, 不定义非静态数据成员, 不提供构造函数, 提供的话, 声明为<code>protected</code></li>\n<li>为降低复杂性, 尽量不重载操作符, 模板, 标准类中使用时提供文档说明</li>\n<li>存取函数一般内联在头文件中</li>\n<li>声明次序:<code>public</code> -&gt; <code>protected</code> -&gt; <code>private</code></li>\n<li>函数体尽量短小, 紧凑, 功能单一</li>\n</ol>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h4 id=\"参数顺序\"><a href=\"#参数顺序\" class=\"headerlink\" title=\"参数顺序\"></a>参数顺序</h4><ul>\n<li><p>总述</p>\n<p>  函数的参数顺序为: 输入参数在先, 后跟输出参数.</p>\n</li>\n<li><p>说明</p>\n<p>  C/C++ 中的函数参数或者是函数的输入, 或者是函数的输出, 或兼而有之. 输入参数通常是值参或<code>const</code>引用, 输出参数或输入/输出参数则一般为非<code>const</code>指针. 在排列参数顺序时, 将所有的输入参数置于输出参数之前. 特别要注意, 在加入新参数时不要因为它们是新参数就置于参数列表最后, 而是仍然要按照前述的规则, 即将新的输入参数也置于输出参数之前.</p>\n<p>  这并非一个硬性规定. 输入/输出参数 (通常是类或结构体) 让这个问题变得复杂. 并且, 有时候为了其他函数保持一致, 你可能不得不有所变通.</p>\n</li>\n</ul>\n<h4 id=\"编写简短函数\"><a href=\"#编写简短函数\" class=\"headerlink\" title=\"编写简短函数\"></a>编写简短函数</h4><ul>\n<li><p>总述</p>\n<p>  我们倾向于编写简短, 凝练的函数.</p>\n</li>\n<li><p>说明</p>\n<p>  我们承认长函数有时是合理的, 因此并不硬性限制函数的长度. 如果函数超过<code>40</code>行, 可以思索一下能不能在不影响程序结构的前提下对其进行分割.</p>\n<p>  即使一个长函数现在工作的非常好, 一旦有人对其修改, 有可能出现新的问题, 甚至导致难以发现的 bug. 使函数尽量简短,以便于他人阅读和修改代码.</p>\n<p>  在处理代码时, 你可能会发现复杂的长函数. 不要害怕修改现有代码: 如果证实这些代码使用/调试起来很困难, 或者你只需要使用其中的一小段代码, 考虑将其分割为更加简短并易于管理的若干函数.</p>\n</li>\n</ul>\n<h4 id=\"引用参数\"><a href=\"#引用参数\" class=\"headerlink\" title=\"引用参数\"></a>引用参数</h4><ul>\n<li><p>总述</p>\n<p>  所有按引用传递的参数必须加上<code>const</code>.</p>\n</li>\n<li><p>定义</p>\n<p>  在 C 语言中, 如果函数需要修改变量的值, 参数必须为指针, 如<code>int foo(int *pval)</code>. 在 C++ 中, 函数还可以声明为引用参数: <code>int foo(int &amp;val)</code>.</p>\n</li>\n<li><p>优点</p>\n<p>  定义引用参数可以防止出现<code>(*pval)++</code>这样丑陋的代码. 引用参数对于拷贝构造函数这样的应用也是必需的. 同时也更明确地不接受空指针.</p>\n</li>\n<li><p>缺点</p>\n<p>  容易引起误解, 因为引用在语法上是值变量却拥有指针的语义.</p>\n</li>\n<li><p>结论</p>\n<p>  函数参数列表中, 所有引用参数都必须是<code>const</code>:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;in, <span class=\"built_in\">string</span> *out)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>  事实上这在Google Code是一个硬性约定: 输入参数是值参或<code>const</code>引用, 输出参数为指针. 输入参数可以是<code>const</code>指针, 但决不能是非<code>const</code>的引用参数, 除非特殊要求, 比如 swap().</p>\n<p>  有时候, 在输入形参中用<code>const T*</code>指针比<code>const T&amp;</code>更明智. 比如:</p>\n<ul>\n<li>可能会传递空指针.</li>\n<li><p>函数要把指针或对地址的引用赋值给输入形参.</p>\n<p>总而言之, 大多时候输入形参往往是<code>const T&amp;</code>. 若用<code>const T*</code>则说明输入另有处理. 所以若要使用<code>const T*</code>, 则应给出相应的理由, 否则会使得读者感到迷惑.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h4><ul>\n<li><p>总述</p>\n<p>  若要使用函数重载, 则必须能让读者一看调用点就胸有成竹, 而不用花心思猜测调用的重载函数到底是哪一种. 这一规则也适用于构造函数.</p>\n</li>\n<li><p>定义</p>\n<p>  你可以编写一个参数类型为<code>const string&amp;</code>的函数, 然后用另一个参数类型为<code>const char*</code>的函数对其进行重载:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Analyze</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;text)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Analyze</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *text, <span class=\"keyword\">size_t</span> textlen)</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>优点</p>\n<p>  通过重载参数不同的同名函数, 可以令代码更加直观. 模板化代码需要重载, 这同时也能为使用者带来便利.</p>\n</li>\n<li><p>缺点</p>\n<p>  如果函数单靠不同的参数类型而重载, 读者就得十分熟悉 C++ 五花八门的匹配规则, 以了解匹配过程具体到底如何. 另外, 如果派生类只重载了某个函数的部分变体, 继承语义就容易令人困惑.</p>\n</li>\n<li><p>结论</p>\n<p>  如果打算重载一个函数, 可以试试改在函数名里加上参数信息. 例如, 用<code>AppendString()</code>和<code>AppendInt()</code>等, 而不是一口气重载多个<code>Append()</code>. 如果重载函数的目的是为了支持不同数量的同一类型参数, 则优先考虑使用<code>std::vector</code>以便使用者可以用 列表初始化 指定参数.</p>\n</li>\n</ul>\n<h4 id=\"缺省参数\"><a href=\"#缺省参数\" class=\"headerlink\" title=\"缺省参数\"></a>缺省参数</h4><ul>\n<li><p>总述</p>\n<p>  只允许在非虚函数中使用缺省参数, 且必须保证缺省参数的值始终一致. 缺省参数与 函数重载 遵循同样的规则. 一般情况下建议使用函数重载, 尤其是在缺省函数带来的可读性提升不能弥补下文中所提到的缺点的情况下.</p>\n</li>\n<li><p>优点</p>\n<p>  有些函数一般情况下使用默认参数, 但有时需要又使用非默认的参数. 缺省参数为这样的情形提供了便利, 使程序员不需要为了极少的例外情况编写大量的函数. 和函数重载相比, 缺省参数的语法更简洁明了, 减少了大量的样板代码, 也更好地区别了 “必要参数” 和 “可选参数”.</p>\n</li>\n<li><p>缺点</p>\n<p>  缺省参数实际上是函数重载语义的另一种实现方式, 因此所有 不应当使用函数重载的理由 也都适用于缺省参数.</p>\n<p>  虚函数调用的缺省参数取决于目标对象的静态类型, 此时无法保证给定函数的所有重载声明的都是同样的缺省参数.</p>\n<p>  缺省参数是在每个调用点都要进行重新求值的, 这会造成生成的代码迅速膨胀. 作为读者, 一般来说也更希望缺省的参数在声明时就已经被固定了, 而不是在每次调用时都可能会有不同的取值.</p>\n<p>  缺省参数会干扰函数指针, 导致函数签名与调用点的签名不一致. 而函数重载不会导致这样的问题.</p>\n</li>\n<li><p>结论</p>\n<p>  对于虚函数, 不允许使用缺省参数, 因为在虚函数中缺省参数不一定能正常工作. 如果在每个调用点缺省参数的值都有可能不同, 在这种情况下缺省函数也不允许使用. (例如, 不要写像<code>void f(int n = counter++);</code> 这样的代码.)</p>\n<p>  在其他情况下, 如果缺省参数对可读性的提升远远超过了以上提及的缺点的话, 可以使用缺省参数. 如果仍有疑惑, 就使用函数重载.</p>\n</li>\n</ul>\n<h2 id=\"来自Google的奇技\"><a href=\"#来自Google的奇技\" class=\"headerlink\" title=\"来自Google的奇技\"></a>来自Google的奇技</h2><p>Google 用了很多自己实现的技巧 / 工具使 C++ 代码更加健壮, 我们使用 C++ 的方式可能和你在其它地方见到的有所不同.</p>\n<h4 id=\"所有权与智能指针\"><a href=\"#所有权与智能指针\" class=\"headerlink\" title=\"所有权与智能指针\"></a>所有权与智能指针</h4><ul>\n<li><p>总述</p>\n<p>  动态分配出的对象最好有单一且固定的所有主, 并通过智能指针传递所有权.</p>\n</li>\n<li><p>定义</p>\n<p>  所有权是一种登记／管理动态内存和其它资源的技术. 动态分配对象的所有主是一个对象或函数, 后者负责确保当前者无用时就自动销毁前者. 所有权有时可以共享, 此时就由最后一个所有主来负责销毁它. 甚至也可以不用共享, 在代码中直接把所有权传递给其它对象.</p>\n<p>  智能指针是一个通过重载<code>*</code>和<code>-&gt;</code>运算符以表现得如指针一样的类. 智能指针类型被用来自动化所有权的登记工作, 来确保执行销毁义务到位.<code>std::unique_ptr</code>是 C++11 新推出的一种智能指针类型, 用来表示动态分配出的对象的独一无二的所有权; 当<code>std::unique_ptr</code>离开作用域时, 对象就会被销毁.<code>std::unique_ptr</code>不能被复制, 但可以把它移动（move）给新所有主.<code>std::shared_ptr</code>同样表示动态分配对象的所有权, 但可以被共享, 也可以被复制; 对象的所有权由所有复制者共同拥有, 最后一个复制者被销毁时, 对象也会随着被销毁.</p>\n</li>\n<li><p>优点</p>\n<ul>\n<li>如果没有清晰、逻辑条理的所有权安排, 不可能管理好动态分配的内存.</li>\n<li>传递对象的所有权, 开销比复制来得小, 如果可以复制的话.</li>\n<li>传递所有权也比”借用”指针或引用来得简单, 毕竟它大大省去了两个用户一起协调对象生命周期的工作.</li>\n<li>如果所有权逻辑条理, 有文档且不紊乱的话, 可读性会有很大提升.</li>\n<li>可以不用手动完成所有权的登记工作, 大大简化了代码, 也免去了一大波错误之恼.</li>\n<li>对于 const 对象来说, 智能指针简单易用, 也比深度复制高效.</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>不得不用指针（不管是智能的还是原生的）来表示和传递所有权. 指针语义可要比值语义复杂得许多了, 特别是在 API 里：这时不光要操心所有权, 还要顾及别名, 生命周期, 可变性以及其它大大小小的问题.</li>\n<li>其实值语义的开销经常被高估, 所以所有权传递带来的性能提升不一定能弥补可读性和复杂度的损失.</li>\n<li>如果 API 依赖所有权的传递, 就会害得客户端不得不用单一的内存管理模型.</li>\n<li>如果使用智能指针, 那么资源释放发生的位置就会变得不那么明显.</li>\n<li><code>std::unique_ptr</code>的所有权传递原理是 C++11 的 move 语法, 后者毕竟是刚刚推出的, 容易迷惑程序员.</li>\n<li>如果原本的所有权设计已经够完善了, 那么若要引入所有权共享机制, 可能不得不重构整个系统.</li>\n<li>所有权共享机制的登记工作在运行时进行, 开销可能相当大.</li>\n<li>某些极端情况下 (例如循环引用), 所有权被共享的对象永远不会被销毁.</li>\n<li>智能指针并不能够完全代替原生指针.</li>\n</ul>\n</li>\n<li><p>结论</p>\n<p>  如果必须使用动态分配, 那么更倾向于将所有权保持在分配者手中. 如果其他地方要使用这个对象, 最好传递它的拷贝, 或者传递一个不用改变所有权的指针或引用. 倾向于使用<code>std::unique_ptr</code>来明确所有权传递, 例如：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Foo&gt; FooFactory();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FooConsumer</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Foo&gt; ptr)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>  如果没有很好的理由, 则不要使用共享所有权. 这里的理由可以是为了避免开销昂贵的拷贝操作, 但是只有当性能提升非常明显, 并且操作的对象是不可变的（比如说<code>std::shared_ptr&lt;const Foo&gt;</code>）时候, 才能这么做. 如果确实要使用共享所有权, 建议于使用<code>std::shared_ptr</code>.</p>\n<p>  不要使用<code>std::auto_ptr</code>, 使用<code>std::unique_ptr</code>代替它.</p>\n</li>\n</ul>\n<h4 id=\"Cpplint\"><a href=\"#Cpplint\" class=\"headerlink\" title=\"Cpplint\"></a>Cpplint</h4><ul>\n<li><p>总述</p>\n<p>  使用<code>cpplint.py</code>检查风格错误.</p>\n</li>\n<li><p>说明</p>\n<p>  <code>cpplint.py</code>是一个用来分析源文件, 能检查出多种风格错误的工具. 它不并完美, 甚至还会漏报和误报, 但它仍然是一个非常有用的工具. 在行尾加<code>// NOLINT</code>, 或在上一行加<code>// NOLINTNEXTLINE</code>, 可以忽略报错.</p>\n<p>  某些项目会指导你如何使用他们的项目工具运行<code>cpplint.py</code>. 如果你参与的项目没有提供, 你可以单独下载<code>cpplint.py</code>.</p>\n</li>\n</ul>\n<h2 id=\"其他C-特性\"><a href=\"#其他C-特性\" class=\"headerlink\" title=\"其他C++特性\"></a>其他C++特性</h2><h4 id=\"引用参数-1\"><a href=\"#引用参数-1\" class=\"headerlink\" title=\"引用参数\"></a>引用参数</h4><blockquote>\n<p>Tip: 所有按引用传递的参数<strong>必须</strong>加上<code>const</code>.</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  在 C 语言中, 如果函数需要修改变量的值, 参数必须为指针, 如<code>int foo(int *pval)</code>. 在 C++ 中, 函数还可以声明引用参数:<code>int foo(int &amp;val)</code>.</p>\n</li>\n<li><p>优点</p>\n<p>  定义引用参数防止出现<code>(*pval)++</code>这样丑陋的代码. 像拷贝构造函数这样的应用也是必需的. 而且更明确, 不接受<code>NULL</code>指针.</p>\n</li>\n<li><p>缺点</p>\n<p>  容易引起误解, 因为引用在语法上是值变量却拥有指针的语义.</p>\n</li>\n<li><p>结论</p>\n<p>  函数参数列表中, 所有引用参数都必须是<code>const</code>:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;in, <span class=\"built_in\">string</span> *out)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>  事实上这在 Google Code 是一个硬性约定: 输入参数是值参或<code>const</code>引用, 输出参数为指针. 输入参数可以是<code>const</code>指针, 但决不能是非<code>const</code>的引用参数，除非用于交换，比如<code>swap()</code>.</p>\n<p>  有时候，在输入形参中用<code>const T*</code>指针比<code>const T&amp;</code>更明智。比如：</p>\n<pre><code>- 您会传 null 指针。\n- 函数要把指针或对地址的引用赋值给输入形参。\n</code></pre><p>  总之大多时候输入形参往往是<code>const T&amp;</code>. 若用<code>const T*</code>说明输入另有处理。所以若您要用 <code>const T*</code>, 则应有理有据，否则会害得读者误解。</p>\n</li>\n</ul>\n<h4 id=\"右值引用\"><a href=\"#右值引用\" class=\"headerlink\" title=\"右值引用\"></a>右值引用</h4><blockquote>\n<p>Tip: 只在定义移动构造函数与移动赋值操作时使用右值引用. 不要使用<code>std::forward</code>.</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  右值引用是一种只能绑定到临时对象的引用的一种, 其语法与传统的引用语法相似. 例如,<code>void f(string&amp;&amp; s)</code>; 声明了一个其参数是一个字符串的右值引用的函数.</p>\n</li>\n<li><p>优点</p>\n<p>  用于定义移动构造函数 (使用类的右值引用进行构造的函数) 使得移动一个值而非拷贝之成为可能. 例如, 如果<code>v1</code>是一个<code>vector&lt;string&gt;</code>, 则<code>auto v2(std::move(v1))</code>将很可能不再进行大量的数据复制而只是简单地进行指针操作, 在某些情况下这将带来大幅度的性能提升.</p>\n</li>\n<li><p>缺点</p>\n<p>  右值引用是一个相对比较新的特性 (由 C++11 引入), 它尚未被广泛理解. 类似引用崩溃, 移动构造函数的自动推导这样的规则都是很复杂的.</p>\n</li>\n<li><p>结论</p>\n<p>  只在定义移动构造函数与移动赋值操作时使用右值引用, 不要使用<code>std::forward</code>功能函数. 你可能会使用<code>std::move</code>来表示将值从一个对象移动而不是复制到另一个对象.</p>\n</li>\n</ul>\n<h4 id=\"函数重载-1\"><a href=\"#函数重载-1\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h4><blockquote>\n<p>Tip: 若要用好函数重载，最好能让读者一看调用点（call site）就胸有成竹，不用花心思猜测调用的重载函数到底是哪一种。该规则适用于构造函数。</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  你可以编写一个参数类型为<code>const string&amp;</code>的函数, 然后用另一个参数类型为<code>const char*</code>的函数重载它:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Analyze</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;text)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Analyze</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *text, <span class=\"keyword\">size_t</span> textlen)</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>优点</p>\n<p>  通过重载参数不同的同名函数, 令代码更加直观. 模板化代码需要重载, 同时为使用者带来便利.</p>\n</li>\n<li><p>缺点</p>\n<p>  如果函数单单靠不同的参数类型而重载，读者就得十分熟悉 C++ 五花八门的匹配规则，以了解匹配过程具体到底如何。另外，当派生类只重载了某个函数的部分变体，继承语义容易令人困惑。</p>\n</li>\n<li><p>结论</p>\n<p>  如果您打算重载一个函数, 可以试试改在函数名里加上参数信息。例如，用<code>AppendString()</code>和<code>AppendInt()</code>等， 而不是一口气重载多个<code>Append()</code>.</p>\n</li>\n</ul>\n<h4 id=\"缺省参数-1\"><a href=\"#缺省参数-1\" class=\"headerlink\" title=\"缺省参数\"></a>缺省参数</h4><blockquote>\n<p>Tip: 我们不允许使用缺省函数参数，少数极端情况除外。尽可能改用函数重载。</p>\n</blockquote>\n<ul>\n<li><p>优点</p>\n<p>  当您有依赖缺省参数的函数时，您也许偶尔会修改修改这些缺省参数。通过缺省参数，不用再为个别情况而特意定义一大堆函数了。与函数重载相比，缺省参数语法更为清晰，代码少，也很好地区分了「必选参数」和「可选参数」。</p>\n</li>\n<li><p>缺点</p>\n<p>  缺省参数会干扰函数指针，害得后者的函数签名（function signature）往往对不上所实际要调用的函数签名。即在一个现有函数添加缺省参数，就会改变它的类型，那么调用其地址的代码可能会出错，不过函数重载就没这问题了。此外，缺省参数会造成臃肿的代码，毕竟它们在每一个调用点（call site）都有重复。函数重载正好相反，毕竟它们所谓的「缺省参数」只会出现在函数定义里。</p>\n</li>\n<li><p>结论</p>\n<p>  由于缺点并不是很严重，有些人依旧偏爱缺省参数胜于函数重载。所以除了以下情况，我们要求必须显式提供所有参数。</p>\n<ol>\n<li>位于<code>.cc</code>文件里的静态函数或匿名空间函数，毕竟都只能在局部文件里调用该函数了</li>\n<li>可以在构造函数里用缺省参数，毕竟不可能取得它们的地址</li>\n<li>可以用来模拟变长数组</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"变长数组和alloca\"><a href=\"#变长数组和alloca\" class=\"headerlink\" title=\"变长数组和alloca()\"></a>变长数组和alloca()</h4><blockquote>\n<p>Tip: 我们不允许使用变长数组和<code>alloca()</code>.</p>\n</blockquote>\n<ul>\n<li><p>优点</p>\n<p>  变长数组具有浑然天成的语法. 变长数组和<code>alloca()</code>也都很高效.</p>\n</li>\n<li><p>缺点</p>\n<p>  变长数组和<code>alloca()</code>不是标准 C++ 的组成部分. 更重要的是, 它们根据数据大小动态分配堆栈内存, 会引起难以发现的内存越界 bugs: “在我的机器上运行的好好的, 发布后却莫名其妙的挂掉了”.</p>\n</li>\n<li><p>结论</p>\n<p>  改用更安全的分配器（allocator），就像<code>std::vector</code>或<code>std::unique_ptr&lt;T[]&gt;</code>.</p>\n</li>\n</ul>\n<h4 id=\"友元\"><a href=\"#友元\" class=\"headerlink\" title=\"友元\"></a>友元</h4><blockquote>\n<p>Tip: 我们允许合理的使用友元类及友元函数.</p>\n</blockquote>\n<p>通常友元应该定义在同一文件内, 避免代码读者跑到其它文件查找使用该私有成员的类. 经常用到友元的一个地方是将<code>FooBuilder</code>声明为<code>Foo</code>的友元, 以便<code>FooBuilder</code>正确构造 Foo 的内部状态, 而无需将该状态暴露出来. 某些情况下, 将一个单元测试类声明成待测类的友元会很方便.</p>\n<p>友元扩大了 (但没有打破) 类的封装边界. 某些情况下, 相对于将类成员声明为<code>public</code>, 使用友元是更好的选择, 尤其是如果你只允许另一个类访问该类的私有成员时. 当然, 大多数类都只应该通过其提供的公有成员进行互操作.</p>\n<h4 id=\"运行时类型识别\"><a href=\"#运行时类型识别\" class=\"headerlink\" title=\"运行时类型识别\"></a>运行时类型识别</h4><blockquote>\n<p>Tip: 禁止使用 RTTI(Run-Time Type Identification).</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  RTTI 允许程序员在运行时识别 C++ 类对象的类型. 它通过使用<code>typeid</code>或者<code>dynamic_cast</code>完成.</p>\n</li>\n<li><p>优点</p>\n<p>  RTTI 的标准替代 (下面将描述) 需要对有问题的类层级进行修改或重构. 有时这样的修改并不是我们所想要的, 甚至是不可取的, 尤其是在一个已经广泛使用的或者成熟的代码中.</p>\n<p>  RTTI 在某些单元测试中非常有用. 比如进行工厂类测试时, 用来验证一个新建对象是否为期望的动态类型. RTTI 对于管理对象和派生对象的关系也很有用.</p>\n<p>  在考虑多个抽象对象时 RTTI 也很好用. 例如:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> Base::Equal(Base* other) = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> Derived::Equal(Base* other) &#123;</span><br><span class=\"line\">Derived* that = <span class=\"keyword\">dynamic_cast</span>&lt;Derived*&gt;(other);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (that == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>缺点</p>\n<p>  在运行时判断类型通常意味着设计问题. 如果你需要在运行期间确定一个对象的类型, 这通常说明你需要考虑重新设计你的类.</p>\n<p>  随意地使用 RTTI 会使你的代码难以维护. 它使得基于类型的判断树或者 switch 语句散布在代码各处. 如果以后要进行修改, 你就必须检查它们.</p>\n</li>\n<li><p>结论</p>\n<p>  基于类型的判断树是一个很强的暗示, 它说明你的代码已经偏离正轨了. 不要像下面这样:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeid</span>(*data) == <span class=\"keyword\">typeid</span>(D1)) &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeid</span>(*data) == <span class=\"keyword\">typeid</span>(D2)) &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeid</span>(*data) == <span class=\"keyword\">typeid</span>(D3)) &#123;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>  一旦在类层级中加入新的子类, 像这样的代码往往会崩溃. 而且, 一旦某个子类的属性改变了, 你很难找到并修改所有受影响的代码块.</p>\n<p>  不要去手工实现一个类似 RTTI 的方案. 反对 RTTI 的理由同样适用于这些方案, 比如带类型标签的类继承体系. 而且, 这些方案会掩盖你的真实意图.</p>\n</li>\n</ul>\n<h4 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h4><blockquote>\n<p>Tip: 使用 C++ 的类型转换, 如<code>static_cast&lt;&gt;()</code>. 不要使用<code>int y = (int)x</code>或<code>int y = int(x)</code>等转换方式</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  C++ 采用了有别于 C 的类型转换机制, 对转换操作进行归类.</p>\n</li>\n<li><p>优点</p>\n<p>  C 语言的类型转换问题在于模棱两可的操作; 有时是在做强制转换 (如 <code>(int)3.5</code>), 有时是在做类型转换 (如 <code>(int)&quot;hello&quot;</code>). 另外, C++ 的类型转换在查找时更醒目.</p>\n</li>\n<li><p>结论</p>\n<p>  不要使用 C 风格类型转换. 而应该使用 C++ 风格.</p>\n<ul>\n<li>用<code>static_cast</code>替代 C 风格的值转换, 或某个类指针需要明确的向上转换为父类指针时.</li>\n<li>用<code>const_cast</code>去掉<code>const</code>限定符.</li>\n<li>用<code>reinterpret_cast</code>指针类型和整型或其它指针之间进行不安全的相互转换. 仅在你对所做一切了然于心时使用.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"流\"><a href=\"#流\" class=\"headerlink\" title=\"流\"></a>流</h4><blockquote>\n<p>Tip: 只在记录日志时使用流.</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  流用来替代<code>printf()</code>和<code>scanf()</code>.</p>\n</li>\n<li><p>优点</p>\n<p>  有了流, 在打印时不需要关心对象的类型. 不用担心格式化字符串与参数列表不匹配 (虽然在 gcc 中使用<code>printf</code>也不存在这个问题). 流的构造和析构函数会自动打开和关闭对应的文件.</p>\n</li>\n<li><p>缺点</p>\n<p>  流使得<code>pread()</code>等功能函数很难执行. 如果不使用<code>printf</code>风格的格式化字符串, 某些格式化操作 (尤其是常用的格式字符串 %.*s) 用流处理性能是很低的. 流不支持字符串操作符重新排序 (%1s), 而这一点对于软件国际化很有用.</p>\n</li>\n<li><p>结论</p>\n<p>  不要使用流, 除非是日志接口需要. 使用<code>printf</code>之类的代替.</p>\n<p>  使用流还有很多利弊, 但代码一致性胜过一切. 不要在代码中使用流.</p>\n</li>\n</ul>\n<h4 id=\"前置自增和自减减\"><a href=\"#前置自增和自减减\" class=\"headerlink\" title=\"前置自增和自减减\"></a>前置自增和自减减</h4><blockquote>\n<p>Tip: 对于迭代器和其他模板对象使用前缀形式<code>(++i)</code>的自增, 自减运算符.</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  对于变量在自增 (<code>++i</code>或<code>i++</code>) 或自减 (<code>--i</code>或<code>i--</code>) 后表达式的值又没有没用到的情况下, 需要确定到底是使用前置还是后置的自增 (自减).</p>\n</li>\n<li><p>优点</p>\n<p>  不考虑返回值的话, 前置自增 (<code>++i</code>) 通常要比后置自增 (<code>i++</code>) 效率更高. 因为后置自增 (或自减) 需要对表达式的值 i 进行一次拷贝. 如果 i 是迭代器或其他非数值类型, 拷贝的代价是比较大的. 既然两种自增方式实现的功能一样, 为什么不总是使用前置自增呢?</p>\n</li>\n<li><p>缺点</p>\n<p>  在 C 开发中, 当表达式的值未被使用时, 传统的做法是使用后置自增, 特别是在<code>for</code>循环中. 有些人觉得后置自增更加易懂, 因为这很像自然语言, 主语 (<code>i</code>) 在谓语动词 (<code>++</code>) 前.</p>\n</li>\n<li><p>结论</p>\n<p>  对简单数值 (非对象), 两种都无所谓. 对迭代器和模板类型, 使用前置自增 (自减).</p>\n</li>\n</ul>\n<h4 id=\"const用法\"><a href=\"#const用法\" class=\"headerlink\" title=\"const用法\"></a><code>const</code>用法</h4><blockquote>\n<p>Tip: 我们强烈建议你在任何可能的情况下都要使用<code>const</code>. 此外有时改用 C++11 推出的 constexpr 更好。</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  在声明的变量或参数前加上关键字<code>const</code>用于指明变量值不可被篡改 (如 <code>const int foo</code>). 为类中的函数加上<code>const</code>限定符表明该函数不会修改类成员变量的状态 (如<code>class Foo { int Bar(char c) const; };</code>).</p>\n</li>\n<li><p>优点</p>\n<p>  大家更容易理解如何使用变量. 编译器可以更好地进行类型检测, 相应地, 也能生成更好的代码. 人们对编写正确的代码更加自信, 因为他们知道所调用的函数被限定了能或不能修改变量值. 即使是在无锁的多线程编程中, 人们也知道什么样的函数是安全的.</p>\n</li>\n<li><p>缺点</p>\n<p>  <code>const</code>是入侵性的: 如果你向一个函数传入<code>const</code>变量, 函数原型声明中也必须对应<code>const</code>参数 (否则变量需要<code>const_cast</code>类型转换), 在调用库函数时显得尤其麻烦.</p>\n</li>\n<li><p>结论</p>\n<p>  <code>const</code>变量, 数据成员, 函数和参数为编译时类型检测增加了一层保障; 便于尽早发现错误. 因此, 我们强烈建议在任何可能的情况下使用<code>const</code>:</p>\n<ul>\n<li>如果函数不会修改传你入的引用或指针类型参数, 该参数应声明为 <code>const</code>.</li>\n<li>尽可能将函数声明为<code>const</code>. 访问函数应该总是<code>const</code>. 其他不会修改任何数据成员, 未调用非<code>const</code>函数, 不会返回数据成员非 <code>const</code>指针或引用的函数也应该声明成<code>const</code>.</li>\n<li>如果数据成员在对象构造之后不再发生变化, 可将其定义为<code>const</code>.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"constexpr用法\"><a href=\"#constexpr用法\" class=\"headerlink\" title=\"constexpr用法\"></a><code>constexpr</code>用法</h4><blockquote>\n<p>Tip: 在 C++11 里，用 constexpr 来定义真正的常量，或实现常量初始化。</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  变量可以被声明成<code>constexpr</code>以表示它是真正意义上的常量，即在编译时和运行时都不变。函数或构造函数也可以被声明成<code>constexpr</code>, 以用来定义 <code>constexpr</code>变量。</p>\n</li>\n<li><p>优点</p>\n<p>  如今 constexpr 就可以定义浮点式的真・常量，不用再依赖字面值了；也可以定义用户自定义类型上的常量；甚至也可以定义函数调用所返回的常量。</p>\n</li>\n<li><p>缺点</p>\n<p>  若过早把变量优化成 constexpr 变量，将来又要把它改为常规变量时，挺麻烦的；当前对constexpr函数和构造函数中允许的限制可能会导致这些定义中解决的方法模糊。</p>\n</li>\n<li><p>结论</p>\n<p>  靠 constexpr 特性，方才实现了 C++ 在接口上打造真正常量机制的可能。好好用 constexpr 来定义真・常量以及支持常量的函数。避免复杂的函数定义，以使其能够与constexpr一起使用。 千万别痴心妄想地想靠 constexpr 来强制代码「内联」。</p>\n</li>\n</ul>\n<h4 id=\"预处理宏\"><a href=\"#预处理宏\" class=\"headerlink\" title=\"预处理宏\"></a>预处理宏</h4><blockquote>\n<p>Tip: 使用宏时要非常谨慎, 尽量以内联函数, 枚举和常量代替之.</p>\n</blockquote>\n<p>宏意味着你和编译器看到的代码是不同的. 这可能会导致异常行为, 尤其因为宏具有全局作用域.</p>\n<p>值得庆幸的是, C++ 中, 宏不像在 C 中那么必不可少. 以往用宏展开性能关键的代码, 现在可以用内联函数替代. 用宏表示常量可被<code>const</code>变量代替. 用宏 “缩写” 长变量名可被引用代替. 用宏进行条件编译… 这个, 千万别这么做, 会令测试更加痛苦 (<code>#define</code>防止头文件重包含当然是个特例).</p>\n<p>宏可以做一些其他技术无法实现的事情, 在一些代码库 (尤其是底层库中) 可以看到宏的某些特性 (如用<code>#</code>字符串化, 用<code>##</code>连接等等). 但在使用前, 仔细考虑一下能不能不使用宏达到同样的目的.</p>\n<p>下面给出的用法模式可以避免使用宏带来的问题; 如果你要宏, 尽可能遵守:</p>\n<ul>\n<li>不要在<code>.h</code>文件中定义宏.</li>\n<li>在马上要使用时才进行<code>#define</code>, 使用后要立即 <code>#undef</code>.</li>\n<li>不要只是对已经存在的宏使用#undef，选择一个不会冲突的名称；</li>\n<li>不要试图使用展开后会导致 C++ 构造不稳定的宏, 不然也至少要附上文档说明其行为.</li>\n<li>不要用<code>##</code>处理函数，类和变量的名字。</li>\n</ul>\n<h4 id=\"nullptr和NULL\"><a href=\"#nullptr和NULL\" class=\"headerlink\" title=\"nullptr和NULL\"></a><code>nullptr</code>和<code>NULL</code></h4><blockquote>\n<p>Tip: 对于指针 (地址值), 到底是用<code>0</code>,<code>NULL</code>还是<code>nullptr</code>. C++11 项目用<code>nullptr</code>; C++03 项目则用<code>NULL</code>, 毕竟它看起来像指针。实际上，一些 C++ 编译器对<code>NULL</code>的定义比较特殊，可以输出有用的警告，特别是 <code>sizeof(NULL)</code>就和<code>sizeof(0)</code>不一样。</p>\n</blockquote>\n<h4 id=\"sizeof\"><a href=\"#sizeof\" class=\"headerlink\" title=\"sizeof\"></a><code>sizeof</code></h4><blockquote>\n<p>Tip: 尽可能用<code>sizeof(varname)</code>代替<code>sizeof(type)</code>.<br>使用<code>sizeof(varname)</code>是因为当代码中变量类型改变时会自动更新. 您或许会用<code>sizeof(type)</code>处理不涉及任何变量的代码，比如处理来自外部或内部的数据格式，这时用变量就不合适了。</p>\n</blockquote>\n<h4 id=\"auto\"><a href=\"#auto\" class=\"headerlink\" title=\"auto\"></a><code>auto</code></h4><blockquote>\n<p>Tip: 用<code>auto</code>绕过烦琐的类型名，只要可读性好就继续用，别用在局部变量之外的地方。</p>\n</blockquote>\n<ul>\n<li>定义</li>\n</ul>\n<p>C++11 中，若变量被声明成<code>auto</code>, 那它的类型就会被自动匹配成初始化表达式的类型。您可以用<code>auto</code>来复制初始化或绑定引用。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; v;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">auto</span> s1 = v[<span class=\"number\">0</span>];  <span class=\"comment\">// 创建一份 v[0] 的拷贝。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">auto</span>&amp; s2 = v[<span class=\"number\">0</span>];  <span class=\"comment\">// s2 是 v[0] 的一个引用。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点</li>\n</ul>\n<p>C++ 类型名有时又长又臭，特别是涉及模板或命名空间的时候。就像：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sparse_hash_map&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;::iterator iter = m.find(val);</span><br></pre></td></tr></table></figure>\n<p>返回类型好难读，代码目的也不够一目了然。重构其：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> iter = m.find(val);</span><br></pre></td></tr></table></figure>\n<p>好多了。</p>\n<p>没有<code>auto</code>的话，我们不得不在同一个表达式里写同一个类型名两次，无谓的重复，就像：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diagnostics::ErrorStatus* status = <span class=\"keyword\">new</span> diagnostics::ErrorStatus(<span class=\"string\">\"xyz\"</span>);</span><br></pre></td></tr></table></figure>\n<p>有了 auto, 可以更方便地用中间变量，显式编写它们的类型轻松点。</p>\n<ul>\n<li>缺点</li>\n</ul>\n<p>类型够明显时，特别是初始化变量时，代码才会够一目了然。但以下就不一样了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> i = x.Lookup(key);</span><br></pre></td></tr></table></figure>\n<p>看不出其类型是啥，x 的类型声明恐怕远在几百行之外了。</p>\n<p>程序员必须会区分<code>auto</code>和<code>const auto&amp;</code>的不同之处，否则会复制错东西。</p>\n<p>auto 和 C++11 列表初始化的合体令人摸不着头脑：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">x</span><span class=\"params\">(<span class=\"number\">3</span>)</span></span>;  <span class=\"comment\">// 圆括号。</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> y&#123;<span class=\"number\">3</span>&#125;;  <span class=\"comment\">// 大括号。</span></span><br></pre></td></tr></table></figure>\n<p>它们不是同一回事——<code>x</code>是<code>int</code>,<code>y</code>则是<code>std::initializer_list&lt;int&gt;</code>. 其它一般不可见的代理类型也有大同小异的陷阱。</p>\n<p>如果在接口里用<code>auto</code>, 比如声明头文件里的一个常量，那么只要仅仅因为程序员一时修改其值而导致类型变化的话——API 要翻天覆地了。</p>\n<ul>\n<li>结论</li>\n</ul>\n<p><code>auto</code>只能用在局部变量里用。别用在文件作用域变量，命名空间作用域变量和类数据成员里。永远别列表初始化<code>auto</code>变量。</p>\n<p><code>auto</code>还可以和 C++11 特性「尾置返回类型（trailing return type）」一起用，不过后者只能用在<code>lambda</code>表达式里。</p>\n<h4 id=\"列表初始化\"><a href=\"#列表初始化\" class=\"headerlink\" title=\"列表初始化\"></a>列表初始化</h4><p>早在 C++03 里，聚合类型（aggregate types）就已经可以被列表初始化了，比如数组和不自带构造函数的结构体：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> &#123;</span> <span class=\"keyword\">int</span> x; <span class=\"keyword\">int</span> y; &#125;;</span><br><span class=\"line\">Point p = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>C++11 中，该特性得到进一步的推广，任何对象类型都可以被列表初始化。示范如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Vector 接收了一个初始化列表。</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; v&#123;<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不考虑细节上的微妙差别，大致上相同。</span></span><br><span class=\"line\"><span class=\"comment\">// 您可以任选其一。</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; v = &#123;<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以配合 new 一起用。</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&#123;<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化列表也可以用在返回类型上的隐式转换。</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; test_function() &#123; <span class=\"keyword\">return</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化列表可迭代。</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : &#123;<span class=\"number\">-1</span>, <span class=\"number\">-2</span>, <span class=\"number\">-3</span>&#125;) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在函数调用里用列表初始化。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestFunction2</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v)</span> </span>&#123;&#125;</span><br><span class=\"line\">TestFunction2(&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>用户自定义类型也可以定义接收<code>std::initializer_list&lt;T&gt;</code>的构造函数和赋值运算符，以自动列表初始化：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyType</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"comment\">// std::initializer_list 专门接收 init 列表。</span></span><br><span class=\"line\">  <span class=\"comment\">// 得以值传递。</span></span><br><span class=\"line\">  MyType(<span class=\"built_in\">std</span>::<span class=\"built_in\">initializer_list</span>&lt;<span class=\"keyword\">int</span>&gt; init_list) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : init_list) append(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  MyType&amp; <span class=\"keyword\">operator</span>=(<span class=\"built_in\">std</span>::<span class=\"built_in\">initializer_list</span>&lt;<span class=\"keyword\">int</span>&gt; init_list) &#123;</span><br><span class=\"line\">    clear();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : init_list) append(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MyType m&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>最后，列表初始化也适用于常规数据类型的构造，哪怕没有接收<code>std::initializer_list&lt;T&gt;</code>的构造函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> d&#123;<span class=\"number\">1.23</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// MyOtherType 没有 std::initializer_list 构造函数，</span></span><br><span class=\"line\"> <span class=\"comment\">// 直接上接收常规类型的构造函数。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyOtherType</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">MyOtherType</span><span class=\"params\">(<span class=\"built_in\">string</span>)</span></span>;</span><br><span class=\"line\">  MyOtherType(<span class=\"keyword\">int</span>, <span class=\"built_in\">string</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MyOtherType m = &#123;<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 不过如果构造函数是显式的（explict），您就不能用 `= &#123;&#125;` 了。</span></span><br><span class=\"line\">MyOtherType m&#123;<span class=\"string\">\"b\"</span>&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h4><blockquote>\n<p>Tip: 适当使用<code>lambda</code>表达式。别用默认<code>lambda</code>捕获，所有捕获都要显式写出来。</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  Lambda 表达式是创建匿名函数对象的一种简易途径，常用于把函数当参数传，例如：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::sort(v.begin(), v.end(), [](<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Weight(x) &lt; Weight(y);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>  C++11 首次提出 Lambdas, 还提供了一系列处理函数对象的工具，比如多态包装器（polymorphic wrapper）<code>std::function</code>.</p>\n</li>\n<li><p>优点</p>\n<ul>\n<li>传函数对象给 STL 算法，Lambdas 最简易，可读性也好。</li>\n<li>Lambdas,<code>std::functions</code>和<code>std::bind</code>可以搭配成通用回调机制（general purpose callback mechanism）；写接收有界函数为参数的函数也很容易了。</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>Lambdas 的变量捕获略旁门左道，可能会造成悬空指针。</li>\n<li>Lambdas 可能会失控；层层嵌套的匿名函数难以阅读。</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li>按 format 小用 lambda 表达式怡情。</li>\n<li><strong>禁用默认捕获([=] [&amp;])</strong>，捕获都要显式写出来。打比方，比起<code>[=](int x) {return x + n;}</code>, 您该写成<code>[n](int x) {return x + n;}</code>才对，这样读者也好一眼看出<code>n</code>是被捕获的值。</li>\n<li>匿名函数始终要简短，如果函数体超过了五行，那么还不如起名，或改用函数。</li>\n<li>如果可读性更好，就显式写出 lambd 的尾置返回类型，就像auto.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"命名约定\"><a href=\"#命名约定\" class=\"headerlink\" title=\"命名约定\"></a>命名约定</h2><p>最重要的一致性规则是命名管理. 命名的风格能让我们在不需要去查找类型声明的条件下快速地了解某个名字代表的含义: 类型, 变量, 函数, 常量, 宏, 等等, 甚至. 我们大脑中的模式匹配引擎非常依赖这些命名规则.</p>\n<p>命名规则具有一定随意性, 但相比按个人喜好命名, 一致性更重要, 所以无论你认为它们是否重要, 规则总归是规则.</p>\n<h4 id=\"通用命名规则\"><a href=\"#通用命名规则\" class=\"headerlink\" title=\"通用命名规则\"></a>通用命名规则</h4><ul>\n<li><p>总述</p>\n<p>  函数命名, 变量命名, 文件命名要有描述性; 少用缩写</p>\n</li>\n<li><p>说明</p>\n<p>  尽可能使用描述性的命名, 别心疼空间, 毕竟相比之下让代码易于新读者理解更重要. 不要用只有项目开发者能理解的缩写, 也不要通过砍掉几个字母来缩写单词.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> price_count_reader;    <span class=\"comment\">// 无缩写</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num_errors;            <span class=\"comment\">// \"num\" 是一个常见的写法</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num_dns_connections;   <span class=\"comment\">// 人人都知道 \"DNS\" 是什么</span></span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n;                     <span class=\"comment\">// 毫无意义.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> nerr;                  <span class=\"comment\">// 含糊不清的缩写.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n_comp_conns;          <span class=\"comment\">// 含糊不清的缩写.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> wgc_connections;       <span class=\"comment\">// 只有贵团队知道是什么意思.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> pc_reader;             <span class=\"comment\">// \"pc\" 有太多可能的解释了.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> cstmr_id;              <span class=\"comment\">// 删减了若干字母.</span></span><br></pre></td></tr></table></figure>\n<p>  注意, 一些特定的广为人知的缩写是允许的, 例如用 i 表示迭代变量和用 T 表示模板参数.</p>\n</li>\n</ul>\n<h4 id=\"文件命名\"><a href=\"#文件命名\" class=\"headerlink\" title=\"文件命名\"></a>文件命名</h4><ul>\n<li><p>总述</p>\n<p>  文件名要全部小写, 可以包含下划线<code>_</code>或连字符<code>-</code>, 依照项目的约定. 如果没有约定, 那么<code>_</code>更好.</p>\n</li>\n<li><p>说明</p>\n<p>  可接受的文件命名示例:</p>\n<ul>\n<li><code>my_useful_class.cc</code></li>\n<li><code>my-useful-class.cc</code></li>\n<li><code>myusefulclass.cc</code></li>\n<li><p><code>myusefulclass_test.cc</code> // <code>_unittest</code> 和 <code>_regtest</code> 已弃用</p>\n<p>C++ 文件要以<code>.cc</code>结尾, 头文件以<code>.h</code>结尾. 专门插入文本的文件则以<code>.inc</code>结尾</p>\n<p>不要使用已经存在于<code>/usr/include</code>下的文件名, 如<code>db.h</code>.</p>\n<p>通常应尽量让文件名更加明确.<code>http_server_logs.h</code>就比<code>logs.h</code>要好. 定义类时文件名一般成对出现, 如<code>foo_bar.h</code>和<code>foo_bar.cc</code>, 对应于类<code>FooBar</code>.</p>\n<p>内联函数必须放在<code>.h</code>文件中. 如果内联函数比较短, 就直接放在<code>.h</code>中.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"类型命名\"><a href=\"#类型命名\" class=\"headerlink\" title=\"类型命名\"></a>类型命名</h4><ul>\n<li><p>总述</p>\n<p>  类型名称的每个单词首字母均大写, 不包含下划线: <code>MyExcitingClass</code>, <code>MyExcitingEnum</code>.</p>\n</li>\n<li><p>说明</p>\n<p>  所有类型命名 —— 类, 结构体, 类型定义 (typedef), 枚举, 类型模板参数 —— 均使用相同约定, 即以大写字母开始, 每个单词首字母均大写, 不包含下划线. 例如:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类和结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UrlTable</span> &#123;</span> ...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UrlTableTester</span> &#123;</span> ...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">UrlTableProperties</span> &#123;</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类型定义</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> hash_map&lt;UrlTableProperties *, <span class=\"built_in\">string</span>&gt; PropertiesMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// using 别名</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> PropertiesMap = hash_map&lt;UrlTableProperties *, <span class=\"built_in\">string</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 枚举</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> UrlTableErrors &#123; ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"变量命名\"><a href=\"#变量命名\" class=\"headerlink\" title=\"变量命名\"></a>变量命名</h4><ul>\n<li><p>总述</p>\n<p>  变量 (包括函数参数) 和数据成员名一律小写, 单词之间用下划线连接. 类的成员变量<em>以下划线结尾</em>, 但结构体的就不用, 如: <code>a_local_variable</code>, <code>a_struct_data_member</code>, <code>a_class_data_member_</code>.</p>\n</li>\n<li><p>说明</p>\n<ul>\n<li><p>普通变量命名</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> table_name;  <span class=\"comment\">// 好 - 用下划线.</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> tablename;   <span class=\"comment\">// 好 - 全小写.</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> tableName;  <span class=\"comment\">// 差 - 混合大小写</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类数据成员</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TableInfo</span> &#123;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"built_in\">string</span> table_name_;  <span class=\"comment\">// 好 - 后加下划线.</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> tablename_;   <span class=\"comment\">// 好.</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Pool&lt;TableInfo&gt;* pool_;  <span class=\"comment\">// 好.</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- 结构体变量\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">UrlTableProperties</span> &#123;</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> num_entries;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> Pool&lt;UrlTableProperties&gt;* pool;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</code></pre><h4 id=\"常量命名\"><a href=\"#常量命名\" class=\"headerlink\" title=\"常量命名\"></a>常量命名</h4><ul>\n<li><p>总述</p>\n<p>  声明为<code>constexpr</code>或<code>const</code>的变量, 或在程序运行期间其值始终保持不变的,命名时以 “k” 开头, 大小写混合. 例如:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> kDaysInAWeek = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>说明</p>\n</li>\n</ul>\n<p>所有具有静态存储类型的变量 (例如静态变量或全局变量) 都应当以此方式命名. 对于其他存储类型的变量, 如自动变量等, 这条规则是可选的. 如果不采用这条规则, 就按照一般的变量命名规则.</p>\n<h4 id=\"函数命名\"><a href=\"#函数命名\" class=\"headerlink\" title=\"函数命名\"></a>函数命名</h4><ul>\n<li><p>总述</p>\n<p>  常规函数使用大小写混合, 取值和设值函数则要求与变量名匹配: <code>MyExcitingFunction()</code>, <code>MyExcitingMethod()</code>, <code>my_exciting_member_variable()</code>, <code>set_my_exciting_member_variable()</code>.</p>\n</li>\n<li><p>说明</p>\n<p>  一般来说, 函数名的每个单词首字母大写 (即 “驼峰变量名” 或 “帕斯卡变量名”), 没有下划线. 对于首字母缩写的单词, 更倾向于将它们视作一个单词进行首字母大写 (例如, 写作<code>StartRpc()</code>而非<code>StartRPC()</code>).</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AddTableEntry()</span><br><span class=\"line\">DeleteUrl()</span><br><span class=\"line\">OpenFileOrDie()</span><br></pre></td></tr></table></figure>\n<p>  取值和设值函数的命名与变量一致. 一般来说它们的名称与实际的成员变量对应, 但并不强制要求. 例如<code>int count()</code>与<code>void set_count(int count)</code>.</p>\n</li>\n</ul>\n<h4 id=\"命名空间命名\"><a href=\"#命名空间命名\" class=\"headerlink\" title=\"命名空间命名\"></a>命名空间命名</h4><ul>\n<li><p>总述</p>\n<p>  命名空间以小写字母命名. 最高级命名空间的名字取决于项目名称. 要注意避免嵌套命名空间的名字之间和常见的顶级命名空间的名字之间发生冲突.</p>\n<p>  顶级命名空间的名称应当是项目名或者是该命名空间中的代码所属的团队的名字. 命名空间中的代码, 应当存放于和命名空间的名字匹配的文件夹或其子文件夹中.</p>\n<p>  要避免嵌套的命名空间与常见的顶级命名空间发生名称冲突. 由于名称查找规则的存在, 命名空间之间的冲突完全有可能导致编译失败. 尤其是, 不要创建嵌套的<code>std</code>命名空间. 建议使用更独特的项目标识符 (<code>websearch::index</code>,<code>websearch::index_util</code>) 而非常见的极易发生冲突的名称 (比如<code>websearch::util</code>).</p>\n<p>  对于<code>internal</code>命名空间, 要当心加入到同一<code>internal</code>命名空间的代码之间发生冲突 (由于内部维护人员通常来自同一团队, 因此常有可能导致冲突). 在这种情况下, 请使用文件名以使得内部名称独一无二 (例如对于<code>frobber.h</code>, 使用<code>websearch::index::frobber_internal</code>).</p>\n</li>\n</ul>\n<h4 id=\"枚举命名\"><a href=\"#枚举命名\" class=\"headerlink\" title=\"枚举命名\"></a>枚举命名</h4><ul>\n<li><p>总述</p>\n<p>  枚举的命名应当和 常量 或 宏 一致: <code>kEnumName</code>或是<code>ENUM_NAME</code>.</p>\n</li>\n<li><p>说明</p>\n<p>  单独的枚举值应该优先采用 常量 的命名方式. 但 宏 方式的命名也可以接受. 枚举名<code>UrlTableErrors</code>(以及 <code>AlternateUrlTableErrors</code>) 是类型, 所以要用大小写混合的方式.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> UrlTableErrors &#123;</span><br><span class=\"line\">    kOK = <span class=\"number\">0</span>,</span><br><span class=\"line\">    kErrorOutOfMemory,</span><br><span class=\"line\">    kErrorMalformedInput,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">enum</span> AlternateUrlTableErrors &#123;</span><br><span class=\"line\">    OK = <span class=\"number\">0</span>,</span><br><span class=\"line\">    OUT_OF_MEMORY = <span class=\"number\">1</span>,</span><br><span class=\"line\">    MALFORMED_INPUT = <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"宏命名\"><a href=\"#宏命名\" class=\"headerlink\" title=\"宏命名\"></a>宏命名</h4><p>你并不打算 使用宏, 对吧? 如果你一定要用, 像这样命名: <code>MY_MACRO_THAT_SCARES_SMALL_CHILDREN</code>.</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>注释虽然写起来很痛苦, 但对保证代码可读性至关重要. 下面的规则描述了如何注释以及在哪儿注释. 当然也要记住: 注释固然很重要, 但最好的代码应当本身就是文档. 有意义的类型名和变量名, 要远胜过要用注释解释的含糊不清的名字.</p>\n<h4 id=\"注释风格\"><a href=\"#注释风格\" class=\"headerlink\" title=\"注释风格\"></a>注释风格</h4><ul>\n<li><p>总述</p>\n<p>  使用<code>//</code>或<code>/* */</code>, 统一就好.</p>\n</li>\n<li><p>说明</p>\n<p>  <code>//</code>或<code>/* */</code>都可以; 但<code>//</code>更 常用. 要在如何注释及注释风格上确保统一.</p>\n</li>\n</ul>\n<h4 id=\"文件注释\"><a href=\"#文件注释\" class=\"headerlink\" title=\"文件注释\"></a>文件注释</h4><ul>\n<li><p>总述</p>\n<p>  在每一个文件开头加入版权公告.</p>\n<p>  文件注释描述了该文件的内容. 如果一个文件只声明, 或实现, 或测试了一个对象, 并且这个对象已经在它的声明处进行了详细的注释, 那么就没必要再加上文件注释. 除此之外的其他文件都需要文件注释.</p>\n</li>\n<li><p>说明</p>\n<ul>\n<li><p>法律公告和作者信息</p>\n<p>  每个文件都应该包含许可证引用. 为项目选择合适的许可证版本.(比如, Apache 2.0, BSD, LGPL, GPL)</p>\n<p>  如果你对原始作者的文件做了重大修改, 请考虑删除原作者信息.</p>\n</li>\n<li><p>文件内容</p>\n<p>  如果一个<code>.h</code>文件声明了多个概念, 则文件注释应当对文件的内容做一个大致的说明, 同时说明各概念之间的联系. 一个一到两行的文件注释就足够了, 对于每个概念的详细文档应当放在各个概念中, 而不是文件注释中.</p>\n<p>  不要在<code>.h</code>和<code>.cc</code>之间复制注释, 这样的注释偏离了注释的实际意义.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"类注释\"><a href=\"#类注释\" class=\"headerlink\" title=\"类注释\"></a>类注释</h4><ul>\n<li><p>总述</p>\n<p>  每个类的定义都要附带一份注释, 描述类的功能和用法, 除非它的功能相当明显.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Iterates over the contents of a GargantuanTable.</span></span><br><span class=\"line\"><span class=\"comment\">// Example:</span></span><br><span class=\"line\"><span class=\"comment\">//    GargantuanTableIterator* iter = table-&gt;NewIterator();</span></span><br><span class=\"line\"><span class=\"comment\">//    for (iter-&gt;Seek(\"foo\"); !iter-&gt;done(); iter-&gt;Next()) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//      process(iter-&gt;key(), iter-&gt;value());</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    delete iter;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GargantuanTableIterator</span> &#123;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>说明</p>\n<p>  类注释应当为读者理解如何使用与何时使用类提供足够的信息, 同时应当提醒读者在正确使用此类时应当考虑的因素. 如果类有任何同步前提, 请用文档说明. 如果该类的实例可被多线程访问, 要特别注意文档说明多线程环境下相关的规则和常量使用.</p>\n<p>  如果你想用一小段代码演示这个类的基本用法或通常用法, 放在类注释里也非常合适.</p>\n<p>  如果类的声明和定义分开了(例如分别放在了<code>.h</code>和<code>.cc</code>文件中), 此时, 描述类用法的注释应当和接口定义放在一起, 描述类的操作和实现的注释应当和实现放在一起.</p>\n</li>\n</ul>\n<h4 id=\"函数注释\"><a href=\"#函数注释\" class=\"headerlink\" title=\"函数注释\"></a>函数注释</h4><ul>\n<li>总述</li>\n</ul>\n<p>函数声明处的注释描述函数功能; 定义处的注释描述函数实现.</p>\n<ul>\n<li><p>说明</p>\n<ul>\n<li><p>函数说明</p>\n<p>  基本上每个函数声明处前都应当加上注释, 描述函数的功能和用途. 只有在函数的功能简单而明显时才能省略这些注释(例如, 简单的取值和设值函数). 注释使用叙述式 (“Opens the file”) 而非指令式 (“Open the file”); 注释只是为了描述函数, 而不是命令函数做什么. 通常, 注释不会描述函数如何工作. 那是函数定义部分的事情.</p>\n<p>  函数声明处注释的内容:</p>\n<ul>\n<li>函数的输入输出.</li>\n<li>对类成员函数而言: 函数调用期间对象是否需要保持引用参数, 是否会释放这些参数.</li>\n<li>函数是否分配了必须由调用者释放的空间.</li>\n<li>参数是否可以为空指针.</li>\n<li>是否存在函数使用上的性能隐患.</li>\n<li><p>如果函数是可重入的, 其同步前提是什么?</p>\n<p>举例如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Returns an iterator for this table.  It is the client's</span></span><br><span class=\"line\"><span class=\"comment\">// responsibility to delete the iterator when it is done with it,</span></span><br><span class=\"line\"><span class=\"comment\">// and it must not use the iterator once the GargantuanTable object</span></span><br><span class=\"line\"><span class=\"comment\">// on which the iterator was created has been deleted.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The iterator is initially positioned at the beginning of the table.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// This method is equivalent to:</span></span><br><span class=\"line\"><span class=\"comment\">//    Iterator* iter = table-&gt;NewIterator();</span></span><br><span class=\"line\"><span class=\"comment\">//    iter-&gt;Seek(\"\");</span></span><br><span class=\"line\"><span class=\"comment\">//    return iter;</span></span><br><span class=\"line\"><span class=\"comment\">// If you are going to immediately seek to another place in the</span></span><br><span class=\"line\"><span class=\"comment\">// returned iterator, it will be faster to use NewIterator()</span></span><br><span class=\"line\"><span class=\"comment\">// and avoid the extra seek.</span></span><br><span class=\"line\"><span class=\"function\">Iterator* <span class=\"title\">GetIterator</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure>\n<p>但也要避免罗罗嗦嗦, 或者对显而易见的内容进行说明. 下面的注释就没有必要加上 “否则返回 false”, 因为已经暗含其中了:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Returns true if the table cannot hold any more entries.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IsTableFull</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>注释函数重载时, 注释的重点应该是函数中被重载的部分, 而不是简单的重复被重载的函数的注释. 多数情况下, 函数重载不需要额外的文档, 因此也没有必要加上注释.</p>\n<p>注释构造/析构函数时, 切记读代码的人知道构造/析构函数的功能, 所以 “销毁这一对象” 这样的注释是没有意义的. 你应当注明的是注明构造函数对参数做了什么 (例如, 是否取得指针所有权) 以及析构函数清理了什么. 如果都是些无关紧要的内容, 直接省掉注释. 析构函数前没有注释是很正常的.</p>\n</li>\n</ul>\n</li>\n<li><p>函数定义</p>\n<p>  如果函数的实现过程中用到了很巧妙的方式, 那么在函数定义处应当加上解释性的注释. 例如, 你所使用的编程技巧, 实现的大致步骤, 或解释如此实现的理由. 举个例子, 你可以说明为什么函数的前半部分要加锁而后半部分不需要.</p>\n<p>  不要 从<code>.h</code>文件或其他地方的函数声明处直接复制注释. 简要重述函数功能是可以的, 但注释重点要放在如何实现上.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"变量注释\"><a href=\"#变量注释\" class=\"headerlink\" title=\"变量注释\"></a>变量注释</h4><ul>\n<li>总述</li>\n</ul>\n<p>通常变量名本身足以很好说明变量用途. 某些情况下, 也需要额外的注释说明.</p>\n<ul>\n<li><p>说明</p>\n<ul>\n<li><p>类数据成员</p>\n<p>  每个类数据成员 (也叫实例变量或成员变量) 都应该用注释说明用途. 如果有非变量的参数(例如特殊值, 数据成员之间的关系, 生命周期等)不能够用类型与变量名明确表达, 则应当加上注释. 然而, 如果变量类型与变量名已经足以描述一个变量, 那么就不再需要加上注释.</p>\n<p>  特别地, 如果变量可以接受<code>NULL</code>或<code>-1</code>等警戒值, 须加以说明. 比如:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"><span class=\"comment\">// Used to bounds-check table accesses. -1 means</span></span><br><span class=\"line\"><span class=\"comment\">// that we don't yet know how many entries the table has.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num_total_entries_;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>全局变量</p>\n<p>  和数据成员一样, 所有全局变量也要注释说明含义及用途, 以及作为全局变量的原因. 比如:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The total number of tests cases that we run through in this regression test.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> kNumTestCases = <span class=\"number\">6</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"实现注释\"><a href=\"#实现注释\" class=\"headerlink\" title=\"实现注释\"></a>实现注释</h4><ul>\n<li>总述</li>\n</ul>\n<p>对于代码中巧妙的, 晦涩的, 有趣的, 重要的地方加以注释.</p>\n<ul>\n<li><p>说明</p>\n<ul>\n<li><p>代码前注释</p>\n<p>  巧妙或复杂的代码段前要加注释. 比如:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Divide result by two, taking into account that x</span></span><br><span class=\"line\"><span class=\"comment\">// contains the carry from the add.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result-&gt;size(); i++) &#123;</span><br><span class=\"line\">x = (x &lt;&lt; <span class=\"number\">8</span>) + (*result)[i];</span><br><span class=\"line\">(*result)[i] = x &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">x &amp;= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>行注释</p>\n<p>  比较隐晦的地方要在行尾加入注释. 在行尾空两格进行注释. 比如:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// If we have enough memory, mmap the data portion too.</span></span><br><span class=\"line\">mmap_budget = max&lt;int64&gt;(<span class=\"number\">0</span>, mmap_budget - index_-&gt;length());</span><br><span class=\"line\"><span class=\"keyword\">if</span> (mmap_budget &gt;= data_size_ &amp;&amp; !MmapData(mmap_chunk_bytes, mlock))</span><br><span class=\"line\"><span class=\"keyword\">return</span>;  <span class=\"comment\">// Error already logged.</span></span><br></pre></td></tr></table></figure>\n<p>  注意, 这里用了两段注释分别描述这段代码的作用, 和提示函数返回时错误已经被记入日志.</p>\n</li>\n<li><p>函数参数注释</p>\n<p>  如果函数参数的意义不明显, 考虑用下面的方式进行弥补:</p>\n<ul>\n<li>如果参数是一个字面常量, 并且这一常量在多处函数调用中被使用, 用以推断它们一致, 你应当用一个常量名让这一约定变得更明显, 并且保证这一约定不会被打破.</li>\n<li>考虑更改函数的签名, 让某个<code>bool</code>类型的参数变为<code>enum</code>类型, 这样可以让这个参数的值表达其意义.</li>\n<li>如果某个函数有多个配置选项, 你可以考虑定义一个类或结构体以保存所有的选项, 并传入类或结构体的实例. 这样的方法有许多优点, 例如这样的选项可以在调用处用变量名引用, 这样就能清晰地表明其意义. 同时也减少了函数参数的数量, 使得函数调用更易读也易写. 除此之外, 以这样的方式, 如果你使用其他的选项, 就无需对调用点进行更改.</li>\n<li>用具名变量代替大段而复杂的嵌套表达式.</li>\n<li>万不得已时, 才考虑在调用点用注释阐明参数的意义.</li>\n</ul>\n</li>\n<li><p>不允许的行为</p>\n<p>  不要描述显而易见的现象, <em>永远不要</em>用自然语言翻译代码作为注释, 除非即使对深入理解 C++ 的读者来说代码的行为都是不明显的. 要假设读代码的人 C++ 水平比你高, 即便他/她可能不知道你的用意:</p>\n<p>  你所提供的注释应当解释代码<em>为什么</em>要这么做和代码的目的, 或者最好是让代码自文档化.</p>\n<p>  比较这样的注释:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Find the element in the vector.  &lt;-- 差: 这太明显了!</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> iter = <span class=\"built_in\">std</span>::find(v.begin(), v.end(), element);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (iter != v.end()) &#123;</span><br><span class=\"line\">    Process(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  和这样的注释:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Process \"element\" unless it was already processed.</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> iter = <span class=\"built_in\">std</span>::find(v.begin(), v.end(), element);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (iter != v.end()) &#123;</span><br><span class=\"line\">    Process(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  自文档化的代码根本就不需要注释. 上面例子中的注释对下面的代码来说就是毫无必要的:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!IsAlreadyProcessed(element)) &#123;</span><br><span class=\"line\">    Process(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"TODO注释\"><a href=\"#TODO注释\" class=\"headerlink\" title=\"TODO注释\"></a>TODO注释</h4><ul>\n<li><p>总述</p>\n<p>  对那些临时的, 短期的解决方案, 或已经够好但仍不完美的代码使用<code>TODO</code>注释.</p>\n<p>  <code>TODO</code>注释要使用全大写的字符串<code>TODO</code>,在随后的圆括号里写上你的名字, 邮件地址, bug ID, 或其它身份标识和与这一<code>TODO</code>相关的 issue. 主要目的是让添加注释的人 (也是可以请求提供更多细节的人) 可根据规范的<code>TODO</code>格式进行查找. 添加<code>TODO</code>注释并不意味着你要自己来修正, 因此当你加上带有姓名的<code>TODO</code>时, 一般都是写上自己的名字.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TODO(kl@gmail.com): Use a \"*\" here for concatenation operator.</span></span><br><span class=\"line\"><span class=\"comment\">// TODO(Zeke) change this to use relations.</span></span><br><span class=\"line\"><span class=\"comment\">// TODO(bug 12345): remove the \"Last visitors\" feature</span></span><br></pre></td></tr></table></figure>\n<p>  如果加<code>TODO</code>是为了在 “将来某一天做某事”, 可以附上一个非常明确的时间 “Fix by November 2005”), 或者一个明确的事项 (“Remove this code when all clients can handle XML responses.”).</p>\n</li>\n</ul>\n<h4 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ol>\n<li>关于注释风格, 很多 C++ 的 coders 更喜欢行注释, C coders 或许对块注释依然情有独钟, 或者在文件头大段大段的注释时使用块注释</li>\n<li>文件注释可以炫耀你的成就, 也是为了捅了篓子别人可以找你</li>\n<li>注释要言简意赅, 不要拖沓冗余, 复杂的东西简单化和简单的东西复杂化都是要被鄙视的</li>\n<li>对于 Chinese coders 来说, 用英文注释还是用中文注释, it is a problem, 但不管怎样, 注释是为了让别人看懂, 难道是为了炫耀编程语言之外的你的母语或外语水平吗</li>\n<li>注释不要太乱, 适当的缩进才会让人乐意看. 但也没有必要规定注释从第几列开始 (我自己写代码的时候总喜欢这样), UNIX/LINUX 下还可以约定是使用 tab 还是 space, 个人倾向于 space</li>\n<li>TODO 很不错, 有时候, 注释确实是为了标记一些未完成的或完成的不尽如人意的地方, 这样一搜索, 就知道还有哪些活要干, 日志都省了</li>\n</ol>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><h4 id=\"行长度\"><a href=\"#行长度\" class=\"headerlink\" title=\"行长度\"></a>行长度</h4><ul>\n<li><p>总述</p>\n<p>  每一行代码字符数不超过 80.</p>\n<p>  我们也认识到这条规则是有争议的, 但很多已有代码都遵照这一规则, 因此我们感觉一致性更重要.</p>\n</li>\n<li><p>优点</p>\n<p>  提倡该原则的人认为强迫他们调整编辑器窗口大小是很野蛮的行为. 很多人同时并排开几个代码窗口, 根本没有多余的空间拉伸窗口. 大家都把窗口最大尺寸加以限定, 并且 80 列宽是传统标准. 那么为什么要改变呢?</p>\n</li>\n<li><p>缺点</p>\n</li>\n</ul>\n<pre><code>反对该原则的人则认为更宽的代码行更易阅读. 80 列的限制是上个世纪 60 年代的大型机的古板缺陷; 现代设备具有更宽的显示屏, 可以很轻松地显示更多代码.\n</code></pre><ul>\n<li><p>结论</p>\n<p>  80 个字符是最大值.</p>\n<p>  如果无法在不伤害易读性的条件下进行断行, 那么注释行可以超过 80 个字符, 这样可以方便复制粘贴. 例如, 带有命令示例或 URL 的行可以超过 80 个字符.</p>\n<p>  包含长路径的<code>#include</code>语句可以超出80列.</p>\n</li>\n</ul>\n<h4 id=\"非ASCII字符\"><a href=\"#非ASCII字符\" class=\"headerlink\" title=\"非ASCII字符\"></a>非ASCII字符</h4><ul>\n<li><p>总述</p>\n<p>  尽量不使用非 ASCII 字符, 使用时必须使用<em>UTF-8</em>编码.</p>\n</li>\n<li><p>说明</p>\n<p>  即使是英文, 也不应将用户界面的文本硬编码到源代码中, 因此非 ASCII 字符应当很少被用到. 特殊情况下可以适当包含此类字符. 例如, 代码分析外部数据文件时, 可以适当硬编码数据文件中作为分隔符的非 ASCII 字符串; 更常见的是 (不需要本地化的) 单元测试代码可能包含非 ASCII 字符串. 此类情况下, 应使用 UTF-8 编码, 因为很多工具都可以理解和处理 UTF-8 编码.</p>\n</li>\n</ul>\n<h4 id=\"空格还是制表位\"><a href=\"#空格还是制表位\" class=\"headerlink\" title=\"空格还是制表位\"></a>空格还是制表位</h4><ul>\n<li><p>总述</p>\n<p>  只使用空格, 每次缩进2个空格.（如果你所在的项目使用4各空格缩进，那么请保持一致性）</p>\n</li>\n<li><p>说明</p>\n<p>  我们使用空格缩进. 不要在代码中使用制表符. 你应该设置编辑器将制表符转为空格.</p>\n</li>\n</ul>\n<h4 id=\"函数声明与定义\"><a href=\"#函数声明与定义\" class=\"headerlink\" title=\"函数声明与定义\"></a>函数声明与定义</h4><ul>\n<li><p>总述</p>\n<p>  返回类型和函数名在同一行, 参数也尽量放在同一行, 如果放不下就对形参分行, 分行方式与函数调用一致.</p>\n</li>\n<li><p>说明</p>\n<p>  函数看上去像这样:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReturnType ClassName::FunctionName(Type par_name1, Type par_name2) &#123;</span><br><span class=\"line\">  DoSomething();</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  如果同一行文本太多, 放不下所有参数:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReturnType ClassName::ReallyLongFunctionName(Type par_name1, Type par_name2,</span><br><span class=\"line\">                                             Type par_name3) &#123;</span><br><span class=\"line\">  DoSomething();</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  甚至连第一个参数都放不下:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReturnType LongClassName::ReallyReallyReallyLongFunctionName(</span><br><span class=\"line\">    Type par_name1,  <span class=\"comment\">// 4 space indent</span></span><br><span class=\"line\">    Type par_name2,</span><br><span class=\"line\">    Type par_name3) &#123;</span><br><span class=\"line\">  DoSomething();  <span class=\"comment\">// 2 space indent</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  注意以下几点：</p>\n<ul>\n<li>使用好的参数名.</li>\n<li>只有在参数未被使用或者其用途非常明显时, 才能省略参数名.</li>\n<li>如果返回类型和函数名在一行放不下, 分行.</li>\n<li>如果返回类型与函数声明或定义分行了, 不要缩进.</li>\n<li>左圆括号总是和函数名在同一行.</li>\n<li>函数名和左圆括号间永远没有空格.</li>\n<li>圆括号与参数间没有空格.</li>\n<li>左大括号{总在最后一个参数同一行的末尾处, 不另起新行.</li>\n<li>右大括号总是单独位于函数最后一行, 或者与左大括号同一行.</li>\n<li>右圆括号和左大括号间总是有一个空格.</li>\n<li>所有形参应尽可能对齐.</li>\n<li>缺省缩进为 2 个空格.</li>\n<li><p>换行后的参数保持 4 个空格的缩进.</p>\n<p>未被使用的参数, 或者根据上下文很容易看出其用途的参数, 可以省略参数名:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  Foo(Foo&amp;&amp;);</span><br><span class=\"line\">  Foo(<span class=\"keyword\">const</span> Foo&amp;);</span><br><span class=\"line\">  Foo&amp; <span class=\"keyword\">operator</span>=(Foo&amp;&amp;);</span><br><span class=\"line\">  Foo&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Foo&amp;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>未被使用的参数如果其用途不明显的话, 在函数定义处将参数名注释起来:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Rotate</span><span class=\"params\">(<span class=\"keyword\">double</span> radians)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> :</span> <span class=\"keyword\">public</span> Shape &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Rotate</span><span class=\"params\">(<span class=\"keyword\">double</span> radians)</span> override</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> Circle::Rotate(<span class=\"keyword\">double</span> <span class=\"comment\">/*radians*/</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 差 - 如果将来有人要实现, 很难猜出变量的作用.</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> Circle::Rotate(<span class=\"keyword\">double</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>属性, 和展开为属性的宏, 写在函数声明或定义的最前面, 即返回类型之前:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MUST_USE_RESULT <span class=\"keyword\">bool</span> <span class=\"title\">IsOK</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Lambda表达式-1\"><a href=\"#Lambda表达式-1\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h4><ul>\n<li><p>总述</p>\n<p>  Lambda 表达式对形参和函数体的格式化和其他函数一致; 捕获列表同理, 表项用逗号隔开.</p>\n</li>\n<li><p>说明</p>\n<p>  若用引用捕获, 在变量名和<code>&amp;</code>之间不留空格.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> add_to_x = [&amp;x](<span class=\"keyword\">int</span> n) &#123; x += n; &#125;;</span><br></pre></td></tr></table></figure>\n<p>  短 lambda 就写得和内联函数一样.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; blacklist = &#123;<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; digits = &#123;<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">digits.erase(<span class=\"built_in\">std</span>::remove_if(digits.begin(), digits.end(), [&amp;blacklist](<span class=\"keyword\">int</span> i) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> blacklist.find(i) != blacklist.end();</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">            digits.end());</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h4><ul>\n<li>总述</li>\n</ul>\n<pre><code>要么一行写完函数调用, 要么在圆括号里对参数分行, 要么参数另起一行且缩进四格. 如果没有其它顾虑的话, 尽可能精简行数, 比如把多个参数适当地放在同一行里.\n</code></pre><ul>\n<li><p>说明</p>\n<p>  函数调用遵循如下形式</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> retval = DoSomething(argument1, argument2, argument3);</span><br></pre></td></tr></table></figure>\n<p>  如果同一行放不下, 可断为多行, 后面每一行都和第一个实参对齐, 左圆括号后和右圆括号前不要留空格：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> retval = DoSomething(averyveryveryverylongargument1,</span><br><span class=\"line\">                          argument2, argument3);</span><br></pre></td></tr></table></figure>\n<p>  参数也可以放在次行, 缩进四格：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (...) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (...) &#123;</span><br><span class=\"line\">    DoSomething(</span><br><span class=\"line\">        argument1, argument2,  <span class=\"comment\">// 4 空格缩进</span></span><br><span class=\"line\">        argument3, argument4);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>如果一些参数本身就是略复杂的表达式, 且降低了可读性, 那么可以直接创建临时变量描述该表达式, 并传递给函数：\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> my_heuristic = scores[x] * y + bases[x];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> retval = DoSomething(my_heuristic, x, y, z);</span><br></pre></td></tr></table></figure>\n\n或者放着不管, 补充上注释：\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> retval = DoSomething(scores[x] * y + bases[x],  <span class=\"comment\">// Score heuristic.</span></span><br><span class=\"line\">                          x, y, z);</span><br></pre></td></tr></table></figure>\n\n如果某参数独立成行, 对可读性更有帮助的话, 那也可以如此做. 参数的格式处理应当以可读性而非其他作为最重要的原则.\n\n此外, 如果一系列参数本身就有一定的结构, 可以酌情地按其结构来决定参数格式：\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过 3x3 矩阵转换 widget.</span></span><br><span class=\"line\">my_widget.Transform(x1, x2, x3,</span><br><span class=\"line\">                    y1, y2, y3,</span><br><span class=\"line\">                    z1, z2, z3);</span><br></pre></td></tr></table></figure>\n</code></pre><h4 id=\"列表初始化-1\"><a href=\"#列表初始化-1\" class=\"headerlink\" title=\"列表初始化\"></a>列表初始化</h4><p>如果列表初始化伴随着名字, 比如类型或变量名, 格式化时将将名字视作函数调用名, {} 视作函数调用的括号. 如果没有名字, 就视作名字长度为零.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一行列表初始化示范.</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;foo, bar&#125;;</span><br><span class=\"line\">functioncall(&#123;foo, bar&#125;);</span><br><span class=\"line\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; p&#123;foo, bar&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当不得不断行时.</span></span><br><span class=\"line\">SomeFunction(</span><br><span class=\"line\">    &#123;<span class=\"string\">\"assume a zero-length name before &#123;\"</span>&#125;,  <span class=\"comment\">// 假设在 &#123; 前有长度为零的名字.</span></span><br><span class=\"line\">    some_other_function_parameter);</span><br><span class=\"line\">SomeType variable&#123;</span><br><span class=\"line\">    some, other, values,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"assume a zero-length name before &#123;\"</span>&#125;,  <span class=\"comment\">// 假设在 &#123; 前有长度为零的名字.</span></span><br><span class=\"line\">    SomeOtherType&#123;</span><br><span class=\"line\">        <span class=\"string\">\"Very long string requiring the surrounding breaks.\"</span>,  <span class=\"comment\">// 非常长的字符串, 前后都需要断行.</span></span><br><span class=\"line\">        some, other values&#125;,</span><br><span class=\"line\">    SomeOtherType&#123;<span class=\"string\">\"Slightly shorter string\"</span>,  <span class=\"comment\">// 稍短的字符串.</span></span><br><span class=\"line\">                  some, other, values&#125;&#125;;</span><br><span class=\"line\">SomeType variable&#123;</span><br><span class=\"line\">    <span class=\"string\">\"This is too long to fit all in one line\"</span>&#125;;  <span class=\"comment\">// 字符串过长, 因此无法放在同一行.</span></span><br><span class=\"line\">MyType m = &#123;  <span class=\"comment\">// 注意了, 您可以在 &#123; 前断行.</span></span><br><span class=\"line\">    superlongvariablename1,</span><br><span class=\"line\">    superlongvariablename2,</span><br><span class=\"line\">    &#123;<span class=\"keyword\">short</span>, interior, <span class=\"built_in\">list</span>&#125;,</span><br><span class=\"line\">    &#123;interiorwrappinglist,</span><br><span class=\"line\">     interiorwrappinglist2&#125;&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h4><ul>\n<li><p>总述</p>\n<p>  倾向于不在圆括号内使用空格. 关键字<code>if</code>和<code>else</code>另起一行.</p>\n</li>\n<li><p>说明</p>\n<p>  对基本条件语句有两种可以接受的格式. 一种在圆括号和条件之间有空格, 另一种没有.</p>\n<p>  最常见的是没有空格的格式. 哪一种都可以, 最重要的是<em>保持一致</em>. 如果你是在修改一个文件, 参考当前已有格式. 如果是写新的代码, 参考目录下或项目中其它文件. 还在犹豫的话, 就不要加空格了.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;  <span class=\"comment\">// 圆括号里没有空格.</span></span><br><span class=\"line\">  ...  <span class=\"comment\">// 2 空格缩进.</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (...) &#123;  <span class=\"comment\">// else 与 if 的右括号同一行.</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  注意所有情况下<code>if</code>和左圆括号间都有个空格. 右圆括号和左大括号之间也要有个空格:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(condition)     <span class=\"comment\">// 差 - IF 后面没空格.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition)&#123;   <span class=\"comment\">// 差 - &#123; 前面没空格.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(condition)&#123;    <span class=\"comment\">// 变本加厉地差.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;  <span class=\"comment\">// 好 - IF 和 &#123; 都与空格紧邻.</span></span><br></pre></td></tr></table></figure>\n<p>  如果能增强可读性, 简短的条件语句允许写在同一行. 只有当语句简单并且没有使用<code>else</code>子句时使用:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x == kFoo) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (x == kBar) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Bar();</span><br></pre></td></tr></table></figure>\n<p>  如果语句有<code>else</code>分支则不允许:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不允许 - 当有 ELSE 分支时 IF 块却写在同一行</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (x) DoThis();</span><br><span class=\"line\"><span class=\"keyword\">else</span> DoThat();</span><br></pre></td></tr></table></figure>\n<p>  通常, 单行语句不需要使用大括号, 如果你喜欢用也没问题; 复杂的条件或循环语句用大括号可读性会更好. 也有一些项目要求<code>if</code>必须总是使用大括号:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition)</span><br><span class=\"line\">  DoSomething();  <span class=\"comment\">// 2 空格缩进.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  DoSomething();  <span class=\"comment\">// 2 空格缩进.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  但如果语句中某个<code>if-else</code>分支使用了大括号的话, 其它分支也必须使用:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不可以这样子 - IF 有大括号 ELSE 却没有.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  foo;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">  bar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不可以这样子 - ELSE 有大括号 IF 却没有.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition)</span><br><span class=\"line\">  foo;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  bar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只要其中一个分支用了大括号, 两个分支都要用上大括号.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  foo;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  bar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"循环和开关选择语句\"><a href=\"#循环和开关选择语句\" class=\"headerlink\" title=\"循环和开关选择语句\"></a>循环和开关选择语句</h4><ul>\n<li><p>总述</p>\n<p>  <code>switch</code>语句可以使用大括号分段, 以表明 cases 之间不是连在一起的. 在单语句循环里, 括号可用可不用. 空循环体应使用<code>{}</code>或<code>continue</code>.</p>\n</li>\n<li><p>说明</p>\n<p>  <code>switch</code>语句中的<code>case</code>块可以使用大括号也可以不用, 取决于你的个人喜好. 如果用的话, 要按照下文所述的方法.</p>\n<p>  如果有不满足<code>case</code>条件的枚举值, <code>switch</code>应该总是包含一个<code>default</code>匹配 (如果有输入值没有 case 去处理, 编译器将给出 warning). 如果<code>default</code>应该永远执行不到, 简单的加条 <code>assert</code>:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (var) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">0</span>: &#123;  <span class=\"comment\">// 2 空格缩进</span></span><br><span class=\"line\">    ...      <span class=\"comment\">// 4 空格缩进</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">    assert(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  在单语句循环里, 括号可用可不用：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; kSomeNumber; ++i)</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"I love you\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; kSomeNumber; ++i) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"I take it back\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  空循环体应使用<code>{}</code>或<code>continue</code>, 而不是一个简单的分号.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 反复循环直到条件失效.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; kSomeNumber; ++i) &#123;&#125;  <span class=\"comment\">// 可 - 空循环体.</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (condition) <span class=\"keyword\">continue</span>;  <span class=\"comment\">// 可 - contunue 表明没有逻辑.</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"指针和引用表达式\"><a href=\"#指针和引用表达式\" class=\"headerlink\" title=\"指针和引用表达式\"></a>指针和引用表达式</h4><ul>\n<li><p>总述</p>\n<p>  句点或箭头前后不要有空格. 指针/地址操作符 (<code>*, &amp;</code>) 之后不能有空格.</p>\n</li>\n<li><p>说明</p>\n<p>  下面是指针和引用表达式的正确使用范例:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = *p;</span><br><span class=\"line\">p = &amp;x;</span><br><span class=\"line\">x = r.y;</span><br><span class=\"line\">x = r-&gt;y;</span><br></pre></td></tr></table></figure>\n<p>  注意</p>\n<ul>\n<li>在访问成员时, 句点或箭头前后没有空格.</li>\n<li><p>指针操作符 * 或 &amp; 后没有空格.</p>\n<p>在声明指针变量或参数时, 星号与类型或变量名紧挨都可以:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 好, 空格前置.</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *c;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;str;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 好, 空格后置.</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>* c;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; str;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x, *y;  <span class=\"comment\">// 不允许 - 在多重声明中不能使用 &amp; 或 *</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> * c;  <span class=\"comment\">// 差 - * 两边都有空格</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp; str;  <span class=\"comment\">// 差 - &amp; 两边都有空格.</span></span><br></pre></td></tr></table></figure>\n<p>在单个文件内要保持风格一致, 所以, 如果是修改现有文件, 要遵照该文件的风格.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"布尔表达式\"><a href=\"#布尔表达式\" class=\"headerlink\" title=\"布尔表达式\"></a>布尔表达式</h4><ul>\n<li><p>总述</p>\n<p>  如果一个布尔表达式超过标准行宽, 断行方式要统一一下.</p>\n</li>\n<li><p>说明</p>\n<p>  下例中, 逻辑与 (<code>&amp;&amp;</code>) 操作符总位于行尾:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (this_one_thing &gt; this_other_thing &amp;&amp;</span><br><span class=\"line\">    a_third_thing == a_fourth_thing &amp;&amp;</span><br><span class=\"line\">    yet_another &amp;&amp; last_one) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"函数返回值\"><a href=\"#函数返回值\" class=\"headerlink\" title=\"函数返回值\"></a>函数返回值</h4><ul>\n<li><p>总述</p>\n<p>  不要在<code>return</code>表达式里加上非必须的圆括号.</p>\n</li>\n<li><p>说明</p>\n<p>  只有在写<code>x = expr</code>要加上括号的时候才在<code>return expr;</code>里使用括号.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> result;                  <span class=\"comment\">// 返回值很简单, 没有圆括号.</span></span><br><span class=\"line\"><span class=\"comment\">// 可以用圆括号把复杂表达式圈起来, 改善可读性.</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> (some_long_condition &amp;&amp;</span><br><span class=\"line\">        another_condition);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"变量及数组初始化\"><a href=\"#变量及数组初始化\" class=\"headerlink\" title=\"变量及数组初始化\"></a>变量及数组初始化</h4><ul>\n<li><p>总述</p>\n<p>  用<code>=</code>,<code>()</code>和<code>{}</code>均可.</p>\n</li>\n<li><p>说明</p>\n<p>  您可以用<code>=</code>,<code>()</code>和<code>{}</code>, 以下的例子都是正确的：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">x</span><span class=\"params\">(<span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x&#123;<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">name</span><span class=\"params\">(<span class=\"string\">\"Some Name\"</span>)</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> name = <span class=\"string\">\"Some Name\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> name&#123;<span class=\"string\">\"Some Name\"</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>  请务必小心列表初始化<code>{...}</code>用<code>std::initializer_list</code>构造函数初始化出的类型. 非空列表初始化就会优先调用<code>std::initializer_list</code>, 不过空列表初始化除外, 后者原则上会调用默认构造函数. 为了强制禁用<code>std::initializer_list</code>构造函数, 请改用括号.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v(<span class=\"number\">100</span>, <span class=\"number\">1</span>);  <span class=\"comment\">// 内容为 100 个 1 的向量.</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v&#123;<span class=\"number\">100</span>, <span class=\"number\">1</span>&#125;;  <span class=\"comment\">// 内容为 100 和 1 的向量.</span></span><br></pre></td></tr></table></figure>\n<p>  此外, 列表初始化不允许整型类型的四舍五入, 这可以用来避免一些类型上的编程失误.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pi</span><span class=\"params\">(<span class=\"number\">3.14</span>)</span></span>;  <span class=\"comment\">// 好 - pi == 3.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> pi&#123;<span class=\"number\">3.14</span>&#125;;  <span class=\"comment\">// 编译错误: 缩窄转换.</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"预处理指令\"><a href=\"#预处理指令\" class=\"headerlink\" title=\"预处理指令\"></a>预处理指令</h4><ul>\n<li><p>总述</p>\n<p>  预处理指令不要缩进, 从行首开始.</p>\n</li>\n<li><p>说明</p>\n<p>  即使预处理指令位于缩进代码块中, 指令也应从行首开始.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 好 - 指令从行首开始</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lopsided_score) &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> DISASTER_PENDING      <span class=\"comment\">// 正确 - 从行首开始</span></span></span><br><span class=\"line\">    DropEverything();</span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">if</span> NOTIFY               <span class=\"comment\">// 非必要 - # 后跟空格</span></span></span><br><span class=\"line\">    NotifyClient();</span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    BackToNormal();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"构造函数初始值列表\"><a href=\"#构造函数初始值列表\" class=\"headerlink\" title=\"构造函数初始值列表\"></a>构造函数初始值列表</h4><ul>\n<li><p>总述</p>\n<p>  构造函数初始化列表放在同一行或按四格缩进并排多行.</p>\n</li>\n<li><p>说明</p>\n<p>  下面两种初始值列表方式都可以接受:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果所有变量能放在同一行:</span></span><br><span class=\"line\">MyClass::MyClass(<span class=\"keyword\">int</span> var) : some_var_(var) &#123;</span><br><span class=\"line\">  DoSomething();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果不能放在同一行,</span></span><br><span class=\"line\"><span class=\"comment\">// 必须置于冒号后, 并缩进 4 个空格</span></span><br><span class=\"line\">MyClass::MyClass(<span class=\"keyword\">int</span> var)</span><br><span class=\"line\">    : some_var_(var), some_other_var_(var + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  DoSomething();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果初始化列表需要置于多行, 将每一个成员放在单独的一行</span></span><br><span class=\"line\"><span class=\"comment\">// 并逐行对齐</span></span><br><span class=\"line\">MyClass::MyClass(<span class=\"keyword\">int</span> var)</span><br><span class=\"line\">    : some_var_(var),             <span class=\"comment\">// 4 space indent</span></span><br><span class=\"line\">    some_other_var_(var + <span class=\"number\">1</span>) &#123;  <span class=\"comment\">// lined up</span></span><br><span class=\"line\">  DoSomething();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 右大括号 &#125; 可以和左大括号 &#123; 放在同一行</span></span><br><span class=\"line\"><span class=\"comment\">// 如果这样做合适的话</span></span><br><span class=\"line\">MyClass::MyClass(<span class=\"keyword\">int</span> var)</span><br><span class=\"line\">    : some_var_(var) &#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"命名空间格式化\"><a href=\"#命名空间格式化\" class=\"headerlink\" title=\"命名空间格式化\"></a>命名空间格式化</h4><ul>\n<li><p>总述</p>\n<p>  命名空间内容不缩进.</p>\n</li>\n<li><p>说明</p>\n<p>  命名空间 不要增加额外的缩进层次, 例如:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;  <span class=\"comment\">// 正确. 命名空间内没有额外的缩进.</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace</span></span><br></pre></td></tr></table></figure>\n<p>  不要在命名空间内缩进:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 错, 缩进多余了.</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace</span></span><br></pre></td></tr></table></figure>\n<p>  声明嵌套命名空间时, 每个命名空间都独立成行.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> foo &#123;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> bar &#123;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"水平留白\"><a href=\"#水平留白\" class=\"headerlink\" title=\"水平留白\"></a>水平留白</h4><ul>\n<li><p>总述</p>\n<p>  水平留白的使用根据在代码中的位置决定. 永远不要在行尾添加没意义的留白.</p>\n</li>\n<li><p>说明</p>\n<ul>\n<li><p>通用</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">bool</span> b)</span> </span>&#123;  <span class=\"comment\">// 左大括号前总是有空格.</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;  <span class=\"comment\">// 分号前不加空格.</span></span><br><span class=\"line\"><span class=\"comment\">// 列表初始化中大括号内的空格是可选的.</span></span><br><span class=\"line\"><span class=\"comment\">// 如果加了空格, 那么两边都要加上.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> x[] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x[] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承与初始化列表中的冒号前后恒有空格.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> :</span> <span class=\"keyword\">public</span> Bar &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"comment\">// 对于单行函数的实现, 在大括号内加上空格</span></span><br><span class=\"line\">  <span class=\"comment\">// 然后是函数实现</span></span><br><span class=\"line\">  Foo(<span class=\"keyword\">int</span> b) : Bar(), baz_(b) &#123;&#125;  <span class=\"comment\">// 大括号里面是空的话, 不加空格.</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Reset</span><span class=\"params\">()</span> </span>&#123; baz_ = <span class=\"number\">0</span>; &#125;  <span class=\"comment\">// 用括号把大括号与实现分开.</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>  添加冗余的留白会给其他人编辑时造成额外负担. 因此, 行尾不要留空格. 如果确定一行代码已经修改完毕, 将多余的空格去掉; 或者在专门清理空格时去掉（尤其是在没有其他人在处理这件事的时候).</p>\n</li>\n<li><p>循环和条件语句</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (b) &#123;          <span class=\"comment\">// if 条件语句和循环语句关键字后均有空格.</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;          <span class=\"comment\">// else 前后有空格.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (test) &#123;&#125;   <span class=\"comment\">// 圆括号内部不紧邻空格.</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (i) &#123;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> ( i ) &#123;    <span class=\"comment\">// 循环和条件语句的圆括号里可以与空格紧邻.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( test ) &#123;     <span class=\"comment\">// 圆括号, 但这很少见. 总之要一致.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i ) &#123;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( ; i &lt; <span class=\"number\">5</span> ; ++i) &#123;  <span class=\"comment\">// 循环里内 ; 后恒有空格, ;  前可以加个空格.</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (i) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>:         <span class=\"comment\">// switch case 的冒号前无空格.</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">break</span>;  <span class=\"comment\">// 如果冒号有代码, 加个空格.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>操作符</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 赋值运算符前后总是有空格.</span></span><br><span class=\"line\">x = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其它二元操作符也前后恒有空格, 不过对于表达式的子式可以不加空格.</span></span><br><span class=\"line\"><span class=\"comment\">// 圆括号内部没有紧邻空格.</span></span><br><span class=\"line\">v = w * x + y / z;</span><br><span class=\"line\">v = w*x + y/z;</span><br><span class=\"line\">v = w * (x + z);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在参数和一元操作符之间不加空格.</span></span><br><span class=\"line\">x = <span class=\"number\">-5</span>;</span><br><span class=\"line\">++x;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (x &amp;&amp; !y)</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模板和转换</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 尖括号(&lt; and &gt;) 不与空格紧邻, &lt; 前没有空格, &gt; 和 ( 之间也没有.</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; x;</span><br><span class=\"line\">y = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">char</span>*&gt;(x);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在类型与指针操作符之间留空格也可以, 但要保持一致.</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span> *&gt; x;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"垂直留白\"><a href=\"#垂直留白\" class=\"headerlink\" title=\"垂直留白\"></a>垂直留白</h4><ul>\n<li><p>总述</p>\n<p>  垂直留白越少越好.</p>\n</li>\n<li><p>说明</p>\n<p>  这不仅仅是规则而是原则问题了: 不在万不得已, 不要使用空行. 尤其是: 两个函数定义之间的空行不要超过 2 行, 函数体首尾不要留空行, 函数体中也不要随意添加空行.</p>\n<p>  基本原则是: 同一屏可以显示的代码越多, 越容易理解程序的控制流. 当然, 过于密集的代码块和过于疏松的代码块同样难看, 这取决于你的判断. 但通常是垂直留白越少越好.</p>\n<p>  下面的规则可以让加入的空行更有效:</p>\n<ul>\n<li>函数体内开头或结尾的空行可读性微乎其微.</li>\n<li>在多重 if-else 块里加空行或许有点可读性.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>对于代码格式, 因人, 系统而异各有优缺点, 但同一个项目中遵循同一标准还是有必要的;</li>\n<li>行宽原则上不超过 80 列, 把 22 寸的显示屏都占完, 怎么也说不过去;</li>\n<li>80 行限制事实上有助于避免代码可读性失控, 比如超多重嵌套块, 超多重函数调用等等.</li>\n<li>尽量不使用非 ASCII 字符, 如果使用的话, 参考 UTF-8 格式 (尤其是 UNIX/Linux 下, Windows 下可以考虑宽字符), 尽量不将字符串常量耦合到代码中, 比如独立出资源文件, 这不仅仅是风格问题了;</li>\n<li>UNIX/Linux 下无条件使用空格, MSVC 的话使用 Tab 也无可厚非;</li>\n<li>函数参数, 逻辑条件, 初始化列表: 要么所有参数和函数名放在同一行, 要么所有参数并排分行;</li>\n<li>除函数定义的左大括号可以置于行首外, 包括函数/类/结构体/枚举声明, 各种语句的左大括号置于行尾, 所有右大括号独立成行;</li>\n<li>Google 强调有一对 if-else 时, 不论有没有嵌套, 都要有大括号</li>\n<li><code>.</code>/<code>-&gt;</code> 操作符前后不留空格, <code>*</code>/<code>&amp;</code> 不要前后都留, 一个就可, 靠左靠右依各人喜好;</li>\n<li>预处理指令/命名空间不使用额外缩进, 类/结构体/枚举/函数/语句使用缩进;</li>\n<li>初始化用<code>=</code>还是<code>()</code>依个人喜好, 统一就好;</li>\n<li><code>return</code>不要加<code>()</code>;</li>\n<li>水平/垂直留白不要滥用, 怎么易读怎么来.</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"Google-C-Code-Style\"><a href=\"#Google-C-Code-Style\" class=\"headerlink\" title=\"Google C++ Code Style\"></a>Google C++ Code Style</h1><p>C++ 是 Google 大部分开源项目的主要编程语言。正如每个 C++ 程序员都知道的， C++ 有很多强大的特性， 但这种强大不可避免的导致它走向复杂，使代码更容易产生 bug， 难以阅读和维护。</p>\n<p>本指南的目的是通过详细阐述 C++ 注意事项来驾驭其复杂性。这些规则在保证代码易于管理的同时， 也能高效使用 C++ 的语言特性。</p>","more":"<p>风格， 亦被称作可读性， 也就是指导 C++ 编程的约定. 使用术语 “风格” 有些用词不当， 因为这些习惯远不止源代码文件格式化这么简单。</p>\n<p>使代码易于管理的方法之一是加强代码一致性。让任何程序员都可以快速读懂你的代码这点非常重要。保持统一编程风格并遵守约定意味着可以很容易根据 “模式匹配” 规则来推断各种标识符的含义。创建通用， 必需的习惯用语和模式可以使代码更容易理解。在一些情况下可能有充分的理由改变某些编程风格， 但我们还是应该遵循一致性原则，尽量不这么做。</p>\n<h2 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h2><p>一个<code>.cc/.cpp</code>文件都应该对应一个<code>.h</code>文件。也有些常见例外，例如单元测试代码和只包含<code>main()</code>入口函数的源文件。</p>\n<h4 id=\"Self-contained-头文件\"><a href=\"#Self-contained-头文件\" class=\"headerlink\" title=\"Self-contained 头文件\"></a>Self-contained 头文件</h4><blockquote>\n<p>Tip: 头文件应该能够自给自足（<strong>self-contained</strong>，也就是可以作为第一个头文件被引入），简单来说就是头文件中依赖的其他声明要在头文件中定义清楚，而不能依赖在<code>.cc</code>文件中调整引入顺序解决依赖。</p>\n</blockquote>\n<p>如果<code>.h</code>文件声明了一个模板或内联函数，同时也在该文件加以定义。凡是有用到这些的<code>.cc</code>文件，就得统统包含该头文件，否则程序可能会在构建中链接失败。</p>\n<p>有个例外：如果某函数模板为所有相关模板参数显式实例化，或本身就是某类的一个私有成员，那么它就只能定义在实例化该模板的 .cc 文件里。</p>\n<h4 id=\"define保护\"><a href=\"#define保护\" class=\"headerlink\" title=\"#define保护\"></a>#define保护</h4><blockquote>\n<p>Tip: 所有头文件都应该使用 <code>#define</code> 来防止头文件被多重包含， 命名格式当是: <code>&lt;PROJECT&gt;_&lt;PATH&gt;_&lt;FILE&gt;_H_</code>。</p>\n</blockquote>\n<p>为保证唯一性， 头文件的命名应该基于所在项目源代码树的全路径. 例如， 项目 <code>foo</code>中的头文件<code>foo/src/bar/baz.h</code>可按如下方式保护:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> FOO_BAR_BAZ_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOO_BAR_BAZ_H_</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// FOO_BAR_BAZ_H_</span></span></span><br></pre></td></tr></table></figure>\n<p><code>#define</code> 与 <code>#pragma once</code>区别</p>\n<p><code>#pragma once</code>是编译相关，就是说这个编译系统上能用，但在其他编译系统不一定可以，也就是说移植性差。</p>\n<p>所以尽量使用<code>#ifndef</code>来避免头文件重复引用。</p>\n<h4 id=\"前置声明\"><a href=\"#前置声明\" class=\"headerlink\" title=\"前置声明\"></a>前置声明</h4><blockquote>\n<p>Tip: 尽可能地<strong>避免使用</strong>前置声明。使用 #include 包含需要的头文件即可。</p>\n</blockquote>\n<p>所谓「前置声明」（forward declaration）是类、函数和模板的纯粹声明，没伴随着其定义。</p>\n<ul>\n<li><p>优点</p>\n<ul>\n<li>前置声明能够节省编译时间，多余的<code>#include</code>会迫使编译器展开更多的文件，处理更多的输入。</li>\n<li>前置声明能够节省不必要的重新编译的时间。<code>#include</code>使代码因为头文件中无关的改动而被重新编译多次。</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>前置声明隐藏了依赖关系，头文件改动时，用户的代码会跳过必要的重新编译过程。</li>\n<li>前置声明可能会被库的后续更改所破坏。前置声明函数或模板有时会妨碍头文件开发者变动其API。例如扩大形参类型，加个自带默认参数的模板形参等等。</li>\n<li>前置声明来自命名空间 <code>std::</code>的symbol时，其<strong>行为未定义</strong>。</li>\n<li><p>很难判断什么时候该用前置声明，什么时候该用<code>#include</code>。极端情况下，用前置声明代替<code>includes</code>甚至都会暗暗地改变代码的含义：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.h:</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">B</span> &#123;</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">D</span> :</span> B &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good_user.cc:</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(B*)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">void</span>*)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(D* x)</span> </span>&#123; f(x); &#125;  <span class=\"comment\">// calls f(B*)</span></span><br></pre></td></tr></table></figure>\n<p>  如果<code>#include</code>被 B 和 D 的前置声明替代，<code>test()</code>就会调用<code>f(void*)</code>。</p>\n</li>\n<li>前置声明了不少来自头文件的symbol时，就会比单单一行的<strong>include冗长</strong>。</li>\n<li>仅仅为了能前置声明而重构代码（比如用指针成员代替对象成员）会使代码变得更慢更复杂。</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li>尽量避免前置声明那些定义在其他项目中的实体。</li>\n<li>函数：总是使用<code>#include</code>。</li>\n<li>类模板：优先使用<code>#include</code>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h4><blockquote>\n<p>Tip: 只有当函数只有<strong>10行甚至更少</strong>时才将其定义为内联函数。</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  当函数被声明为内联函数之后， 编译器会将其内联展开， 而不是按通常的函数调用机制进行调用。</p>\n</li>\n<li><p>优点</p>\n<p>  只要内联的函数体较小， 内联该函数可以令目标代码更加高效. 对于存取函数以及其它函数体比较短， 性能关键的函数， 鼓励使用内联。</p>\n</li>\n<li><p>缺点</p>\n<p>  滥用内联将导致程序变得更慢。内联可能使目标代码量或增或减， 这取决于内联函数的大小。内联非常短小的存取函数通常会减少代码大小， 但内联一个相当大的函数将戏剧性的增加代码大小。现代处理器由于更好的利用了指令缓存， 小巧的代码往往执行更快。</p>\n</li>\n<li><p>结论</p>\n<p>  一个较为合理的经验准则是， <strong>不要内联超过10行</strong>的函数。<strong>谨慎对待析构函数</strong>， 析构函数往往比其表面看起来要更长， 因为有隐含的成员和基类析构函数被调用!</p>\n<p>  有些函数即使声明为内联的也不一定会被编译器内联， 这点很重要; 比如<strong>虚函数</strong>和<strong>递归函数</strong>就不会被正常内联。通常， 递归函数不应该声明成内联函数，递归调用堆栈的展开并不像循环那么简单， 比如递归层数在编译时可能是未知的， 大多数编译器都不支持内联递归函数。虚函数内联的主要原因则是想把它的函数体放在类定义内， 为了图个方便， 抑或是当作文档描述其行为， 比如精短的存取函数.</p>\n</li>\n</ul>\n<h4 id=\"include的路径及顺序\"><a href=\"#include的路径及顺序\" class=\"headerlink\" title=\"#include的路径及顺序\"></a><code>#include</code>的路径及顺序</h4><blockquote>\n<p>Tip: 使用标准的头文件包含顺序可增强可读性， 避免隐藏依赖: 相关头文件， C 库， C++ 库， 其他库的 .h， 本项目内的 .h。</p>\n</blockquote>\n<p>项目内头文件应按照项目源代码目录树结构排列， 避免使用 UNIX 特殊的快捷目录<code>.</code>(当前目录)或<code>..</code>(上级目录). 例如， <code>google-awesome-project/src/base/logging.h</code>应该按如下方式包含:</p>\n<blockquote>\n<p><code>#include &quot;base/logging.h&quot;</code></p>\n</blockquote>\n<p>又如，<code>dir/foo.cc</code>或<code>dir/foo_test.cc</code>的主要作用是实现或测试<code>dir2/foo2.h</code>的功能，<code>foo.cc</code>中包含头文件的次序如下：</p>\n<ol>\n<li><code>dir2/foo2.h</code>（优先位置，详情如下）</li>\n<li>C 系统文件</li>\n<li>C++ 系统文件</li>\n<li>其他库的<code>.h</code>文件</li>\n<li>本项目内<code>.h</code>文件</li>\n</ol>\n<p>这种优先的顺序排序保证当<code>dir2/foo2.h</code>遗漏某些必要的库时，<code>dir/foo.cc</code>或<code>dir/foo_test.cc</code>的构建会立刻中止。因此这一条规则保证维护这些文件的人们首先看到构建中止的消息而不是维护其他包的人们。</p>\n<p>您所依赖的符号(symbols)被哪些头文件所定义，您就应该包含<code>(include)</code>哪些头文件，前置声明(forward declarations)情况除外。比如您要用到<code>bar.h</code>中的某个符号， 哪怕您所包含的 <code>foo.h</code>已经包含了<code>bar.h</code>， 也照样得包含<code>bar.h</code>， 除非 <code>foo.h</code>有明确说明它会自动向您提供<code>bar.h</code>中的symbol。 不过，凡是cc文件所对应的「相关头文件」已经包含的，就不用再重复包含进其cc文件里面了，就像<code>foo.cc</code>只包含<code>foo.h</code>就够了，不用再管后者所包含的其它内容。</p>\n<p>举例来说，<code>google-awesome-project/src/foo/internal/fooserver.cc</code>的包含次序如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"foo/public/fooserver.h\"</span> <span class=\"comment\">// 优先位置</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;hash_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"base/basictypes.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"base/commandlineflags.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"foo/public/bar.h\"</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ol>\n<li>避免多重包含</li>\n<li>头文件尽量避免使用前置声明，直接<code>include</code></li>\n<li>内联函数最好少于10行。类内部的函数一般会自动内联。所以某函数一旦不需要内联，其定义就不要再放在头文件里，而是放到对应的<code>.cc</code>文件里</li>\n<li>包含文件的次序除了美观之外， 最重要的是可以减少隐藏依赖，使每个头文件在“最需要编译”的地方编译。</li>\n</ol>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><h4 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h4><blockquote>\n<p>Tip: 鼓励在<code>.cc</code>文件内使用匿名命名空间或<code>static</code>声明. 使用具名的命名空间时，其名称可基于项目名或相对路径。<strong>禁止使用using指示(using-directive e.g. using namespace foo;)</strong>。禁止使用内联命名空间(inline namespace)。</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  命名空间将全局作用域细分为独立的， 具名的作用域， 可有效防止全局作用域的命名冲突。</p>\n</li>\n<li><p>优点</p>\n<p>  类已经提将命名分割在不同类的作用域内， 命名空间在这基础上又封装了一层。</p>\n<p>  举例来说， 两个不同项目的全局作用域都有一个类<code>Foo</code>， 这样在编译或运行时造成冲突。如果每个项目将代码置于不同命名空间中，<code>project1::Foo</code>和<code>project2::Foo</code>作为不同符号自然不会冲突。</p>\n<p>  内联命名空间会自动把内部的标识符放到外层作用域，比如：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> X &#123;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">namespace</span> Y &#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace Y</span></span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace X</span></span><br></pre></td></tr></table></figure>\n<p>  <code>X::Y::foo()</code>与<code>X::foo()</code>彼此可代替。内联命名空间主要用来保持跨版本的 ABI 兼容性。</p>\n</li>\n<li><p>缺点</p>\n<p>  命名空间具有迷惑性， 因为它们使得区分两个相同命名所指代的定义更加困难。</p>\n<p>  内联命名空间很容易令人迷惑，毕竟其内部的成员不再受其声明所在命名空间的限制。内联命名空间只在大型版本控制里有用。</p>\n</li>\n<li><p>结论</p>\n<p>  根据下文将要提到的策略合理使用命名空间。</p>\n<ul>\n<li>遵守<code>命名空间命名</code>中的规则。</li>\n<li>像之前的几个例子中一样，在命名空间的最后注释出命名空间的名字。</li>\n<li><p>用命名空间把文件包含， 以及类的前置声明<strong>以外</strong>的整个源文件封装起来， 以区别于其它命名空间:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .h 文件</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> mynamespace &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有声明都置于命名空间中</span></span><br><span class=\"line\"><span class=\"comment\">// 注意不要使用缩进</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"comment\">// namespace mynamespace</span></span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .cc 文件</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> mynamespace &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数定义都置于命名空间中</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> MyClass::Foo() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"comment\">// namespace mynamespace</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不要在命名空间<code>std</code>内声明任何东西， 包括标准库的类前置声明。在<code>std</code>命名空间声明实体是未定义的行为， 会导致如不可移植。声明标准库下的实体， 需要包含对应的头文件。</p>\n</li>\n<li><p>不应该使用<code>using</code>指示 引入整个命名空间的标识符号。</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 禁止 —— 污染命名空间</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> foo;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不要在头文件中使用<code>命名空间别名</code>除非显式标记内部命名空间使用。因为任何在头文件中引入的命名空间都会成为公开API的一部分。</p>\n</li>\n<li>禁止用内联命名空间</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"匿名命名空间和静态变量\"><a href=\"#匿名命名空间和静态变量\" class=\"headerlink\" title=\"匿名命名空间和静态变量\"></a>匿名命名空间和静态变量</h4><blockquote>\n<p>Tip: 在<code>.cc</code>文件中定义一个不需要被外部引用的变量时，可以将它们放在匿名命名空间或声明为<code>static</code>。但是不要在<code>.h</code>文件中这么做。</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  所有置于匿名命名空间的声明都具有内部链接性，函数和变量可以经由声明为<code>static</code>拥有内部链接性，这意味着你在这个文件中声明的这些标识符都不能在另一个文件中被访问。即使两个文件声明了完全一样名字的标识符，它们所指向的实体实际上是完全不同的。</p>\n</li>\n<li><p>结论</p>\n<p>  推荐、鼓励在<code>.cc</code>中对于不需要在其他地方引用的标识符使用内部链接性声明，但是不要在<code>.h</code>中使用。</p>\n<p>  匿名命名空间的声明和具名的格式相同，在最后注释上<code>namespace</code>:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"非成员函数、静态成员函数和全局函数\"><a href=\"#非成员函数、静态成员函数和全局函数\" class=\"headerlink\" title=\"非成员函数、静态成员函数和全局函数\"></a>非成员函数、静态成员函数和全局函数</h4><blockquote>\n<p>Tip: 使用静态成员函数或命名空间内的非成员函数，尽量不要用裸的全局函数。将一系列函数直接置于命名空间中，不要用类的静态方法模拟出命名空间的效果，类的静态方法应当和类的实例或静态数据紧密相关。</p>\n</blockquote>\n<ul>\n<li><p>优点</p>\n<p>  某些情况下，非成员函数和静态成员函数是非常有用的，将非成员函数放在命名空间内可避免污染全局作用域。</p>\n</li>\n<li><p>缺点</p>\n<p>  将非成员函数和静态成员函数作为新类的成员或许更有意义，当它们需要访问外部资源或具有重要的依赖关系时更是如此。</p>\n</li>\n<li><p>结论</p>\n<p>  有时，把函数的定义同类的实例脱钩是有益的，甚至是必要的。这样的函数可以被定义成静态成员，或是非成员函数。非成员函数不应依赖于外部变量，应尽量置于某个命名空间内。相比单纯为了封装若干不共享任何静态数据的静态成员函数而创建类，不如使用<code>2.1命名空间</code>。举例而言，对于头文件<code>myproject/foo_bar.h</code>，应当使用</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> myproject &#123;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> foo_bar &#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Function1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Function2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace foo_bar</span></span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace myproject</span></span><br></pre></td></tr></table></figure>\n<p>  而非</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> myproject &#123;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooBar</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Function1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Function2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace myproject</span></span><br></pre></td></tr></table></figure>\n<p>  定义在同一编译单元的函数，被其他编译单元直接调用可能会引入不必要的耦合和链接时依赖；静态成员函数对此尤其敏感。可以考虑提取到新类中，或者将函数置于独立库的命名空间内。</p>\n<p>  如果你必须定义非成员函数，又只是在<code>.cc</code>文件中使用它，可使用<code>匿名命名空间</code>或<code>static</code>链接关键字(如<code>static int Foo() {...}</code>) 限定其作用域。</p>\n</li>\n</ul>\n<h4 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h4><blockquote>\n<p>Tip: 将函数变量尽可能置于最小作用域内, 并在变量声明时进行初始化。</p>\n</blockquote>\n<p>C++允许在函数的任何位置声明变量。我们提倡在尽可能小的作用域中声明变量，离第一次使用越近越好。这使得代码浏览者更容易定位变量声明的位置, 了解变量的类型和初始值。特别是，应使用初始化的方式替代声明再赋值, 比如:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\">i = f(); <span class=\"comment\">// 坏——初始化和声明分离</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> j = g(); <span class=\"comment\">// 好——初始化时声明</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">v.push_back(<span class=\"number\">1</span>); <span class=\"comment\">// 用花括号初始化更好</span></span><br><span class=\"line\">v.push_back(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;; <span class=\"comment\">// 好——v 一开始就初始化</span></span><br></pre></td></tr></table></figure>\n<p>属于<code>if</code>,<code>while</code>和<code>for</code>语句的变量应当在这些语句中正常地声明，这样子这些变量的作用域就被限制在这些语句中了，举例而言:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* p = <span class=\"built_in\">strchr</span>(str, <span class=\"string\">'/'</span>)) str = p + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>有一个例外, 如果变量是一个对象, 每次进入作用域都要调用其构造函数, 每次退出作用域都要调用其析构函数。这会导致效率降低。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 低效的实现</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000000</span>; ++i) &#123;</span><br><span class=\"line\">    Foo f;    <span class=\"comment\">// 构造函数和析构函数分别调用 1000000 次!</span></span><br><span class=\"line\">    f.DoSomething(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo f;    <span class=\"comment\">// 构造函数和析构函数只调用 1 次</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000000</span>; ++i) &#123;</span><br><span class=\"line\">    f.DoSomething(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"静态和全局变量\"><a href=\"#静态和全局变量\" class=\"headerlink\" title=\"静态和全局变量\"></a>静态和全局变量</h4><blockquote>\n<p>Tip: 禁止定义静态储存周期非POD变量，禁止使用含有副作用的函数初始化POD全局变量，因为多编译单元中的静态变量执行时的构造和析构顺序是未明确的，这将导致代码的不可移植。</p>\n</blockquote>\n<p>静态生存周期的对象，即包括了全局变量，静态变量，静态类成员变量和函数静态变量，都必须是原生数据类型<code>(POD : Plain Old Data)</code>: 即<code>int</code>,<code>char</code>和<code>float</code>, 以及 POD类型的<code>指针</code>、<code>数组</code>和<code>结构体</code>。</p>\n<p>静态变量的构造函数、析构函数和初始化的顺序在<code>C++</code>中是只有部分明确的，甚至随着构建变化而变化，导致难以发现的 bug。所以除了禁用类类型的全局变量，我们也不允许用函数返回值来初始化POD 变量，除非该函数（比如 getenv() 或 getpid() ）不涉及任何全局变量。函数作用域里的静态变量除外，毕竟它的初始化顺序是有明确定义的，而且只会在指令执行到它的声明那里才会发生。</p>\n<p>综上所述，我们只允许POD类型的静态变量，即<strong>完全禁用</strong><code>vector</code>(使用 C 数组替代) 和<code>string</code>(使用<code>const char []</code>)。</p>\n<h4 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ol>\n<li><code>cc</code>中的匿名命名空间可避免命名冲突, 限定作用域, 避免直接使用<code>using</code>关键字污染命名空间</li>\n<li>尽量不用全局函数和全局变量, 考虑作用域和命名空间限制, 尽量单独形成编译单元</li>\n<li>多线程中的全局变量 (含静态成员变量) 不要使用<code>class</code>类型(含 STL 容器), 避免不明确行为导致的 bug</li>\n<li>局部变量在声明的同时进行显式值初始化，比起隐式初始化再赋值的两步过程要高效</li>\n</ol>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><p>类是 C++ 中代码的基本单元. 显然, 它们被广泛使用. 本节列举了在写一个类时的主要注意事项.</p>\n<h4 id=\"构造函数的职责\"><a href=\"#构造函数的职责\" class=\"headerlink\" title=\"构造函数的职责\"></a>构造函数的职责</h4><ul>\n<li><p>总述</p>\n<p>  不要在构造函数中调用虚函数, 也不要在无法报出错误时进行可能失败的初始化.</p>\n</li>\n<li><p>定义</p>\n<p>  在构造函数中可以进行各种初始化操作.</p>\n</li>\n<li><p>优点</p>\n<ul>\n<li>无需考虑类是否被初始化</li>\n<li>经过构造函数完全初始化后的对象可以为<code>const</code>类型, 也能更方便地被标准容器或算法使用</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>如果在构造函数内调用了自身的虚函数, 这类调用是不会重定向到子类的虚函数实现. 即使当前没有子类化实现, 将来仍是隐患.</li>\n<li>如果执行失败, 会得到一个初始化失败的对象, 这个对象有可能进入不正常的状态, 必须使用<code>bool isValid()</code>或类似这样的机制才能检查出来, 然而这是一个十分容易被疏忽的方法.</li>\n<li>构造函数的地址是无法被取得的, 因此, 举例来说, 由构造函数完成的工作是无法以简单的方式交给其他线程的.</li>\n</ul>\n</li>\n<li><p>结论</p>\n<p>  构造函数不允许调用虚函数. 如果代码允许, 直接终止程序是一个合适的处理错误的方式. 否则, 考虑用<code>Init()</code>方法或工厂函数.</p>\n</li>\n</ul>\n<h4 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h4><ul>\n<li><p>总述</p>\n<p>  不要定义隐式类型转换. 对于转换运算符和单参数构造函数, 请使用<code>explicit</code>关键字.</p>\n</li>\n<li><p>定义</p>\n<p>  隐式类型转换允许一个某种类型 (称作 源类型) 的对象被用于需要另一种类型 (称作 目的类型) 的位置, 例如, 将一个<code>int</code>类型的参数传递给需要<code>double</code>类型的函数.</p>\n<p>  <code>explicit</code>关键字可以用于构造函数或 (在 C++11 引入) 类型转换运算符, 以保证只有当目的类型在调用点被显式写明时才能进行类型转换,例如使用<code>cast</code>. 这不仅作用于隐式类型转换, 还能作用于 C++11 的列表初始化语法:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> &#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">Foo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">double</span> y)</span></span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Func</span><span class=\"params\">(Foo f)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>  此时下面的代码是不允许的:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Func(&#123;<span class=\"number\">42</span>, <span class=\"number\">3.14</span>&#125;);  <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n<p>  这一代码从技术上说并非隐式类型转换, 但是语言标准认为这是<code>explicit</code>应当限制的行为.</p>\n</li>\n<li><p>优点</p>\n<ul>\n<li>有时目的类型名是一目了然的, 通过避免显式地写出类型名, 隐式类型转换可以让一个类型的可用性和表达性更强.</li>\n<li>隐式类型转换可以简单地取代函数重载.</li>\n<li>在初始化对象时, 列表初始化语法是一种简洁明了的写法.</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>隐式类型转换会隐藏类型不匹配的错误. 有时, 目的类型并不符合用户的期望, 甚至用户根本没有意识到发生了类型转换.</li>\n<li>隐式类型转换会让代码难以阅读, 尤其是在有函数重载的时候, 因为这时很难判断到底是哪个函数被调用.</li>\n<li>单参数构造函数有可能会被无意地用作隐式类型转换.</li>\n<li>如果单参数构造函数没有加上<code>explicit</code>关键字, 读者无法判断这一函数究竟是要作为隐式类型转换, 还是作者忘了加上<code>explicit</code>标记.</li>\n<li>并没有明确的方法用来判断哪个类应该提供类型转换, 这会使得代码变得含糊不清.</li>\n<li>如果目的类型是隐式指定的, 那么列表初始化会出现和隐式类型转换一样的问题, 尤其是在列表中只有一个元素的时候.</li>\n</ul>\n</li>\n<li><p>结论</p>\n<p>  在类型定义中, 类型转换运算符和单参数构造函数都应当用<code>explicit</code>进行标记. 一个例外是, 拷贝和移动构造函数不应当被标记为<code>explicit</code>, 因为它们并不执行类型转换.</p>\n<p>  不能以一个参数进行调用的构造函数不应当加上<code>explicit</code>. 接受一个<code>std::initializer_list</code>作为参数的构造函数也应当省略 <code>explicit</code>, 以便支持拷贝初始化 (例如<code>MyType m = {1, 2};</code>)</p>\n</li>\n</ul>\n<h4 id=\"可拷贝类型和可移动类型\"><a href=\"#可拷贝类型和可移动类型\" class=\"headerlink\" title=\"可拷贝类型和可移动类型\"></a>可拷贝类型和可移动类型</h4><ul>\n<li><p>总述</p>\n<p>  如果你的类型需要, 就让它们支持拷贝 / 移动. 否则, 就把隐式产生的拷贝和移动函数禁用.</p>\n</li>\n<li><p>定义</p>\n<p>  可拷贝类型允许对象在初始化时得到来自相同类型的另一对象的值, 或在赋值时被赋予相同类型的另一对象的值, 同时不改变源对象的值. 对于用户定义的类型, 拷贝操作一般通过拷贝构造函数与拷贝赋值操作符定义. <code>string</code>类型就是一个可拷贝类型的例子.</p>\n<p>  可移动类型允许对象在初始化时得到来自相同类型的临时对象的值, 或在赋值时被赋予相同类型的临时对象的值 (因此所有可拷贝对象也是可移动的). <code>std::unique_ptr&lt;int&gt;</code>就是一个可移动但不可复制的对象的例子. 对于用户定义的类型, 移动操作一般是通过移动构造函数和移动赋值操作符实现的.</p>\n<p>  拷贝 / 移动构造函数在某些情况下会被编译器隐式调用. 例如, 通过传值的方式传递对象.</p>\n</li>\n<li><p>优点</p>\n<p>  可移动及可拷贝类型的对象可以通过传值的方式进行传递或者返回, 这使得 API 更简单, 更安全也更通用. 与传指针和引用不同, 这样的传递不会造成所有权, 生命周期, 可变性等方面的混乱, 也就没必要在协议中予以明确. 这同时也防止了客户端与实现在非作用域内的交互, 使得它们更容易被理解与维护. 这样的对象可以和需要传值操作的通用 API 一起使用, 例如大多数容器.</p>\n<p>  拷贝 / 移动构造函数与赋值操作一般来说要比它们的各种替代方案, 比如<code>Clone()</code>, <code>CopyFrom()</code> or <code>Swap()</code>, 更容易定义, 因为它们能通过编译器产生, 无论是隐式的还是通过<code>= default</code>. 这种方式很简洁, 也保证所有数据成员都会被复制. 拷贝与移动构造函数一般也更高效, 因为它们不需要堆的分配或者是单独的初始化和赋值步骤, 同时,对于类似省略不必要的拷贝这样的优化它们也更加合适.</p>\n<p>  移动操作允许隐式且高效地将源数据转移出右值对象. 这有时能让代码风格更加清晰.</p>\n</li>\n<li><p>缺点</p>\n<p>  许多类型都不需要拷贝, 为它们提供拷贝操作会让人迷惑, 也显得荒谬而不合理. 单件类型(<code>Registerer</code>), 与特定的作用域相关的类型 (<code>Cleanup</code>), 与其他对象实体紧耦合的类型 (<code>Mutex</code>) 从逻辑上来说都不应该提供拷贝操作. 为基类提供拷贝 / 赋值操作是有害的, 因为在使用它们时会造成对象切割. 默认的或者随意的拷贝操作实现可能是不正确的, 这往往导致令人困惑并且难以诊断出的错误.</p>\n<p>  拷贝构造函数是隐式调用的, 也就是说, 这些调用很容易被忽略. 这会让人迷惑, 尤其是对那些所用的语言约定或强制要求传引用的程序员来说更是如此. 同时, 这从一定程度上说会鼓励过度拷贝, 从而导致性能上的问题.</p>\n</li>\n<li><p>结论</p>\n<p>  如果需要就让你的类型可拷贝 / 可移动. 作为一个经验法则, 如果对于你的用户来说这个拷贝操作不是一眼就能看出来的, 那就不要把类型设置为可拷贝. 如果让类型可拷贝, 一定要同时给出拷贝构造函数和赋值操作的定义, 反之亦然. 如果让类型可拷贝, 同时移动操作的效率高于拷贝操作, 那么就把移动的两个操作 (移动构造函数和赋值操作) 也给出定义. 如果类型不可拷贝, 但是移动操作的正确性对用户显然可见, 那么把这个类型设置为只可移动并定义移动的两个操作.</p>\n<p>  如果定义了拷贝/移动操作, 则要保证这些操作的默认实现是正确的. 记得时刻检查默认操作的正确性, 并且在文档中说明类是可拷贝的且/或可移动的.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Foo(Foo&amp;&amp; other) : field_(other.field) &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 差, 只定义了移动构造函数, 而没有定义对应的赋值运算符.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Field field_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>  由于存在对象切割的风险, 不要为任何有可能有派生类的对象提供赋值操作或者拷贝 / 移动构造函数 (当然也不要继承有这样的成员函数的类). 如果你的基类需要可复制属性, 请提供一个<code>public virtual Clone()</code>和一个<code>protected</code>的拷贝构造函数以供派生类实现.</p>\n<p>  如果你的类不需要拷贝 / 移动操作, 请显式地通过在<code>public</code>域中使用<code>= delete</code>或其他手段禁用之.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyClass is neither copyable nor movable.</span></span><br><span class=\"line\">MyClass(<span class=\"keyword\">const</span> MyClass&amp;) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">MyClass&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> MyClass&amp;) = <span class=\"keyword\">delete</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"结构体-VS-类\"><a href=\"#结构体-VS-类\" class=\"headerlink\" title=\"结构体 VS 类\"></a>结构体 VS 类</h4><ul>\n<li><p>总述</p>\n<p>  仅当只有数据成员时使用<code>struct</code>, 其它一概使用<code>class</code>.</p>\n</li>\n<li><p>说明</p>\n<p>  在 C++ 中<code>struct</code>和<code>class</code>关键字几乎含义一样. 我们为这两个关键字添加我们自己的语义理解, 以便为定义的数据类型选择合适的关键字.</p>\n<p>  <code>struct</code>用来定义包含数据的被动式对象, 也可以包含相关的常量, 但除了存取数据成员之外, 没有别的函数功能. 并且存取功能是通过直接访问位域, 而非函数调用. 除了构造函数, 析构函数, <code>Initialize()</code>, <code>Reset()</code>, <code>Validate()</code> 等类似的用于设定数据成员的函数外, 不能提供其它功能的函数.</p>\n<p>  如果需要更多的函数功能, <code>class</code>更适合. 如果拿不准, 就用 <code>class</code>.</p>\n<p>  为了和STL保持一致, 对于仿函数等特性可以不用<code>class</code>而是使用<code>struct</code>.</p>\n<p>  注意: 类和结构体的成员变量使用不同的命名规则.</p>\n</li>\n</ul>\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><ul>\n<li><p>总述</p>\n<p>  使用组合常常比使用继承更合理. 如果使用继承的话, 定义为 public 继承.</p>\n</li>\n<li><p>定义</p>\n<p>  当子类继承基类时, 子类包含了父基类所有数据及操作的定义. C++ 实践中, 继承主要用于两种场合: 实现继承, 子类继承父类的实现代码; 接口继承, 子类仅继承父类的方法名称.</p>\n</li>\n<li><p>优点</p>\n<p>  实现继承通过原封不动的复用基类代码减少了代码量. 由于继承是在编译时声明, 程序员和编译器都可以理解相应操作并发现错误. 从编程角度而言, 接口继承是用来强制类输出特定的 API. 在类没有实现 API 中某个必须的方法时, 编译器同样会发现并报告错误.</p>\n</li>\n<li><p>缺点</p>\n<p>  对于实现继承, 由于子类的实现代码散布在父类和子类间之间, 要理解其实现变得更加困难. 子类不能重写父类的非虚函数, 当然也就不能修改其实现. 基类也可能定义了一些数据成员, 因此还必须区分基类的实际布局.</p>\n</li>\n<li><p>结论</p>\n<p>  所有继承必须是<code>public</code>的. 如果你想使用私有继承, 你应该替换成把基类的实例作为成员对象的方式.</p>\n<p>  不要过度使用实现继承. 组合常常更合适一些. 尽量做到只在 “是一个” (“is-a”, 其他 “has-a” 情况下请使用组合) 的情况下使用继承: 如果<code>Bar</code>的确 “是一种” <code>Foo</code>, <code>Bar</code>才能继承<code>Foo</code>.</p>\n<p>  必要的话, 析构函数声明为<code>virtual</code>. 如果你的类有虚函数, 则析构函数也应该为虚函数.</p>\n<p>  对于可能被子类访问的成员函数, 不要过度使用<code>protected</code>关键字. 注意, 数据成员都必须是<strong>私有的</strong>.</p>\n<p>  对于重载的虚函数或虚析构函数, 使用<code>override</code>, 或 (较不常用的)<code>final</code>关键字显式地进行标记. 较早 (早于 C++11) 的代码可能会使用<code>virtual</code>关键字作为不得已的选项. 因此, 在声明重载时, 请使用 <code>override</code>, <code>final</code>或<code>virtual</code>的其中之一进行标记. 标记为<code>override</code>或<code>final</code>的析构函数如果不是对基类虚函数的重载的话, 编译会报错, 这有助于捕获常见的错误. 这些标记起到了文档的作用, 因为如果省略这些关键字, 代码阅读者不得不检查所有父类, 以判断该函数是否是虚函数.</p>\n</li>\n</ul>\n<h4 id=\"多重继承\"><a href=\"#多重继承\" class=\"headerlink\" title=\"多重继承\"></a>多重继承</h4><ul>\n<li><p>总述</p>\n<p>  真正需要用到多重实现继承的情况少之又少. 只在以下情况我们才允许多重继承: 最多只有一个基类是非抽象类; 其它基类都是以<code>Interface</code>为后缀的纯接口类.</p>\n</li>\n<li><p>定义</p>\n<p>  多重继承允许子类拥有多个基类. 要将作为<em>纯接口</em>的基类和具有<em>实现</em>的基类区别开来.</p>\n</li>\n<li><p>优点</p>\n<p>  相比单继承, 多重实现继承可以复用更多的代码.</p>\n</li>\n<li><p>缺点</p>\n<p>  真正需要用到多重 实现 继承的情况少之又少. 有时多重实现继承看上去是不错的解决方案, 但这时你通常也可以找到一个更明确, 更清晰的不同解决方案.</p>\n</li>\n<li><p>结论</p>\n<p>  只有当所有父类除第一个外都是<em>纯接口类</em>时, 才允许使用多重继承. 为确保它们是纯接口, 这些类必须以<code>Interface</code>为后缀.</p>\n</li>\n</ul>\n<h4 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h4><ul>\n<li><p>总述</p>\n<p>  接口是指满足特定条件的类, 这些类以<code>Interface</code>为后缀 (不强制).</p>\n</li>\n<li><p>定义</p>\n<p>  当一个类满足以下要求时, 称之为纯接口:</p>\n<ul>\n<li>只有纯虚函数 (“<code>=0</code>”) 和静态函数 (除了下文提到的析构函数).</li>\n<li>没有非静态数据成员.</li>\n<li>没有定义任何构造函数. 如果有, 也不能带有参数, 并且必须为<code>protected</code>.</li>\n<li><p>如果它是一个子类, 也只能从满足上述条件并以<code>Interface</code>为后缀的类继承.</p>\n<p>接口类不能被直接实例化, 因为它声明了纯虚函数. 为确保接口类的所有实现可被正确销毁, 必须为之声明虚析构函数</p>\n</li>\n</ul>\n</li>\n<li><p>优点</p>\n<p>  以<code>Interface</code>为后缀可以提醒其他人不要为该接口类增加函数实现或非静态数据成员. 这一点对于<code>多重继承</code>尤其重要.</p>\n</li>\n<li><p>缺点</p>\n<p>  <code>Interface</code>后缀增加了类名长度, 为阅读和理解带来不便. 同时, 接口属性作为实现细节不应暴露给用户.</p>\n</li>\n<li><p>结论</p>\n<p>  只有在满足上述条件时, 类才以<code>Interface</code>结尾, 但反过来, 满足上述需要的类未必一定以<code>Interface</code>结尾.</p>\n</li>\n</ul>\n<h4 id=\"运算符重载\"><a href=\"#运算符重载\" class=\"headerlink\" title=\"运算符重载\"></a>运算符重载</h4><ul>\n<li><p>总述</p>\n<p>  除少数特定环境外, 不要重载运算符. 也不要创建用户定义字面量.</p>\n</li>\n<li><p>定义</p>\n<p>  C++ 允许用户通过使用<code>operator</code>关键字对内建运算符进行重载定义, 只要其中一个参数是用户定义的类型. <code>operator</code>关键字还允许用户使用<code>operator&quot;&quot;</code>定义新的字面运算符, 并且定义类型转换函数, 例如<code>operator bool()</code>.</p>\n</li>\n<li><p>优点</p>\n<p>  重载运算符可以让代码更简洁易懂, 也使得用户定义的类型和内建类型拥有相似的行为. 重载运算符对于某些运算来说是符合符合语言习惯的名称 (例如<code>==</code>,<code>&lt;</code>,<code>=</code>,<code>&lt;&lt;</code>), 遵循这些语言约定可以让用户定义的类型更易读, 也能更好地和需要这些重载运算符的函数库进行交互操作.</p>\n<p>  对于创建用户定义的类型的对象来说, 用户定义字面量是一种非常简洁的标记.</p>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>要提供正确, 一致, 不出现异常行为的操作符运算需要花费不少精力, 而且如果达不到这些要求的话, 会导致令人迷惑的 Bug.</li>\n<li>过度使用运算符会带来难以理解的代码, 尤其是在重载的操作符的语义与通常的约定不符合时.</li>\n<li>函数重载有多少弊端, 运算符重载就至少有多少.</li>\n<li>运算符重载会混淆视听, 让你误以为一些耗时的操作和操作内建类型一样轻巧.</li>\n<li>对重载运算符的调用点的查找需要的可就不仅仅是像 grep 那样的程序了, 这时需要能够理解 C++ 语法的搜索工具.</li>\n<li>重载某些运算符本身就是有害的. 例如, 重载一元运算符 &amp; 会导致同样的代码有完全不同的含义, 这取决于重载的声明对某段代码而言是否是可见的. 重载诸如<code>&amp;&amp;</code>,<code>||</code>和<code>,</code> 会导致运算顺序和内建运算的顺序不一致.</li>\n</ul>\n</li>\n<li><p>结论</p>\n<p>  只有在意义明显, 不会出现奇怪的行为并且与对应的内建运算符的行为一致时才定义重载运算符. 例如, | 要作为位或或逻辑或来使用, 而不是作为 shell 中的管道.</p>\n<p>  只有对用户自己定义的类型重载运算符. 更准确地说, 将它们和它们所操作的类型定义在同一个头文件中, <code>.cc</code>中和命名空间中. 这样做无论类型在哪里都能够使用定义的运算符, 并且最大程度上避免了多重定义的风险. 如果可能的话, 请避免将运算符定义为模板, 因为此时它们必须对任何模板参数都能够作用. 如果你定义了一个运算符, 请将其相关且有意义的运算符都进行定义, 并且保证这些定义的语义是一致的. 例如, 如果你重载了<code>&lt;</code>, 那么请将所有的比较运算符都进行重载, 并且保证对于同一组参数,<code>&lt;</code>和<code>&gt;</code>不会同时返回<code>true</code>.</p>\n<p>  不要为了避免重载操作符而走极端. 比如说, 应当定义<code>==</code>,<code>=</code>,和<code>&lt;&lt;</code>而不是<code>Equals()</code>,<code>CopyFrom()</code>和<code>PrintTo()</code>. 反过来说, 不要只是为了满足函数库需要而去定义运算符重载. 比如说, 如果你的类型没有自然顺序, 而你要将它们存入<code>std::set</code>中, 最好还是定义一个自定义的比较运算符而不是重载<code>&lt;</code>.</p>\n<p>  不要重载<code>&amp;&amp;</code>,<code>||</code>,<code>,</code>或一元运算符<code>&amp;</code>. 不要重载<code>operator&quot;&quot;</code>, 也就是说, 不要引入用户定义字面量.</p>\n</li>\n</ul>\n<h4 id=\"存取控制\"><a href=\"#存取控制\" class=\"headerlink\" title=\"存取控制\"></a>存取控制</h4><ul>\n<li><p>总述</p>\n<p>  将<em>所有</em>数据成员声明为<code>private</code>, 除非是<code>static const</code>类型成员 (遵循 常量命名规则). 处于技术上的原因, 在使用<code>Google Test</code>时我们允许测试固件类中的数据成员为<code>protected</code>.</p>\n</li>\n</ul>\n<h4 id=\"声明顺序\"><a href=\"#声明顺序\" class=\"headerlink\" title=\"声明顺序\"></a>声明顺序</h4><ul>\n<li><p>总述</p>\n<p>  将相似的声明放在一起, 将<code>public</code>部分放在最前.</p>\n</li>\n<li><p>说明</p>\n<p>  类定义一般应以<code>public:</code>开始, 后跟<code>protected:</code>, 最后是<code>private:</code>. 省略空部分.</p>\n<p>  在各个部分中, 建议将类似的声明放在一起, 并且建议以如下的顺序: 类型 (包括<code>typedef</code>,<code>using</code>和嵌套的结构体与类), 常量, 工厂函数, 构造函数, 赋值运算符, 析构函数, 其它函数, 数据成员.</p>\n<p>  不要将大段的函数定义内联在类定义中. 通常，只有那些普通的, 或性能关键且短小的函数可以内联在类定义中. 参见 内联函数 一节.</p>\n</li>\n</ul>\n<h4 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ol>\n<li>不在构造函数中做太多逻辑相关的初始化</li>\n<li>编译器提供的默认构造函数不会对变量进行初始化, 如果定义了其他构造函数, 编译器不再提供, 需要编码者自行提供默认构造函数</li>\n<li>为避免隐式转换, 需将单参数构造函数声明为<code>explicit</code></li>\n<li>为避免拷贝构造函数, 赋值操作的滥用和编译器自动生成, 可将其声明为<code>private</code>且无需实现</li>\n<li>仅在作为数据集合时使用<code>struct</code></li>\n<li>组合 &gt; 实现继承 &gt; 接口继承 &gt; 私有继承, 子类重载的虚函数也要声明<code>virtual</code>关键字, 虽然编译器允许不这样做</li>\n<li>避免使用多重继承, 使用时, 除一个基类含有实现外, 其他基类均为纯接口</li>\n<li>接口类类名以<code>Interface</code>为后缀, 除提供带实现的虚析构函数, 静态成员函数外, 其他均为纯虚函数, 不定义非静态数据成员, 不提供构造函数, 提供的话, 声明为<code>protected</code></li>\n<li>为降低复杂性, 尽量不重载操作符, 模板, 标准类中使用时提供文档说明</li>\n<li>存取函数一般内联在头文件中</li>\n<li>声明次序:<code>public</code> -&gt; <code>protected</code> -&gt; <code>private</code></li>\n<li>函数体尽量短小, 紧凑, 功能单一</li>\n</ol>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h4 id=\"参数顺序\"><a href=\"#参数顺序\" class=\"headerlink\" title=\"参数顺序\"></a>参数顺序</h4><ul>\n<li><p>总述</p>\n<p>  函数的参数顺序为: 输入参数在先, 后跟输出参数.</p>\n</li>\n<li><p>说明</p>\n<p>  C/C++ 中的函数参数或者是函数的输入, 或者是函数的输出, 或兼而有之. 输入参数通常是值参或<code>const</code>引用, 输出参数或输入/输出参数则一般为非<code>const</code>指针. 在排列参数顺序时, 将所有的输入参数置于输出参数之前. 特别要注意, 在加入新参数时不要因为它们是新参数就置于参数列表最后, 而是仍然要按照前述的规则, 即将新的输入参数也置于输出参数之前.</p>\n<p>  这并非一个硬性规定. 输入/输出参数 (通常是类或结构体) 让这个问题变得复杂. 并且, 有时候为了其他函数保持一致, 你可能不得不有所变通.</p>\n</li>\n</ul>\n<h4 id=\"编写简短函数\"><a href=\"#编写简短函数\" class=\"headerlink\" title=\"编写简短函数\"></a>编写简短函数</h4><ul>\n<li><p>总述</p>\n<p>  我们倾向于编写简短, 凝练的函数.</p>\n</li>\n<li><p>说明</p>\n<p>  我们承认长函数有时是合理的, 因此并不硬性限制函数的长度. 如果函数超过<code>40</code>行, 可以思索一下能不能在不影响程序结构的前提下对其进行分割.</p>\n<p>  即使一个长函数现在工作的非常好, 一旦有人对其修改, 有可能出现新的问题, 甚至导致难以发现的 bug. 使函数尽量简短,以便于他人阅读和修改代码.</p>\n<p>  在处理代码时, 你可能会发现复杂的长函数. 不要害怕修改现有代码: 如果证实这些代码使用/调试起来很困难, 或者你只需要使用其中的一小段代码, 考虑将其分割为更加简短并易于管理的若干函数.</p>\n</li>\n</ul>\n<h4 id=\"引用参数\"><a href=\"#引用参数\" class=\"headerlink\" title=\"引用参数\"></a>引用参数</h4><ul>\n<li><p>总述</p>\n<p>  所有按引用传递的参数必须加上<code>const</code>.</p>\n</li>\n<li><p>定义</p>\n<p>  在 C 语言中, 如果函数需要修改变量的值, 参数必须为指针, 如<code>int foo(int *pval)</code>. 在 C++ 中, 函数还可以声明为引用参数: <code>int foo(int &amp;val)</code>.</p>\n</li>\n<li><p>优点</p>\n<p>  定义引用参数可以防止出现<code>(*pval)++</code>这样丑陋的代码. 引用参数对于拷贝构造函数这样的应用也是必需的. 同时也更明确地不接受空指针.</p>\n</li>\n<li><p>缺点</p>\n<p>  容易引起误解, 因为引用在语法上是值变量却拥有指针的语义.</p>\n</li>\n<li><p>结论</p>\n<p>  函数参数列表中, 所有引用参数都必须是<code>const</code>:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;in, <span class=\"built_in\">string</span> *out)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>  事实上这在Google Code是一个硬性约定: 输入参数是值参或<code>const</code>引用, 输出参数为指针. 输入参数可以是<code>const</code>指针, 但决不能是非<code>const</code>的引用参数, 除非特殊要求, 比如 swap().</p>\n<p>  有时候, 在输入形参中用<code>const T*</code>指针比<code>const T&amp;</code>更明智. 比如:</p>\n<ul>\n<li>可能会传递空指针.</li>\n<li><p>函数要把指针或对地址的引用赋值给输入形参.</p>\n<p>总而言之, 大多时候输入形参往往是<code>const T&amp;</code>. 若用<code>const T*</code>则说明输入另有处理. 所以若要使用<code>const T*</code>, 则应给出相应的理由, 否则会使得读者感到迷惑.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h4><ul>\n<li><p>总述</p>\n<p>  若要使用函数重载, 则必须能让读者一看调用点就胸有成竹, 而不用花心思猜测调用的重载函数到底是哪一种. 这一规则也适用于构造函数.</p>\n</li>\n<li><p>定义</p>\n<p>  你可以编写一个参数类型为<code>const string&amp;</code>的函数, 然后用另一个参数类型为<code>const char*</code>的函数对其进行重载:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Analyze</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;text)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Analyze</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *text, <span class=\"keyword\">size_t</span> textlen)</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>优点</p>\n<p>  通过重载参数不同的同名函数, 可以令代码更加直观. 模板化代码需要重载, 这同时也能为使用者带来便利.</p>\n</li>\n<li><p>缺点</p>\n<p>  如果函数单靠不同的参数类型而重载, 读者就得十分熟悉 C++ 五花八门的匹配规则, 以了解匹配过程具体到底如何. 另外, 如果派生类只重载了某个函数的部分变体, 继承语义就容易令人困惑.</p>\n</li>\n<li><p>结论</p>\n<p>  如果打算重载一个函数, 可以试试改在函数名里加上参数信息. 例如, 用<code>AppendString()</code>和<code>AppendInt()</code>等, 而不是一口气重载多个<code>Append()</code>. 如果重载函数的目的是为了支持不同数量的同一类型参数, 则优先考虑使用<code>std::vector</code>以便使用者可以用 列表初始化 指定参数.</p>\n</li>\n</ul>\n<h4 id=\"缺省参数\"><a href=\"#缺省参数\" class=\"headerlink\" title=\"缺省参数\"></a>缺省参数</h4><ul>\n<li><p>总述</p>\n<p>  只允许在非虚函数中使用缺省参数, 且必须保证缺省参数的值始终一致. 缺省参数与 函数重载 遵循同样的规则. 一般情况下建议使用函数重载, 尤其是在缺省函数带来的可读性提升不能弥补下文中所提到的缺点的情况下.</p>\n</li>\n<li><p>优点</p>\n<p>  有些函数一般情况下使用默认参数, 但有时需要又使用非默认的参数. 缺省参数为这样的情形提供了便利, 使程序员不需要为了极少的例外情况编写大量的函数. 和函数重载相比, 缺省参数的语法更简洁明了, 减少了大量的样板代码, 也更好地区别了 “必要参数” 和 “可选参数”.</p>\n</li>\n<li><p>缺点</p>\n<p>  缺省参数实际上是函数重载语义的另一种实现方式, 因此所有 不应当使用函数重载的理由 也都适用于缺省参数.</p>\n<p>  虚函数调用的缺省参数取决于目标对象的静态类型, 此时无法保证给定函数的所有重载声明的都是同样的缺省参数.</p>\n<p>  缺省参数是在每个调用点都要进行重新求值的, 这会造成生成的代码迅速膨胀. 作为读者, 一般来说也更希望缺省的参数在声明时就已经被固定了, 而不是在每次调用时都可能会有不同的取值.</p>\n<p>  缺省参数会干扰函数指针, 导致函数签名与调用点的签名不一致. 而函数重载不会导致这样的问题.</p>\n</li>\n<li><p>结论</p>\n<p>  对于虚函数, 不允许使用缺省参数, 因为在虚函数中缺省参数不一定能正常工作. 如果在每个调用点缺省参数的值都有可能不同, 在这种情况下缺省函数也不允许使用. (例如, 不要写像<code>void f(int n = counter++);</code> 这样的代码.)</p>\n<p>  在其他情况下, 如果缺省参数对可读性的提升远远超过了以上提及的缺点的话, 可以使用缺省参数. 如果仍有疑惑, 就使用函数重载.</p>\n</li>\n</ul>\n<h2 id=\"来自Google的奇技\"><a href=\"#来自Google的奇技\" class=\"headerlink\" title=\"来自Google的奇技\"></a>来自Google的奇技</h2><p>Google 用了很多自己实现的技巧 / 工具使 C++ 代码更加健壮, 我们使用 C++ 的方式可能和你在其它地方见到的有所不同.</p>\n<h4 id=\"所有权与智能指针\"><a href=\"#所有权与智能指针\" class=\"headerlink\" title=\"所有权与智能指针\"></a>所有权与智能指针</h4><ul>\n<li><p>总述</p>\n<p>  动态分配出的对象最好有单一且固定的所有主, 并通过智能指针传递所有权.</p>\n</li>\n<li><p>定义</p>\n<p>  所有权是一种登记／管理动态内存和其它资源的技术. 动态分配对象的所有主是一个对象或函数, 后者负责确保当前者无用时就自动销毁前者. 所有权有时可以共享, 此时就由最后一个所有主来负责销毁它. 甚至也可以不用共享, 在代码中直接把所有权传递给其它对象.</p>\n<p>  智能指针是一个通过重载<code>*</code>和<code>-&gt;</code>运算符以表现得如指针一样的类. 智能指针类型被用来自动化所有权的登记工作, 来确保执行销毁义务到位.<code>std::unique_ptr</code>是 C++11 新推出的一种智能指针类型, 用来表示动态分配出的对象的独一无二的所有权; 当<code>std::unique_ptr</code>离开作用域时, 对象就会被销毁.<code>std::unique_ptr</code>不能被复制, 但可以把它移动（move）给新所有主.<code>std::shared_ptr</code>同样表示动态分配对象的所有权, 但可以被共享, 也可以被复制; 对象的所有权由所有复制者共同拥有, 最后一个复制者被销毁时, 对象也会随着被销毁.</p>\n</li>\n<li><p>优点</p>\n<ul>\n<li>如果没有清晰、逻辑条理的所有权安排, 不可能管理好动态分配的内存.</li>\n<li>传递对象的所有权, 开销比复制来得小, 如果可以复制的话.</li>\n<li>传递所有权也比”借用”指针或引用来得简单, 毕竟它大大省去了两个用户一起协调对象生命周期的工作.</li>\n<li>如果所有权逻辑条理, 有文档且不紊乱的话, 可读性会有很大提升.</li>\n<li>可以不用手动完成所有权的登记工作, 大大简化了代码, 也免去了一大波错误之恼.</li>\n<li>对于 const 对象来说, 智能指针简单易用, 也比深度复制高效.</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>不得不用指针（不管是智能的还是原生的）来表示和传递所有权. 指针语义可要比值语义复杂得许多了, 特别是在 API 里：这时不光要操心所有权, 还要顾及别名, 生命周期, 可变性以及其它大大小小的问题.</li>\n<li>其实值语义的开销经常被高估, 所以所有权传递带来的性能提升不一定能弥补可读性和复杂度的损失.</li>\n<li>如果 API 依赖所有权的传递, 就会害得客户端不得不用单一的内存管理模型.</li>\n<li>如果使用智能指针, 那么资源释放发生的位置就会变得不那么明显.</li>\n<li><code>std::unique_ptr</code>的所有权传递原理是 C++11 的 move 语法, 后者毕竟是刚刚推出的, 容易迷惑程序员.</li>\n<li>如果原本的所有权设计已经够完善了, 那么若要引入所有权共享机制, 可能不得不重构整个系统.</li>\n<li>所有权共享机制的登记工作在运行时进行, 开销可能相当大.</li>\n<li>某些极端情况下 (例如循环引用), 所有权被共享的对象永远不会被销毁.</li>\n<li>智能指针并不能够完全代替原生指针.</li>\n</ul>\n</li>\n<li><p>结论</p>\n<p>  如果必须使用动态分配, 那么更倾向于将所有权保持在分配者手中. 如果其他地方要使用这个对象, 最好传递它的拷贝, 或者传递一个不用改变所有权的指针或引用. 倾向于使用<code>std::unique_ptr</code>来明确所有权传递, 例如：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Foo&gt; FooFactory();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FooConsumer</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Foo&gt; ptr)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>  如果没有很好的理由, 则不要使用共享所有权. 这里的理由可以是为了避免开销昂贵的拷贝操作, 但是只有当性能提升非常明显, 并且操作的对象是不可变的（比如说<code>std::shared_ptr&lt;const Foo&gt;</code>）时候, 才能这么做. 如果确实要使用共享所有权, 建议于使用<code>std::shared_ptr</code>.</p>\n<p>  不要使用<code>std::auto_ptr</code>, 使用<code>std::unique_ptr</code>代替它.</p>\n</li>\n</ul>\n<h4 id=\"Cpplint\"><a href=\"#Cpplint\" class=\"headerlink\" title=\"Cpplint\"></a>Cpplint</h4><ul>\n<li><p>总述</p>\n<p>  使用<code>cpplint.py</code>检查风格错误.</p>\n</li>\n<li><p>说明</p>\n<p>  <code>cpplint.py</code>是一个用来分析源文件, 能检查出多种风格错误的工具. 它不并完美, 甚至还会漏报和误报, 但它仍然是一个非常有用的工具. 在行尾加<code>// NOLINT</code>, 或在上一行加<code>// NOLINTNEXTLINE</code>, 可以忽略报错.</p>\n<p>  某些项目会指导你如何使用他们的项目工具运行<code>cpplint.py</code>. 如果你参与的项目没有提供, 你可以单独下载<code>cpplint.py</code>.</p>\n</li>\n</ul>\n<h2 id=\"其他C-特性\"><a href=\"#其他C-特性\" class=\"headerlink\" title=\"其他C++特性\"></a>其他C++特性</h2><h4 id=\"引用参数-1\"><a href=\"#引用参数-1\" class=\"headerlink\" title=\"引用参数\"></a>引用参数</h4><blockquote>\n<p>Tip: 所有按引用传递的参数<strong>必须</strong>加上<code>const</code>.</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  在 C 语言中, 如果函数需要修改变量的值, 参数必须为指针, 如<code>int foo(int *pval)</code>. 在 C++ 中, 函数还可以声明引用参数:<code>int foo(int &amp;val)</code>.</p>\n</li>\n<li><p>优点</p>\n<p>  定义引用参数防止出现<code>(*pval)++</code>这样丑陋的代码. 像拷贝构造函数这样的应用也是必需的. 而且更明确, 不接受<code>NULL</code>指针.</p>\n</li>\n<li><p>缺点</p>\n<p>  容易引起误解, 因为引用在语法上是值变量却拥有指针的语义.</p>\n</li>\n<li><p>结论</p>\n<p>  函数参数列表中, 所有引用参数都必须是<code>const</code>:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;in, <span class=\"built_in\">string</span> *out)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>  事实上这在 Google Code 是一个硬性约定: 输入参数是值参或<code>const</code>引用, 输出参数为指针. 输入参数可以是<code>const</code>指针, 但决不能是非<code>const</code>的引用参数，除非用于交换，比如<code>swap()</code>.</p>\n<p>  有时候，在输入形参中用<code>const T*</code>指针比<code>const T&amp;</code>更明智。比如：</p>\n<pre><code>- 您会传 null 指针。\n- 函数要把指针或对地址的引用赋值给输入形参。\n</code></pre><p>  总之大多时候输入形参往往是<code>const T&amp;</code>. 若用<code>const T*</code>说明输入另有处理。所以若您要用 <code>const T*</code>, 则应有理有据，否则会害得读者误解。</p>\n</li>\n</ul>\n<h4 id=\"右值引用\"><a href=\"#右值引用\" class=\"headerlink\" title=\"右值引用\"></a>右值引用</h4><blockquote>\n<p>Tip: 只在定义移动构造函数与移动赋值操作时使用右值引用. 不要使用<code>std::forward</code>.</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  右值引用是一种只能绑定到临时对象的引用的一种, 其语法与传统的引用语法相似. 例如,<code>void f(string&amp;&amp; s)</code>; 声明了一个其参数是一个字符串的右值引用的函数.</p>\n</li>\n<li><p>优点</p>\n<p>  用于定义移动构造函数 (使用类的右值引用进行构造的函数) 使得移动一个值而非拷贝之成为可能. 例如, 如果<code>v1</code>是一个<code>vector&lt;string&gt;</code>, 则<code>auto v2(std::move(v1))</code>将很可能不再进行大量的数据复制而只是简单地进行指针操作, 在某些情况下这将带来大幅度的性能提升.</p>\n</li>\n<li><p>缺点</p>\n<p>  右值引用是一个相对比较新的特性 (由 C++11 引入), 它尚未被广泛理解. 类似引用崩溃, 移动构造函数的自动推导这样的规则都是很复杂的.</p>\n</li>\n<li><p>结论</p>\n<p>  只在定义移动构造函数与移动赋值操作时使用右值引用, 不要使用<code>std::forward</code>功能函数. 你可能会使用<code>std::move</code>来表示将值从一个对象移动而不是复制到另一个对象.</p>\n</li>\n</ul>\n<h4 id=\"函数重载-1\"><a href=\"#函数重载-1\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h4><blockquote>\n<p>Tip: 若要用好函数重载，最好能让读者一看调用点（call site）就胸有成竹，不用花心思猜测调用的重载函数到底是哪一种。该规则适用于构造函数。</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  你可以编写一个参数类型为<code>const string&amp;</code>的函数, 然后用另一个参数类型为<code>const char*</code>的函数重载它:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Analyze</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;text)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Analyze</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *text, <span class=\"keyword\">size_t</span> textlen)</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>优点</p>\n<p>  通过重载参数不同的同名函数, 令代码更加直观. 模板化代码需要重载, 同时为使用者带来便利.</p>\n</li>\n<li><p>缺点</p>\n<p>  如果函数单单靠不同的参数类型而重载，读者就得十分熟悉 C++ 五花八门的匹配规则，以了解匹配过程具体到底如何。另外，当派生类只重载了某个函数的部分变体，继承语义容易令人困惑。</p>\n</li>\n<li><p>结论</p>\n<p>  如果您打算重载一个函数, 可以试试改在函数名里加上参数信息。例如，用<code>AppendString()</code>和<code>AppendInt()</code>等， 而不是一口气重载多个<code>Append()</code>.</p>\n</li>\n</ul>\n<h4 id=\"缺省参数-1\"><a href=\"#缺省参数-1\" class=\"headerlink\" title=\"缺省参数\"></a>缺省参数</h4><blockquote>\n<p>Tip: 我们不允许使用缺省函数参数，少数极端情况除外。尽可能改用函数重载。</p>\n</blockquote>\n<ul>\n<li><p>优点</p>\n<p>  当您有依赖缺省参数的函数时，您也许偶尔会修改修改这些缺省参数。通过缺省参数，不用再为个别情况而特意定义一大堆函数了。与函数重载相比，缺省参数语法更为清晰，代码少，也很好地区分了「必选参数」和「可选参数」。</p>\n</li>\n<li><p>缺点</p>\n<p>  缺省参数会干扰函数指针，害得后者的函数签名（function signature）往往对不上所实际要调用的函数签名。即在一个现有函数添加缺省参数，就会改变它的类型，那么调用其地址的代码可能会出错，不过函数重载就没这问题了。此外，缺省参数会造成臃肿的代码，毕竟它们在每一个调用点（call site）都有重复。函数重载正好相反，毕竟它们所谓的「缺省参数」只会出现在函数定义里。</p>\n</li>\n<li><p>结论</p>\n<p>  由于缺点并不是很严重，有些人依旧偏爱缺省参数胜于函数重载。所以除了以下情况，我们要求必须显式提供所有参数。</p>\n<ol>\n<li>位于<code>.cc</code>文件里的静态函数或匿名空间函数，毕竟都只能在局部文件里调用该函数了</li>\n<li>可以在构造函数里用缺省参数，毕竟不可能取得它们的地址</li>\n<li>可以用来模拟变长数组</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"变长数组和alloca\"><a href=\"#变长数组和alloca\" class=\"headerlink\" title=\"变长数组和alloca()\"></a>变长数组和alloca()</h4><blockquote>\n<p>Tip: 我们不允许使用变长数组和<code>alloca()</code>.</p>\n</blockquote>\n<ul>\n<li><p>优点</p>\n<p>  变长数组具有浑然天成的语法. 变长数组和<code>alloca()</code>也都很高效.</p>\n</li>\n<li><p>缺点</p>\n<p>  变长数组和<code>alloca()</code>不是标准 C++ 的组成部分. 更重要的是, 它们根据数据大小动态分配堆栈内存, 会引起难以发现的内存越界 bugs: “在我的机器上运行的好好的, 发布后却莫名其妙的挂掉了”.</p>\n</li>\n<li><p>结论</p>\n<p>  改用更安全的分配器（allocator），就像<code>std::vector</code>或<code>std::unique_ptr&lt;T[]&gt;</code>.</p>\n</li>\n</ul>\n<h4 id=\"友元\"><a href=\"#友元\" class=\"headerlink\" title=\"友元\"></a>友元</h4><blockquote>\n<p>Tip: 我们允许合理的使用友元类及友元函数.</p>\n</blockquote>\n<p>通常友元应该定义在同一文件内, 避免代码读者跑到其它文件查找使用该私有成员的类. 经常用到友元的一个地方是将<code>FooBuilder</code>声明为<code>Foo</code>的友元, 以便<code>FooBuilder</code>正确构造 Foo 的内部状态, 而无需将该状态暴露出来. 某些情况下, 将一个单元测试类声明成待测类的友元会很方便.</p>\n<p>友元扩大了 (但没有打破) 类的封装边界. 某些情况下, 相对于将类成员声明为<code>public</code>, 使用友元是更好的选择, 尤其是如果你只允许另一个类访问该类的私有成员时. 当然, 大多数类都只应该通过其提供的公有成员进行互操作.</p>\n<h4 id=\"运行时类型识别\"><a href=\"#运行时类型识别\" class=\"headerlink\" title=\"运行时类型识别\"></a>运行时类型识别</h4><blockquote>\n<p>Tip: 禁止使用 RTTI(Run-Time Type Identification).</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  RTTI 允许程序员在运行时识别 C++ 类对象的类型. 它通过使用<code>typeid</code>或者<code>dynamic_cast</code>完成.</p>\n</li>\n<li><p>优点</p>\n<p>  RTTI 的标准替代 (下面将描述) 需要对有问题的类层级进行修改或重构. 有时这样的修改并不是我们所想要的, 甚至是不可取的, 尤其是在一个已经广泛使用的或者成熟的代码中.</p>\n<p>  RTTI 在某些单元测试中非常有用. 比如进行工厂类测试时, 用来验证一个新建对象是否为期望的动态类型. RTTI 对于管理对象和派生对象的关系也很有用.</p>\n<p>  在考虑多个抽象对象时 RTTI 也很好用. 例如:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> Base::Equal(Base* other) = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> Derived::Equal(Base* other) &#123;</span><br><span class=\"line\">Derived* that = <span class=\"keyword\">dynamic_cast</span>&lt;Derived*&gt;(other);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (that == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>缺点</p>\n<p>  在运行时判断类型通常意味着设计问题. 如果你需要在运行期间确定一个对象的类型, 这通常说明你需要考虑重新设计你的类.</p>\n<p>  随意地使用 RTTI 会使你的代码难以维护. 它使得基于类型的判断树或者 switch 语句散布在代码各处. 如果以后要进行修改, 你就必须检查它们.</p>\n</li>\n<li><p>结论</p>\n<p>  基于类型的判断树是一个很强的暗示, 它说明你的代码已经偏离正轨了. 不要像下面这样:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeid</span>(*data) == <span class=\"keyword\">typeid</span>(D1)) &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeid</span>(*data) == <span class=\"keyword\">typeid</span>(D2)) &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeid</span>(*data) == <span class=\"keyword\">typeid</span>(D3)) &#123;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>  一旦在类层级中加入新的子类, 像这样的代码往往会崩溃. 而且, 一旦某个子类的属性改变了, 你很难找到并修改所有受影响的代码块.</p>\n<p>  不要去手工实现一个类似 RTTI 的方案. 反对 RTTI 的理由同样适用于这些方案, 比如带类型标签的类继承体系. 而且, 这些方案会掩盖你的真实意图.</p>\n</li>\n</ul>\n<h4 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h4><blockquote>\n<p>Tip: 使用 C++ 的类型转换, 如<code>static_cast&lt;&gt;()</code>. 不要使用<code>int y = (int)x</code>或<code>int y = int(x)</code>等转换方式</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  C++ 采用了有别于 C 的类型转换机制, 对转换操作进行归类.</p>\n</li>\n<li><p>优点</p>\n<p>  C 语言的类型转换问题在于模棱两可的操作; 有时是在做强制转换 (如 <code>(int)3.5</code>), 有时是在做类型转换 (如 <code>(int)&quot;hello&quot;</code>). 另外, C++ 的类型转换在查找时更醒目.</p>\n</li>\n<li><p>结论</p>\n<p>  不要使用 C 风格类型转换. 而应该使用 C++ 风格.</p>\n<ul>\n<li>用<code>static_cast</code>替代 C 风格的值转换, 或某个类指针需要明确的向上转换为父类指针时.</li>\n<li>用<code>const_cast</code>去掉<code>const</code>限定符.</li>\n<li>用<code>reinterpret_cast</code>指针类型和整型或其它指针之间进行不安全的相互转换. 仅在你对所做一切了然于心时使用.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"流\"><a href=\"#流\" class=\"headerlink\" title=\"流\"></a>流</h4><blockquote>\n<p>Tip: 只在记录日志时使用流.</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  流用来替代<code>printf()</code>和<code>scanf()</code>.</p>\n</li>\n<li><p>优点</p>\n<p>  有了流, 在打印时不需要关心对象的类型. 不用担心格式化字符串与参数列表不匹配 (虽然在 gcc 中使用<code>printf</code>也不存在这个问题). 流的构造和析构函数会自动打开和关闭对应的文件.</p>\n</li>\n<li><p>缺点</p>\n<p>  流使得<code>pread()</code>等功能函数很难执行. 如果不使用<code>printf</code>风格的格式化字符串, 某些格式化操作 (尤其是常用的格式字符串 %.*s) 用流处理性能是很低的. 流不支持字符串操作符重新排序 (%1s), 而这一点对于软件国际化很有用.</p>\n</li>\n<li><p>结论</p>\n<p>  不要使用流, 除非是日志接口需要. 使用<code>printf</code>之类的代替.</p>\n<p>  使用流还有很多利弊, 但代码一致性胜过一切. 不要在代码中使用流.</p>\n</li>\n</ul>\n<h4 id=\"前置自增和自减减\"><a href=\"#前置自增和自减减\" class=\"headerlink\" title=\"前置自增和自减减\"></a>前置自增和自减减</h4><blockquote>\n<p>Tip: 对于迭代器和其他模板对象使用前缀形式<code>(++i)</code>的自增, 自减运算符.</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  对于变量在自增 (<code>++i</code>或<code>i++</code>) 或自减 (<code>--i</code>或<code>i--</code>) 后表达式的值又没有没用到的情况下, 需要确定到底是使用前置还是后置的自增 (自减).</p>\n</li>\n<li><p>优点</p>\n<p>  不考虑返回值的话, 前置自增 (<code>++i</code>) 通常要比后置自增 (<code>i++</code>) 效率更高. 因为后置自增 (或自减) 需要对表达式的值 i 进行一次拷贝. 如果 i 是迭代器或其他非数值类型, 拷贝的代价是比较大的. 既然两种自增方式实现的功能一样, 为什么不总是使用前置自增呢?</p>\n</li>\n<li><p>缺点</p>\n<p>  在 C 开发中, 当表达式的值未被使用时, 传统的做法是使用后置自增, 特别是在<code>for</code>循环中. 有些人觉得后置自增更加易懂, 因为这很像自然语言, 主语 (<code>i</code>) 在谓语动词 (<code>++</code>) 前.</p>\n</li>\n<li><p>结论</p>\n<p>  对简单数值 (非对象), 两种都无所谓. 对迭代器和模板类型, 使用前置自增 (自减).</p>\n</li>\n</ul>\n<h4 id=\"const用法\"><a href=\"#const用法\" class=\"headerlink\" title=\"const用法\"></a><code>const</code>用法</h4><blockquote>\n<p>Tip: 我们强烈建议你在任何可能的情况下都要使用<code>const</code>. 此外有时改用 C++11 推出的 constexpr 更好。</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  在声明的变量或参数前加上关键字<code>const</code>用于指明变量值不可被篡改 (如 <code>const int foo</code>). 为类中的函数加上<code>const</code>限定符表明该函数不会修改类成员变量的状态 (如<code>class Foo { int Bar(char c) const; };</code>).</p>\n</li>\n<li><p>优点</p>\n<p>  大家更容易理解如何使用变量. 编译器可以更好地进行类型检测, 相应地, 也能生成更好的代码. 人们对编写正确的代码更加自信, 因为他们知道所调用的函数被限定了能或不能修改变量值. 即使是在无锁的多线程编程中, 人们也知道什么样的函数是安全的.</p>\n</li>\n<li><p>缺点</p>\n<p>  <code>const</code>是入侵性的: 如果你向一个函数传入<code>const</code>变量, 函数原型声明中也必须对应<code>const</code>参数 (否则变量需要<code>const_cast</code>类型转换), 在调用库函数时显得尤其麻烦.</p>\n</li>\n<li><p>结论</p>\n<p>  <code>const</code>变量, 数据成员, 函数和参数为编译时类型检测增加了一层保障; 便于尽早发现错误. 因此, 我们强烈建议在任何可能的情况下使用<code>const</code>:</p>\n<ul>\n<li>如果函数不会修改传你入的引用或指针类型参数, 该参数应声明为 <code>const</code>.</li>\n<li>尽可能将函数声明为<code>const</code>. 访问函数应该总是<code>const</code>. 其他不会修改任何数据成员, 未调用非<code>const</code>函数, 不会返回数据成员非 <code>const</code>指针或引用的函数也应该声明成<code>const</code>.</li>\n<li>如果数据成员在对象构造之后不再发生变化, 可将其定义为<code>const</code>.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"constexpr用法\"><a href=\"#constexpr用法\" class=\"headerlink\" title=\"constexpr用法\"></a><code>constexpr</code>用法</h4><blockquote>\n<p>Tip: 在 C++11 里，用 constexpr 来定义真正的常量，或实现常量初始化。</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  变量可以被声明成<code>constexpr</code>以表示它是真正意义上的常量，即在编译时和运行时都不变。函数或构造函数也可以被声明成<code>constexpr</code>, 以用来定义 <code>constexpr</code>变量。</p>\n</li>\n<li><p>优点</p>\n<p>  如今 constexpr 就可以定义浮点式的真・常量，不用再依赖字面值了；也可以定义用户自定义类型上的常量；甚至也可以定义函数调用所返回的常量。</p>\n</li>\n<li><p>缺点</p>\n<p>  若过早把变量优化成 constexpr 变量，将来又要把它改为常规变量时，挺麻烦的；当前对constexpr函数和构造函数中允许的限制可能会导致这些定义中解决的方法模糊。</p>\n</li>\n<li><p>结论</p>\n<p>  靠 constexpr 特性，方才实现了 C++ 在接口上打造真正常量机制的可能。好好用 constexpr 来定义真・常量以及支持常量的函数。避免复杂的函数定义，以使其能够与constexpr一起使用。 千万别痴心妄想地想靠 constexpr 来强制代码「内联」。</p>\n</li>\n</ul>\n<h4 id=\"预处理宏\"><a href=\"#预处理宏\" class=\"headerlink\" title=\"预处理宏\"></a>预处理宏</h4><blockquote>\n<p>Tip: 使用宏时要非常谨慎, 尽量以内联函数, 枚举和常量代替之.</p>\n</blockquote>\n<p>宏意味着你和编译器看到的代码是不同的. 这可能会导致异常行为, 尤其因为宏具有全局作用域.</p>\n<p>值得庆幸的是, C++ 中, 宏不像在 C 中那么必不可少. 以往用宏展开性能关键的代码, 现在可以用内联函数替代. 用宏表示常量可被<code>const</code>变量代替. 用宏 “缩写” 长变量名可被引用代替. 用宏进行条件编译… 这个, 千万别这么做, 会令测试更加痛苦 (<code>#define</code>防止头文件重包含当然是个特例).</p>\n<p>宏可以做一些其他技术无法实现的事情, 在一些代码库 (尤其是底层库中) 可以看到宏的某些特性 (如用<code>#</code>字符串化, 用<code>##</code>连接等等). 但在使用前, 仔细考虑一下能不能不使用宏达到同样的目的.</p>\n<p>下面给出的用法模式可以避免使用宏带来的问题; 如果你要宏, 尽可能遵守:</p>\n<ul>\n<li>不要在<code>.h</code>文件中定义宏.</li>\n<li>在马上要使用时才进行<code>#define</code>, 使用后要立即 <code>#undef</code>.</li>\n<li>不要只是对已经存在的宏使用#undef，选择一个不会冲突的名称；</li>\n<li>不要试图使用展开后会导致 C++ 构造不稳定的宏, 不然也至少要附上文档说明其行为.</li>\n<li>不要用<code>##</code>处理函数，类和变量的名字。</li>\n</ul>\n<h4 id=\"nullptr和NULL\"><a href=\"#nullptr和NULL\" class=\"headerlink\" title=\"nullptr和NULL\"></a><code>nullptr</code>和<code>NULL</code></h4><blockquote>\n<p>Tip: 对于指针 (地址值), 到底是用<code>0</code>,<code>NULL</code>还是<code>nullptr</code>. C++11 项目用<code>nullptr</code>; C++03 项目则用<code>NULL</code>, 毕竟它看起来像指针。实际上，一些 C++ 编译器对<code>NULL</code>的定义比较特殊，可以输出有用的警告，特别是 <code>sizeof(NULL)</code>就和<code>sizeof(0)</code>不一样。</p>\n</blockquote>\n<h4 id=\"sizeof\"><a href=\"#sizeof\" class=\"headerlink\" title=\"sizeof\"></a><code>sizeof</code></h4><blockquote>\n<p>Tip: 尽可能用<code>sizeof(varname)</code>代替<code>sizeof(type)</code>.<br>使用<code>sizeof(varname)</code>是因为当代码中变量类型改变时会自动更新. 您或许会用<code>sizeof(type)</code>处理不涉及任何变量的代码，比如处理来自外部或内部的数据格式，这时用变量就不合适了。</p>\n</blockquote>\n<h4 id=\"auto\"><a href=\"#auto\" class=\"headerlink\" title=\"auto\"></a><code>auto</code></h4><blockquote>\n<p>Tip: 用<code>auto</code>绕过烦琐的类型名，只要可读性好就继续用，别用在局部变量之外的地方。</p>\n</blockquote>\n<ul>\n<li>定义</li>\n</ul>\n<p>C++11 中，若变量被声明成<code>auto</code>, 那它的类型就会被自动匹配成初始化表达式的类型。您可以用<code>auto</code>来复制初始化或绑定引用。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; v;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">auto</span> s1 = v[<span class=\"number\">0</span>];  <span class=\"comment\">// 创建一份 v[0] 的拷贝。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">auto</span>&amp; s2 = v[<span class=\"number\">0</span>];  <span class=\"comment\">// s2 是 v[0] 的一个引用。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点</li>\n</ul>\n<p>C++ 类型名有时又长又臭，特别是涉及模板或命名空间的时候。就像：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sparse_hash_map&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;::iterator iter = m.find(val);</span><br></pre></td></tr></table></figure>\n<p>返回类型好难读，代码目的也不够一目了然。重构其：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> iter = m.find(val);</span><br></pre></td></tr></table></figure>\n<p>好多了。</p>\n<p>没有<code>auto</code>的话，我们不得不在同一个表达式里写同一个类型名两次，无谓的重复，就像：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diagnostics::ErrorStatus* status = <span class=\"keyword\">new</span> diagnostics::ErrorStatus(<span class=\"string\">\"xyz\"</span>);</span><br></pre></td></tr></table></figure>\n<p>有了 auto, 可以更方便地用中间变量，显式编写它们的类型轻松点。</p>\n<ul>\n<li>缺点</li>\n</ul>\n<p>类型够明显时，特别是初始化变量时，代码才会够一目了然。但以下就不一样了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> i = x.Lookup(key);</span><br></pre></td></tr></table></figure>\n<p>看不出其类型是啥，x 的类型声明恐怕远在几百行之外了。</p>\n<p>程序员必须会区分<code>auto</code>和<code>const auto&amp;</code>的不同之处，否则会复制错东西。</p>\n<p>auto 和 C++11 列表初始化的合体令人摸不着头脑：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">x</span><span class=\"params\">(<span class=\"number\">3</span>)</span></span>;  <span class=\"comment\">// 圆括号。</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> y&#123;<span class=\"number\">3</span>&#125;;  <span class=\"comment\">// 大括号。</span></span><br></pre></td></tr></table></figure>\n<p>它们不是同一回事——<code>x</code>是<code>int</code>,<code>y</code>则是<code>std::initializer_list&lt;int&gt;</code>. 其它一般不可见的代理类型也有大同小异的陷阱。</p>\n<p>如果在接口里用<code>auto</code>, 比如声明头文件里的一个常量，那么只要仅仅因为程序员一时修改其值而导致类型变化的话——API 要翻天覆地了。</p>\n<ul>\n<li>结论</li>\n</ul>\n<p><code>auto</code>只能用在局部变量里用。别用在文件作用域变量，命名空间作用域变量和类数据成员里。永远别列表初始化<code>auto</code>变量。</p>\n<p><code>auto</code>还可以和 C++11 特性「尾置返回类型（trailing return type）」一起用，不过后者只能用在<code>lambda</code>表达式里。</p>\n<h4 id=\"列表初始化\"><a href=\"#列表初始化\" class=\"headerlink\" title=\"列表初始化\"></a>列表初始化</h4><p>早在 C++03 里，聚合类型（aggregate types）就已经可以被列表初始化了，比如数组和不自带构造函数的结构体：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> &#123;</span> <span class=\"keyword\">int</span> x; <span class=\"keyword\">int</span> y; &#125;;</span><br><span class=\"line\">Point p = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>C++11 中，该特性得到进一步的推广，任何对象类型都可以被列表初始化。示范如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Vector 接收了一个初始化列表。</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; v&#123;<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不考虑细节上的微妙差别，大致上相同。</span></span><br><span class=\"line\"><span class=\"comment\">// 您可以任选其一。</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; v = &#123;<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以配合 new 一起用。</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&#123;<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化列表也可以用在返回类型上的隐式转换。</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; test_function() &#123; <span class=\"keyword\">return</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化列表可迭代。</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : &#123;<span class=\"number\">-1</span>, <span class=\"number\">-2</span>, <span class=\"number\">-3</span>&#125;) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在函数调用里用列表初始化。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestFunction2</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v)</span> </span>&#123;&#125;</span><br><span class=\"line\">TestFunction2(&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>用户自定义类型也可以定义接收<code>std::initializer_list&lt;T&gt;</code>的构造函数和赋值运算符，以自动列表初始化：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyType</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"comment\">// std::initializer_list 专门接收 init 列表。</span></span><br><span class=\"line\">  <span class=\"comment\">// 得以值传递。</span></span><br><span class=\"line\">  MyType(<span class=\"built_in\">std</span>::<span class=\"built_in\">initializer_list</span>&lt;<span class=\"keyword\">int</span>&gt; init_list) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : init_list) append(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  MyType&amp; <span class=\"keyword\">operator</span>=(<span class=\"built_in\">std</span>::<span class=\"built_in\">initializer_list</span>&lt;<span class=\"keyword\">int</span>&gt; init_list) &#123;</span><br><span class=\"line\">    clear();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : init_list) append(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MyType m&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>最后，列表初始化也适用于常规数据类型的构造，哪怕没有接收<code>std::initializer_list&lt;T&gt;</code>的构造函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> d&#123;<span class=\"number\">1.23</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// MyOtherType 没有 std::initializer_list 构造函数，</span></span><br><span class=\"line\"> <span class=\"comment\">// 直接上接收常规类型的构造函数。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyOtherType</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">MyOtherType</span><span class=\"params\">(<span class=\"built_in\">string</span>)</span></span>;</span><br><span class=\"line\">  MyOtherType(<span class=\"keyword\">int</span>, <span class=\"built_in\">string</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MyOtherType m = &#123;<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 不过如果构造函数是显式的（explict），您就不能用 `= &#123;&#125;` 了。</span></span><br><span class=\"line\">MyOtherType m&#123;<span class=\"string\">\"b\"</span>&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h4><blockquote>\n<p>Tip: 适当使用<code>lambda</code>表达式。别用默认<code>lambda</code>捕获，所有捕获都要显式写出来。</p>\n</blockquote>\n<ul>\n<li><p>定义</p>\n<p>  Lambda 表达式是创建匿名函数对象的一种简易途径，常用于把函数当参数传，例如：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::sort(v.begin(), v.end(), [](<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Weight(x) &lt; Weight(y);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>  C++11 首次提出 Lambdas, 还提供了一系列处理函数对象的工具，比如多态包装器（polymorphic wrapper）<code>std::function</code>.</p>\n</li>\n<li><p>优点</p>\n<ul>\n<li>传函数对象给 STL 算法，Lambdas 最简易，可读性也好。</li>\n<li>Lambdas,<code>std::functions</code>和<code>std::bind</code>可以搭配成通用回调机制（general purpose callback mechanism）；写接收有界函数为参数的函数也很容易了。</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>Lambdas 的变量捕获略旁门左道，可能会造成悬空指针。</li>\n<li>Lambdas 可能会失控；层层嵌套的匿名函数难以阅读。</li>\n</ul>\n</li>\n<li><p>结论</p>\n<ul>\n<li>按 format 小用 lambda 表达式怡情。</li>\n<li><strong>禁用默认捕获([=] [&amp;])</strong>，捕获都要显式写出来。打比方，比起<code>[=](int x) {return x + n;}</code>, 您该写成<code>[n](int x) {return x + n;}</code>才对，这样读者也好一眼看出<code>n</code>是被捕获的值。</li>\n<li>匿名函数始终要简短，如果函数体超过了五行，那么还不如起名，或改用函数。</li>\n<li>如果可读性更好，就显式写出 lambd 的尾置返回类型，就像auto.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"命名约定\"><a href=\"#命名约定\" class=\"headerlink\" title=\"命名约定\"></a>命名约定</h2><p>最重要的一致性规则是命名管理. 命名的风格能让我们在不需要去查找类型声明的条件下快速地了解某个名字代表的含义: 类型, 变量, 函数, 常量, 宏, 等等, 甚至. 我们大脑中的模式匹配引擎非常依赖这些命名规则.</p>\n<p>命名规则具有一定随意性, 但相比按个人喜好命名, 一致性更重要, 所以无论你认为它们是否重要, 规则总归是规则.</p>\n<h4 id=\"通用命名规则\"><a href=\"#通用命名规则\" class=\"headerlink\" title=\"通用命名规则\"></a>通用命名规则</h4><ul>\n<li><p>总述</p>\n<p>  函数命名, 变量命名, 文件命名要有描述性; 少用缩写</p>\n</li>\n<li><p>说明</p>\n<p>  尽可能使用描述性的命名, 别心疼空间, 毕竟相比之下让代码易于新读者理解更重要. 不要用只有项目开发者能理解的缩写, 也不要通过砍掉几个字母来缩写单词.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> price_count_reader;    <span class=\"comment\">// 无缩写</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num_errors;            <span class=\"comment\">// \"num\" 是一个常见的写法</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num_dns_connections;   <span class=\"comment\">// 人人都知道 \"DNS\" 是什么</span></span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n;                     <span class=\"comment\">// 毫无意义.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> nerr;                  <span class=\"comment\">// 含糊不清的缩写.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n_comp_conns;          <span class=\"comment\">// 含糊不清的缩写.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> wgc_connections;       <span class=\"comment\">// 只有贵团队知道是什么意思.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> pc_reader;             <span class=\"comment\">// \"pc\" 有太多可能的解释了.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> cstmr_id;              <span class=\"comment\">// 删减了若干字母.</span></span><br></pre></td></tr></table></figure>\n<p>  注意, 一些特定的广为人知的缩写是允许的, 例如用 i 表示迭代变量和用 T 表示模板参数.</p>\n</li>\n</ul>\n<h4 id=\"文件命名\"><a href=\"#文件命名\" class=\"headerlink\" title=\"文件命名\"></a>文件命名</h4><ul>\n<li><p>总述</p>\n<p>  文件名要全部小写, 可以包含下划线<code>_</code>或连字符<code>-</code>, 依照项目的约定. 如果没有约定, 那么<code>_</code>更好.</p>\n</li>\n<li><p>说明</p>\n<p>  可接受的文件命名示例:</p>\n<ul>\n<li><code>my_useful_class.cc</code></li>\n<li><code>my-useful-class.cc</code></li>\n<li><code>myusefulclass.cc</code></li>\n<li><p><code>myusefulclass_test.cc</code> // <code>_unittest</code> 和 <code>_regtest</code> 已弃用</p>\n<p>C++ 文件要以<code>.cc</code>结尾, 头文件以<code>.h</code>结尾. 专门插入文本的文件则以<code>.inc</code>结尾</p>\n<p>不要使用已经存在于<code>/usr/include</code>下的文件名, 如<code>db.h</code>.</p>\n<p>通常应尽量让文件名更加明确.<code>http_server_logs.h</code>就比<code>logs.h</code>要好. 定义类时文件名一般成对出现, 如<code>foo_bar.h</code>和<code>foo_bar.cc</code>, 对应于类<code>FooBar</code>.</p>\n<p>内联函数必须放在<code>.h</code>文件中. 如果内联函数比较短, 就直接放在<code>.h</code>中.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"类型命名\"><a href=\"#类型命名\" class=\"headerlink\" title=\"类型命名\"></a>类型命名</h4><ul>\n<li><p>总述</p>\n<p>  类型名称的每个单词首字母均大写, 不包含下划线: <code>MyExcitingClass</code>, <code>MyExcitingEnum</code>.</p>\n</li>\n<li><p>说明</p>\n<p>  所有类型命名 —— 类, 结构体, 类型定义 (typedef), 枚举, 类型模板参数 —— 均使用相同约定, 即以大写字母开始, 每个单词首字母均大写, 不包含下划线. 例如:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类和结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UrlTable</span> &#123;</span> ...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UrlTableTester</span> &#123;</span> ...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">UrlTableProperties</span> &#123;</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类型定义</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> hash_map&lt;UrlTableProperties *, <span class=\"built_in\">string</span>&gt; PropertiesMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// using 别名</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> PropertiesMap = hash_map&lt;UrlTableProperties *, <span class=\"built_in\">string</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 枚举</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> UrlTableErrors &#123; ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"变量命名\"><a href=\"#变量命名\" class=\"headerlink\" title=\"变量命名\"></a>变量命名</h4><ul>\n<li><p>总述</p>\n<p>  变量 (包括函数参数) 和数据成员名一律小写, 单词之间用下划线连接. 类的成员变量<em>以下划线结尾</em>, 但结构体的就不用, 如: <code>a_local_variable</code>, <code>a_struct_data_member</code>, <code>a_class_data_member_</code>.</p>\n</li>\n<li><p>说明</p>\n<ul>\n<li><p>普通变量命名</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> table_name;  <span class=\"comment\">// 好 - 用下划线.</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> tablename;   <span class=\"comment\">// 好 - 全小写.</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> tableName;  <span class=\"comment\">// 差 - 混合大小写</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类数据成员</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TableInfo</span> &#123;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"built_in\">string</span> table_name_;  <span class=\"comment\">// 好 - 后加下划线.</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> tablename_;   <span class=\"comment\">// 好.</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Pool&lt;TableInfo&gt;* pool_;  <span class=\"comment\">// 好.</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- 结构体变量\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">UrlTableProperties</span> &#123;</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> num_entries;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> Pool&lt;UrlTableProperties&gt;* pool;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</code></pre><h4 id=\"常量命名\"><a href=\"#常量命名\" class=\"headerlink\" title=\"常量命名\"></a>常量命名</h4><ul>\n<li><p>总述</p>\n<p>  声明为<code>constexpr</code>或<code>const</code>的变量, 或在程序运行期间其值始终保持不变的,命名时以 “k” 开头, 大小写混合. 例如:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> kDaysInAWeek = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>说明</p>\n</li>\n</ul>\n<p>所有具有静态存储类型的变量 (例如静态变量或全局变量) 都应当以此方式命名. 对于其他存储类型的变量, 如自动变量等, 这条规则是可选的. 如果不采用这条规则, 就按照一般的变量命名规则.</p>\n<h4 id=\"函数命名\"><a href=\"#函数命名\" class=\"headerlink\" title=\"函数命名\"></a>函数命名</h4><ul>\n<li><p>总述</p>\n<p>  常规函数使用大小写混合, 取值和设值函数则要求与变量名匹配: <code>MyExcitingFunction()</code>, <code>MyExcitingMethod()</code>, <code>my_exciting_member_variable()</code>, <code>set_my_exciting_member_variable()</code>.</p>\n</li>\n<li><p>说明</p>\n<p>  一般来说, 函数名的每个单词首字母大写 (即 “驼峰变量名” 或 “帕斯卡变量名”), 没有下划线. 对于首字母缩写的单词, 更倾向于将它们视作一个单词进行首字母大写 (例如, 写作<code>StartRpc()</code>而非<code>StartRPC()</code>).</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AddTableEntry()</span><br><span class=\"line\">DeleteUrl()</span><br><span class=\"line\">OpenFileOrDie()</span><br></pre></td></tr></table></figure>\n<p>  取值和设值函数的命名与变量一致. 一般来说它们的名称与实际的成员变量对应, 但并不强制要求. 例如<code>int count()</code>与<code>void set_count(int count)</code>.</p>\n</li>\n</ul>\n<h4 id=\"命名空间命名\"><a href=\"#命名空间命名\" class=\"headerlink\" title=\"命名空间命名\"></a>命名空间命名</h4><ul>\n<li><p>总述</p>\n<p>  命名空间以小写字母命名. 最高级命名空间的名字取决于项目名称. 要注意避免嵌套命名空间的名字之间和常见的顶级命名空间的名字之间发生冲突.</p>\n<p>  顶级命名空间的名称应当是项目名或者是该命名空间中的代码所属的团队的名字. 命名空间中的代码, 应当存放于和命名空间的名字匹配的文件夹或其子文件夹中.</p>\n<p>  要避免嵌套的命名空间与常见的顶级命名空间发生名称冲突. 由于名称查找规则的存在, 命名空间之间的冲突完全有可能导致编译失败. 尤其是, 不要创建嵌套的<code>std</code>命名空间. 建议使用更独特的项目标识符 (<code>websearch::index</code>,<code>websearch::index_util</code>) 而非常见的极易发生冲突的名称 (比如<code>websearch::util</code>).</p>\n<p>  对于<code>internal</code>命名空间, 要当心加入到同一<code>internal</code>命名空间的代码之间发生冲突 (由于内部维护人员通常来自同一团队, 因此常有可能导致冲突). 在这种情况下, 请使用文件名以使得内部名称独一无二 (例如对于<code>frobber.h</code>, 使用<code>websearch::index::frobber_internal</code>).</p>\n</li>\n</ul>\n<h4 id=\"枚举命名\"><a href=\"#枚举命名\" class=\"headerlink\" title=\"枚举命名\"></a>枚举命名</h4><ul>\n<li><p>总述</p>\n<p>  枚举的命名应当和 常量 或 宏 一致: <code>kEnumName</code>或是<code>ENUM_NAME</code>.</p>\n</li>\n<li><p>说明</p>\n<p>  单独的枚举值应该优先采用 常量 的命名方式. 但 宏 方式的命名也可以接受. 枚举名<code>UrlTableErrors</code>(以及 <code>AlternateUrlTableErrors</code>) 是类型, 所以要用大小写混合的方式.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> UrlTableErrors &#123;</span><br><span class=\"line\">    kOK = <span class=\"number\">0</span>,</span><br><span class=\"line\">    kErrorOutOfMemory,</span><br><span class=\"line\">    kErrorMalformedInput,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">enum</span> AlternateUrlTableErrors &#123;</span><br><span class=\"line\">    OK = <span class=\"number\">0</span>,</span><br><span class=\"line\">    OUT_OF_MEMORY = <span class=\"number\">1</span>,</span><br><span class=\"line\">    MALFORMED_INPUT = <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"宏命名\"><a href=\"#宏命名\" class=\"headerlink\" title=\"宏命名\"></a>宏命名</h4><p>你并不打算 使用宏, 对吧? 如果你一定要用, 像这样命名: <code>MY_MACRO_THAT_SCARES_SMALL_CHILDREN</code>.</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>注释虽然写起来很痛苦, 但对保证代码可读性至关重要. 下面的规则描述了如何注释以及在哪儿注释. 当然也要记住: 注释固然很重要, 但最好的代码应当本身就是文档. 有意义的类型名和变量名, 要远胜过要用注释解释的含糊不清的名字.</p>\n<h4 id=\"注释风格\"><a href=\"#注释风格\" class=\"headerlink\" title=\"注释风格\"></a>注释风格</h4><ul>\n<li><p>总述</p>\n<p>  使用<code>//</code>或<code>/* */</code>, 统一就好.</p>\n</li>\n<li><p>说明</p>\n<p>  <code>//</code>或<code>/* */</code>都可以; 但<code>//</code>更 常用. 要在如何注释及注释风格上确保统一.</p>\n</li>\n</ul>\n<h4 id=\"文件注释\"><a href=\"#文件注释\" class=\"headerlink\" title=\"文件注释\"></a>文件注释</h4><ul>\n<li><p>总述</p>\n<p>  在每一个文件开头加入版权公告.</p>\n<p>  文件注释描述了该文件的内容. 如果一个文件只声明, 或实现, 或测试了一个对象, 并且这个对象已经在它的声明处进行了详细的注释, 那么就没必要再加上文件注释. 除此之外的其他文件都需要文件注释.</p>\n</li>\n<li><p>说明</p>\n<ul>\n<li><p>法律公告和作者信息</p>\n<p>  每个文件都应该包含许可证引用. 为项目选择合适的许可证版本.(比如, Apache 2.0, BSD, LGPL, GPL)</p>\n<p>  如果你对原始作者的文件做了重大修改, 请考虑删除原作者信息.</p>\n</li>\n<li><p>文件内容</p>\n<p>  如果一个<code>.h</code>文件声明了多个概念, 则文件注释应当对文件的内容做一个大致的说明, 同时说明各概念之间的联系. 一个一到两行的文件注释就足够了, 对于每个概念的详细文档应当放在各个概念中, 而不是文件注释中.</p>\n<p>  不要在<code>.h</code>和<code>.cc</code>之间复制注释, 这样的注释偏离了注释的实际意义.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"类注释\"><a href=\"#类注释\" class=\"headerlink\" title=\"类注释\"></a>类注释</h4><ul>\n<li><p>总述</p>\n<p>  每个类的定义都要附带一份注释, 描述类的功能和用法, 除非它的功能相当明显.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Iterates over the contents of a GargantuanTable.</span></span><br><span class=\"line\"><span class=\"comment\">// Example:</span></span><br><span class=\"line\"><span class=\"comment\">//    GargantuanTableIterator* iter = table-&gt;NewIterator();</span></span><br><span class=\"line\"><span class=\"comment\">//    for (iter-&gt;Seek(\"foo\"); !iter-&gt;done(); iter-&gt;Next()) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//      process(iter-&gt;key(), iter-&gt;value());</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    delete iter;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GargantuanTableIterator</span> &#123;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>说明</p>\n<p>  类注释应当为读者理解如何使用与何时使用类提供足够的信息, 同时应当提醒读者在正确使用此类时应当考虑的因素. 如果类有任何同步前提, 请用文档说明. 如果该类的实例可被多线程访问, 要特别注意文档说明多线程环境下相关的规则和常量使用.</p>\n<p>  如果你想用一小段代码演示这个类的基本用法或通常用法, 放在类注释里也非常合适.</p>\n<p>  如果类的声明和定义分开了(例如分别放在了<code>.h</code>和<code>.cc</code>文件中), 此时, 描述类用法的注释应当和接口定义放在一起, 描述类的操作和实现的注释应当和实现放在一起.</p>\n</li>\n</ul>\n<h4 id=\"函数注释\"><a href=\"#函数注释\" class=\"headerlink\" title=\"函数注释\"></a>函数注释</h4><ul>\n<li>总述</li>\n</ul>\n<p>函数声明处的注释描述函数功能; 定义处的注释描述函数实现.</p>\n<ul>\n<li><p>说明</p>\n<ul>\n<li><p>函数说明</p>\n<p>  基本上每个函数声明处前都应当加上注释, 描述函数的功能和用途. 只有在函数的功能简单而明显时才能省略这些注释(例如, 简单的取值和设值函数). 注释使用叙述式 (“Opens the file”) 而非指令式 (“Open the file”); 注释只是为了描述函数, 而不是命令函数做什么. 通常, 注释不会描述函数如何工作. 那是函数定义部分的事情.</p>\n<p>  函数声明处注释的内容:</p>\n<ul>\n<li>函数的输入输出.</li>\n<li>对类成员函数而言: 函数调用期间对象是否需要保持引用参数, 是否会释放这些参数.</li>\n<li>函数是否分配了必须由调用者释放的空间.</li>\n<li>参数是否可以为空指针.</li>\n<li>是否存在函数使用上的性能隐患.</li>\n<li><p>如果函数是可重入的, 其同步前提是什么?</p>\n<p>举例如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Returns an iterator for this table.  It is the client's</span></span><br><span class=\"line\"><span class=\"comment\">// responsibility to delete the iterator when it is done with it,</span></span><br><span class=\"line\"><span class=\"comment\">// and it must not use the iterator once the GargantuanTable object</span></span><br><span class=\"line\"><span class=\"comment\">// on which the iterator was created has been deleted.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The iterator is initially positioned at the beginning of the table.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// This method is equivalent to:</span></span><br><span class=\"line\"><span class=\"comment\">//    Iterator* iter = table-&gt;NewIterator();</span></span><br><span class=\"line\"><span class=\"comment\">//    iter-&gt;Seek(\"\");</span></span><br><span class=\"line\"><span class=\"comment\">//    return iter;</span></span><br><span class=\"line\"><span class=\"comment\">// If you are going to immediately seek to another place in the</span></span><br><span class=\"line\"><span class=\"comment\">// returned iterator, it will be faster to use NewIterator()</span></span><br><span class=\"line\"><span class=\"comment\">// and avoid the extra seek.</span></span><br><span class=\"line\"><span class=\"function\">Iterator* <span class=\"title\">GetIterator</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure>\n<p>但也要避免罗罗嗦嗦, 或者对显而易见的内容进行说明. 下面的注释就没有必要加上 “否则返回 false”, 因为已经暗含其中了:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Returns true if the table cannot hold any more entries.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IsTableFull</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>注释函数重载时, 注释的重点应该是函数中被重载的部分, 而不是简单的重复被重载的函数的注释. 多数情况下, 函数重载不需要额外的文档, 因此也没有必要加上注释.</p>\n<p>注释构造/析构函数时, 切记读代码的人知道构造/析构函数的功能, 所以 “销毁这一对象” 这样的注释是没有意义的. 你应当注明的是注明构造函数对参数做了什么 (例如, 是否取得指针所有权) 以及析构函数清理了什么. 如果都是些无关紧要的内容, 直接省掉注释. 析构函数前没有注释是很正常的.</p>\n</li>\n</ul>\n</li>\n<li><p>函数定义</p>\n<p>  如果函数的实现过程中用到了很巧妙的方式, 那么在函数定义处应当加上解释性的注释. 例如, 你所使用的编程技巧, 实现的大致步骤, 或解释如此实现的理由. 举个例子, 你可以说明为什么函数的前半部分要加锁而后半部分不需要.</p>\n<p>  不要 从<code>.h</code>文件或其他地方的函数声明处直接复制注释. 简要重述函数功能是可以的, 但注释重点要放在如何实现上.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"变量注释\"><a href=\"#变量注释\" class=\"headerlink\" title=\"变量注释\"></a>变量注释</h4><ul>\n<li>总述</li>\n</ul>\n<p>通常变量名本身足以很好说明变量用途. 某些情况下, 也需要额外的注释说明.</p>\n<ul>\n<li><p>说明</p>\n<ul>\n<li><p>类数据成员</p>\n<p>  每个类数据成员 (也叫实例变量或成员变量) 都应该用注释说明用途. 如果有非变量的参数(例如特殊值, 数据成员之间的关系, 生命周期等)不能够用类型与变量名明确表达, 则应当加上注释. 然而, 如果变量类型与变量名已经足以描述一个变量, 那么就不再需要加上注释.</p>\n<p>  特别地, 如果变量可以接受<code>NULL</code>或<code>-1</code>等警戒值, 须加以说明. 比如:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"><span class=\"comment\">// Used to bounds-check table accesses. -1 means</span></span><br><span class=\"line\"><span class=\"comment\">// that we don't yet know how many entries the table has.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num_total_entries_;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>全局变量</p>\n<p>  和数据成员一样, 所有全局变量也要注释说明含义及用途, 以及作为全局变量的原因. 比如:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The total number of tests cases that we run through in this regression test.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> kNumTestCases = <span class=\"number\">6</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"实现注释\"><a href=\"#实现注释\" class=\"headerlink\" title=\"实现注释\"></a>实现注释</h4><ul>\n<li>总述</li>\n</ul>\n<p>对于代码中巧妙的, 晦涩的, 有趣的, 重要的地方加以注释.</p>\n<ul>\n<li><p>说明</p>\n<ul>\n<li><p>代码前注释</p>\n<p>  巧妙或复杂的代码段前要加注释. 比如:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Divide result by two, taking into account that x</span></span><br><span class=\"line\"><span class=\"comment\">// contains the carry from the add.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result-&gt;size(); i++) &#123;</span><br><span class=\"line\">x = (x &lt;&lt; <span class=\"number\">8</span>) + (*result)[i];</span><br><span class=\"line\">(*result)[i] = x &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">x &amp;= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>行注释</p>\n<p>  比较隐晦的地方要在行尾加入注释. 在行尾空两格进行注释. 比如:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// If we have enough memory, mmap the data portion too.</span></span><br><span class=\"line\">mmap_budget = max&lt;int64&gt;(<span class=\"number\">0</span>, mmap_budget - index_-&gt;length());</span><br><span class=\"line\"><span class=\"keyword\">if</span> (mmap_budget &gt;= data_size_ &amp;&amp; !MmapData(mmap_chunk_bytes, mlock))</span><br><span class=\"line\"><span class=\"keyword\">return</span>;  <span class=\"comment\">// Error already logged.</span></span><br></pre></td></tr></table></figure>\n<p>  注意, 这里用了两段注释分别描述这段代码的作用, 和提示函数返回时错误已经被记入日志.</p>\n</li>\n<li><p>函数参数注释</p>\n<p>  如果函数参数的意义不明显, 考虑用下面的方式进行弥补:</p>\n<ul>\n<li>如果参数是一个字面常量, 并且这一常量在多处函数调用中被使用, 用以推断它们一致, 你应当用一个常量名让这一约定变得更明显, 并且保证这一约定不会被打破.</li>\n<li>考虑更改函数的签名, 让某个<code>bool</code>类型的参数变为<code>enum</code>类型, 这样可以让这个参数的值表达其意义.</li>\n<li>如果某个函数有多个配置选项, 你可以考虑定义一个类或结构体以保存所有的选项, 并传入类或结构体的实例. 这样的方法有许多优点, 例如这样的选项可以在调用处用变量名引用, 这样就能清晰地表明其意义. 同时也减少了函数参数的数量, 使得函数调用更易读也易写. 除此之外, 以这样的方式, 如果你使用其他的选项, 就无需对调用点进行更改.</li>\n<li>用具名变量代替大段而复杂的嵌套表达式.</li>\n<li>万不得已时, 才考虑在调用点用注释阐明参数的意义.</li>\n</ul>\n</li>\n<li><p>不允许的行为</p>\n<p>  不要描述显而易见的现象, <em>永远不要</em>用自然语言翻译代码作为注释, 除非即使对深入理解 C++ 的读者来说代码的行为都是不明显的. 要假设读代码的人 C++ 水平比你高, 即便他/她可能不知道你的用意:</p>\n<p>  你所提供的注释应当解释代码<em>为什么</em>要这么做和代码的目的, 或者最好是让代码自文档化.</p>\n<p>  比较这样的注释:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Find the element in the vector.  &lt;-- 差: 这太明显了!</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> iter = <span class=\"built_in\">std</span>::find(v.begin(), v.end(), element);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (iter != v.end()) &#123;</span><br><span class=\"line\">    Process(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  和这样的注释:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Process \"element\" unless it was already processed.</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> iter = <span class=\"built_in\">std</span>::find(v.begin(), v.end(), element);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (iter != v.end()) &#123;</span><br><span class=\"line\">    Process(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  自文档化的代码根本就不需要注释. 上面例子中的注释对下面的代码来说就是毫无必要的:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!IsAlreadyProcessed(element)) &#123;</span><br><span class=\"line\">    Process(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"TODO注释\"><a href=\"#TODO注释\" class=\"headerlink\" title=\"TODO注释\"></a>TODO注释</h4><ul>\n<li><p>总述</p>\n<p>  对那些临时的, 短期的解决方案, 或已经够好但仍不完美的代码使用<code>TODO</code>注释.</p>\n<p>  <code>TODO</code>注释要使用全大写的字符串<code>TODO</code>,在随后的圆括号里写上你的名字, 邮件地址, bug ID, 或其它身份标识和与这一<code>TODO</code>相关的 issue. 主要目的是让添加注释的人 (也是可以请求提供更多细节的人) 可根据规范的<code>TODO</code>格式进行查找. 添加<code>TODO</code>注释并不意味着你要自己来修正, 因此当你加上带有姓名的<code>TODO</code>时, 一般都是写上自己的名字.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TODO(kl@gmail.com): Use a \"*\" here for concatenation operator.</span></span><br><span class=\"line\"><span class=\"comment\">// TODO(Zeke) change this to use relations.</span></span><br><span class=\"line\"><span class=\"comment\">// TODO(bug 12345): remove the \"Last visitors\" feature</span></span><br></pre></td></tr></table></figure>\n<p>  如果加<code>TODO</code>是为了在 “将来某一天做某事”, 可以附上一个非常明确的时间 “Fix by November 2005”), 或者一个明确的事项 (“Remove this code when all clients can handle XML responses.”).</p>\n</li>\n</ul>\n<h4 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ol>\n<li>关于注释风格, 很多 C++ 的 coders 更喜欢行注释, C coders 或许对块注释依然情有独钟, 或者在文件头大段大段的注释时使用块注释</li>\n<li>文件注释可以炫耀你的成就, 也是为了捅了篓子别人可以找你</li>\n<li>注释要言简意赅, 不要拖沓冗余, 复杂的东西简单化和简单的东西复杂化都是要被鄙视的</li>\n<li>对于 Chinese coders 来说, 用英文注释还是用中文注释, it is a problem, 但不管怎样, 注释是为了让别人看懂, 难道是为了炫耀编程语言之外的你的母语或外语水平吗</li>\n<li>注释不要太乱, 适当的缩进才会让人乐意看. 但也没有必要规定注释从第几列开始 (我自己写代码的时候总喜欢这样), UNIX/LINUX 下还可以约定是使用 tab 还是 space, 个人倾向于 space</li>\n<li>TODO 很不错, 有时候, 注释确实是为了标记一些未完成的或完成的不尽如人意的地方, 这样一搜索, 就知道还有哪些活要干, 日志都省了</li>\n</ol>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><h4 id=\"行长度\"><a href=\"#行长度\" class=\"headerlink\" title=\"行长度\"></a>行长度</h4><ul>\n<li><p>总述</p>\n<p>  每一行代码字符数不超过 80.</p>\n<p>  我们也认识到这条规则是有争议的, 但很多已有代码都遵照这一规则, 因此我们感觉一致性更重要.</p>\n</li>\n<li><p>优点</p>\n<p>  提倡该原则的人认为强迫他们调整编辑器窗口大小是很野蛮的行为. 很多人同时并排开几个代码窗口, 根本没有多余的空间拉伸窗口. 大家都把窗口最大尺寸加以限定, 并且 80 列宽是传统标准. 那么为什么要改变呢?</p>\n</li>\n<li><p>缺点</p>\n</li>\n</ul>\n<pre><code>反对该原则的人则认为更宽的代码行更易阅读. 80 列的限制是上个世纪 60 年代的大型机的古板缺陷; 现代设备具有更宽的显示屏, 可以很轻松地显示更多代码.\n</code></pre><ul>\n<li><p>结论</p>\n<p>  80 个字符是最大值.</p>\n<p>  如果无法在不伤害易读性的条件下进行断行, 那么注释行可以超过 80 个字符, 这样可以方便复制粘贴. 例如, 带有命令示例或 URL 的行可以超过 80 个字符.</p>\n<p>  包含长路径的<code>#include</code>语句可以超出80列.</p>\n</li>\n</ul>\n<h4 id=\"非ASCII字符\"><a href=\"#非ASCII字符\" class=\"headerlink\" title=\"非ASCII字符\"></a>非ASCII字符</h4><ul>\n<li><p>总述</p>\n<p>  尽量不使用非 ASCII 字符, 使用时必须使用<em>UTF-8</em>编码.</p>\n</li>\n<li><p>说明</p>\n<p>  即使是英文, 也不应将用户界面的文本硬编码到源代码中, 因此非 ASCII 字符应当很少被用到. 特殊情况下可以适当包含此类字符. 例如, 代码分析外部数据文件时, 可以适当硬编码数据文件中作为分隔符的非 ASCII 字符串; 更常见的是 (不需要本地化的) 单元测试代码可能包含非 ASCII 字符串. 此类情况下, 应使用 UTF-8 编码, 因为很多工具都可以理解和处理 UTF-8 编码.</p>\n</li>\n</ul>\n<h4 id=\"空格还是制表位\"><a href=\"#空格还是制表位\" class=\"headerlink\" title=\"空格还是制表位\"></a>空格还是制表位</h4><ul>\n<li><p>总述</p>\n<p>  只使用空格, 每次缩进2个空格.（如果你所在的项目使用4各空格缩进，那么请保持一致性）</p>\n</li>\n<li><p>说明</p>\n<p>  我们使用空格缩进. 不要在代码中使用制表符. 你应该设置编辑器将制表符转为空格.</p>\n</li>\n</ul>\n<h4 id=\"函数声明与定义\"><a href=\"#函数声明与定义\" class=\"headerlink\" title=\"函数声明与定义\"></a>函数声明与定义</h4><ul>\n<li><p>总述</p>\n<p>  返回类型和函数名在同一行, 参数也尽量放在同一行, 如果放不下就对形参分行, 分行方式与函数调用一致.</p>\n</li>\n<li><p>说明</p>\n<p>  函数看上去像这样:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReturnType ClassName::FunctionName(Type par_name1, Type par_name2) &#123;</span><br><span class=\"line\">  DoSomething();</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  如果同一行文本太多, 放不下所有参数:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReturnType ClassName::ReallyLongFunctionName(Type par_name1, Type par_name2,</span><br><span class=\"line\">                                             Type par_name3) &#123;</span><br><span class=\"line\">  DoSomething();</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  甚至连第一个参数都放不下:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReturnType LongClassName::ReallyReallyReallyLongFunctionName(</span><br><span class=\"line\">    Type par_name1,  <span class=\"comment\">// 4 space indent</span></span><br><span class=\"line\">    Type par_name2,</span><br><span class=\"line\">    Type par_name3) &#123;</span><br><span class=\"line\">  DoSomething();  <span class=\"comment\">// 2 space indent</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  注意以下几点：</p>\n<ul>\n<li>使用好的参数名.</li>\n<li>只有在参数未被使用或者其用途非常明显时, 才能省略参数名.</li>\n<li>如果返回类型和函数名在一行放不下, 分行.</li>\n<li>如果返回类型与函数声明或定义分行了, 不要缩进.</li>\n<li>左圆括号总是和函数名在同一行.</li>\n<li>函数名和左圆括号间永远没有空格.</li>\n<li>圆括号与参数间没有空格.</li>\n<li>左大括号{总在最后一个参数同一行的末尾处, 不另起新行.</li>\n<li>右大括号总是单独位于函数最后一行, 或者与左大括号同一行.</li>\n<li>右圆括号和左大括号间总是有一个空格.</li>\n<li>所有形参应尽可能对齐.</li>\n<li>缺省缩进为 2 个空格.</li>\n<li><p>换行后的参数保持 4 个空格的缩进.</p>\n<p>未被使用的参数, 或者根据上下文很容易看出其用途的参数, 可以省略参数名:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  Foo(Foo&amp;&amp;);</span><br><span class=\"line\">  Foo(<span class=\"keyword\">const</span> Foo&amp;);</span><br><span class=\"line\">  Foo&amp; <span class=\"keyword\">operator</span>=(Foo&amp;&amp;);</span><br><span class=\"line\">  Foo&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Foo&amp;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>未被使用的参数如果其用途不明显的话, 在函数定义处将参数名注释起来:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Rotate</span><span class=\"params\">(<span class=\"keyword\">double</span> radians)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> :</span> <span class=\"keyword\">public</span> Shape &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Rotate</span><span class=\"params\">(<span class=\"keyword\">double</span> radians)</span> override</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> Circle::Rotate(<span class=\"keyword\">double</span> <span class=\"comment\">/*radians*/</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 差 - 如果将来有人要实现, 很难猜出变量的作用.</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> Circle::Rotate(<span class=\"keyword\">double</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>属性, 和展开为属性的宏, 写在函数声明或定义的最前面, 即返回类型之前:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MUST_USE_RESULT <span class=\"keyword\">bool</span> <span class=\"title\">IsOK</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Lambda表达式-1\"><a href=\"#Lambda表达式-1\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h4><ul>\n<li><p>总述</p>\n<p>  Lambda 表达式对形参和函数体的格式化和其他函数一致; 捕获列表同理, 表项用逗号隔开.</p>\n</li>\n<li><p>说明</p>\n<p>  若用引用捕获, 在变量名和<code>&amp;</code>之间不留空格.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> add_to_x = [&amp;x](<span class=\"keyword\">int</span> n) &#123; x += n; &#125;;</span><br></pre></td></tr></table></figure>\n<p>  短 lambda 就写得和内联函数一样.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; blacklist = &#123;<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; digits = &#123;<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">digits.erase(<span class=\"built_in\">std</span>::remove_if(digits.begin(), digits.end(), [&amp;blacklist](<span class=\"keyword\">int</span> i) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> blacklist.find(i) != blacklist.end();</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">            digits.end());</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h4><ul>\n<li>总述</li>\n</ul>\n<pre><code>要么一行写完函数调用, 要么在圆括号里对参数分行, 要么参数另起一行且缩进四格. 如果没有其它顾虑的话, 尽可能精简行数, 比如把多个参数适当地放在同一行里.\n</code></pre><ul>\n<li><p>说明</p>\n<p>  函数调用遵循如下形式</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> retval = DoSomething(argument1, argument2, argument3);</span><br></pre></td></tr></table></figure>\n<p>  如果同一行放不下, 可断为多行, 后面每一行都和第一个实参对齐, 左圆括号后和右圆括号前不要留空格：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> retval = DoSomething(averyveryveryverylongargument1,</span><br><span class=\"line\">                          argument2, argument3);</span><br></pre></td></tr></table></figure>\n<p>  参数也可以放在次行, 缩进四格：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (...) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (...) &#123;</span><br><span class=\"line\">    DoSomething(</span><br><span class=\"line\">        argument1, argument2,  <span class=\"comment\">// 4 空格缩进</span></span><br><span class=\"line\">        argument3, argument4);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>如果一些参数本身就是略复杂的表达式, 且降低了可读性, 那么可以直接创建临时变量描述该表达式, 并传递给函数：\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> my_heuristic = scores[x] * y + bases[x];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> retval = DoSomething(my_heuristic, x, y, z);</span><br></pre></td></tr></table></figure>\n\n或者放着不管, 补充上注释：\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> retval = DoSomething(scores[x] * y + bases[x],  <span class=\"comment\">// Score heuristic.</span></span><br><span class=\"line\">                          x, y, z);</span><br></pre></td></tr></table></figure>\n\n如果某参数独立成行, 对可读性更有帮助的话, 那也可以如此做. 参数的格式处理应当以可读性而非其他作为最重要的原则.\n\n此外, 如果一系列参数本身就有一定的结构, 可以酌情地按其结构来决定参数格式：\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过 3x3 矩阵转换 widget.</span></span><br><span class=\"line\">my_widget.Transform(x1, x2, x3,</span><br><span class=\"line\">                    y1, y2, y3,</span><br><span class=\"line\">                    z1, z2, z3);</span><br></pre></td></tr></table></figure>\n</code></pre><h4 id=\"列表初始化-1\"><a href=\"#列表初始化-1\" class=\"headerlink\" title=\"列表初始化\"></a>列表初始化</h4><p>如果列表初始化伴随着名字, 比如类型或变量名, 格式化时将将名字视作函数调用名, {} 视作函数调用的括号. 如果没有名字, 就视作名字长度为零.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一行列表初始化示范.</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;foo, bar&#125;;</span><br><span class=\"line\">functioncall(&#123;foo, bar&#125;);</span><br><span class=\"line\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; p&#123;foo, bar&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当不得不断行时.</span></span><br><span class=\"line\">SomeFunction(</span><br><span class=\"line\">    &#123;<span class=\"string\">\"assume a zero-length name before &#123;\"</span>&#125;,  <span class=\"comment\">// 假设在 &#123; 前有长度为零的名字.</span></span><br><span class=\"line\">    some_other_function_parameter);</span><br><span class=\"line\">SomeType variable&#123;</span><br><span class=\"line\">    some, other, values,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"assume a zero-length name before &#123;\"</span>&#125;,  <span class=\"comment\">// 假设在 &#123; 前有长度为零的名字.</span></span><br><span class=\"line\">    SomeOtherType&#123;</span><br><span class=\"line\">        <span class=\"string\">\"Very long string requiring the surrounding breaks.\"</span>,  <span class=\"comment\">// 非常长的字符串, 前后都需要断行.</span></span><br><span class=\"line\">        some, other values&#125;,</span><br><span class=\"line\">    SomeOtherType&#123;<span class=\"string\">\"Slightly shorter string\"</span>,  <span class=\"comment\">// 稍短的字符串.</span></span><br><span class=\"line\">                  some, other, values&#125;&#125;;</span><br><span class=\"line\">SomeType variable&#123;</span><br><span class=\"line\">    <span class=\"string\">\"This is too long to fit all in one line\"</span>&#125;;  <span class=\"comment\">// 字符串过长, 因此无法放在同一行.</span></span><br><span class=\"line\">MyType m = &#123;  <span class=\"comment\">// 注意了, 您可以在 &#123; 前断行.</span></span><br><span class=\"line\">    superlongvariablename1,</span><br><span class=\"line\">    superlongvariablename2,</span><br><span class=\"line\">    &#123;<span class=\"keyword\">short</span>, interior, <span class=\"built_in\">list</span>&#125;,</span><br><span class=\"line\">    &#123;interiorwrappinglist,</span><br><span class=\"line\">     interiorwrappinglist2&#125;&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h4><ul>\n<li><p>总述</p>\n<p>  倾向于不在圆括号内使用空格. 关键字<code>if</code>和<code>else</code>另起一行.</p>\n</li>\n<li><p>说明</p>\n<p>  对基本条件语句有两种可以接受的格式. 一种在圆括号和条件之间有空格, 另一种没有.</p>\n<p>  最常见的是没有空格的格式. 哪一种都可以, 最重要的是<em>保持一致</em>. 如果你是在修改一个文件, 参考当前已有格式. 如果是写新的代码, 参考目录下或项目中其它文件. 还在犹豫的话, 就不要加空格了.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;  <span class=\"comment\">// 圆括号里没有空格.</span></span><br><span class=\"line\">  ...  <span class=\"comment\">// 2 空格缩进.</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (...) &#123;  <span class=\"comment\">// else 与 if 的右括号同一行.</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  注意所有情况下<code>if</code>和左圆括号间都有个空格. 右圆括号和左大括号之间也要有个空格:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(condition)     <span class=\"comment\">// 差 - IF 后面没空格.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition)&#123;   <span class=\"comment\">// 差 - &#123; 前面没空格.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(condition)&#123;    <span class=\"comment\">// 变本加厉地差.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;  <span class=\"comment\">// 好 - IF 和 &#123; 都与空格紧邻.</span></span><br></pre></td></tr></table></figure>\n<p>  如果能增强可读性, 简短的条件语句允许写在同一行. 只有当语句简单并且没有使用<code>else</code>子句时使用:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x == kFoo) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (x == kBar) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Bar();</span><br></pre></td></tr></table></figure>\n<p>  如果语句有<code>else</code>分支则不允许:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不允许 - 当有 ELSE 分支时 IF 块却写在同一行</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (x) DoThis();</span><br><span class=\"line\"><span class=\"keyword\">else</span> DoThat();</span><br></pre></td></tr></table></figure>\n<p>  通常, 单行语句不需要使用大括号, 如果你喜欢用也没问题; 复杂的条件或循环语句用大括号可读性会更好. 也有一些项目要求<code>if</code>必须总是使用大括号:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition)</span><br><span class=\"line\">  DoSomething();  <span class=\"comment\">// 2 空格缩进.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  DoSomething();  <span class=\"comment\">// 2 空格缩进.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  但如果语句中某个<code>if-else</code>分支使用了大括号的话, 其它分支也必须使用:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不可以这样子 - IF 有大括号 ELSE 却没有.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  foo;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">  bar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不可以这样子 - ELSE 有大括号 IF 却没有.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition)</span><br><span class=\"line\">  foo;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  bar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只要其中一个分支用了大括号, 两个分支都要用上大括号.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  foo;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  bar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"循环和开关选择语句\"><a href=\"#循环和开关选择语句\" class=\"headerlink\" title=\"循环和开关选择语句\"></a>循环和开关选择语句</h4><ul>\n<li><p>总述</p>\n<p>  <code>switch</code>语句可以使用大括号分段, 以表明 cases 之间不是连在一起的. 在单语句循环里, 括号可用可不用. 空循环体应使用<code>{}</code>或<code>continue</code>.</p>\n</li>\n<li><p>说明</p>\n<p>  <code>switch</code>语句中的<code>case</code>块可以使用大括号也可以不用, 取决于你的个人喜好. 如果用的话, 要按照下文所述的方法.</p>\n<p>  如果有不满足<code>case</code>条件的枚举值, <code>switch</code>应该总是包含一个<code>default</code>匹配 (如果有输入值没有 case 去处理, 编译器将给出 warning). 如果<code>default</code>应该永远执行不到, 简单的加条 <code>assert</code>:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (var) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">0</span>: &#123;  <span class=\"comment\">// 2 空格缩进</span></span><br><span class=\"line\">    ...      <span class=\"comment\">// 4 空格缩进</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">    assert(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  在单语句循环里, 括号可用可不用：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; kSomeNumber; ++i)</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"I love you\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; kSomeNumber; ++i) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"I take it back\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  空循环体应使用<code>{}</code>或<code>continue</code>, 而不是一个简单的分号.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 反复循环直到条件失效.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; kSomeNumber; ++i) &#123;&#125;  <span class=\"comment\">// 可 - 空循环体.</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (condition) <span class=\"keyword\">continue</span>;  <span class=\"comment\">// 可 - contunue 表明没有逻辑.</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"指针和引用表达式\"><a href=\"#指针和引用表达式\" class=\"headerlink\" title=\"指针和引用表达式\"></a>指针和引用表达式</h4><ul>\n<li><p>总述</p>\n<p>  句点或箭头前后不要有空格. 指针/地址操作符 (<code>*, &amp;</code>) 之后不能有空格.</p>\n</li>\n<li><p>说明</p>\n<p>  下面是指针和引用表达式的正确使用范例:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = *p;</span><br><span class=\"line\">p = &amp;x;</span><br><span class=\"line\">x = r.y;</span><br><span class=\"line\">x = r-&gt;y;</span><br></pre></td></tr></table></figure>\n<p>  注意</p>\n<ul>\n<li>在访问成员时, 句点或箭头前后没有空格.</li>\n<li><p>指针操作符 * 或 &amp; 后没有空格.</p>\n<p>在声明指针变量或参数时, 星号与类型或变量名紧挨都可以:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 好, 空格前置.</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *c;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;str;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 好, 空格后置.</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>* c;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; str;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x, *y;  <span class=\"comment\">// 不允许 - 在多重声明中不能使用 &amp; 或 *</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> * c;  <span class=\"comment\">// 差 - * 两边都有空格</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp; str;  <span class=\"comment\">// 差 - &amp; 两边都有空格.</span></span><br></pre></td></tr></table></figure>\n<p>在单个文件内要保持风格一致, 所以, 如果是修改现有文件, 要遵照该文件的风格.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"布尔表达式\"><a href=\"#布尔表达式\" class=\"headerlink\" title=\"布尔表达式\"></a>布尔表达式</h4><ul>\n<li><p>总述</p>\n<p>  如果一个布尔表达式超过标准行宽, 断行方式要统一一下.</p>\n</li>\n<li><p>说明</p>\n<p>  下例中, 逻辑与 (<code>&amp;&amp;</code>) 操作符总位于行尾:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (this_one_thing &gt; this_other_thing &amp;&amp;</span><br><span class=\"line\">    a_third_thing == a_fourth_thing &amp;&amp;</span><br><span class=\"line\">    yet_another &amp;&amp; last_one) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"函数返回值\"><a href=\"#函数返回值\" class=\"headerlink\" title=\"函数返回值\"></a>函数返回值</h4><ul>\n<li><p>总述</p>\n<p>  不要在<code>return</code>表达式里加上非必须的圆括号.</p>\n</li>\n<li><p>说明</p>\n<p>  只有在写<code>x = expr</code>要加上括号的时候才在<code>return expr;</code>里使用括号.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> result;                  <span class=\"comment\">// 返回值很简单, 没有圆括号.</span></span><br><span class=\"line\"><span class=\"comment\">// 可以用圆括号把复杂表达式圈起来, 改善可读性.</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> (some_long_condition &amp;&amp;</span><br><span class=\"line\">        another_condition);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"变量及数组初始化\"><a href=\"#变量及数组初始化\" class=\"headerlink\" title=\"变量及数组初始化\"></a>变量及数组初始化</h4><ul>\n<li><p>总述</p>\n<p>  用<code>=</code>,<code>()</code>和<code>{}</code>均可.</p>\n</li>\n<li><p>说明</p>\n<p>  您可以用<code>=</code>,<code>()</code>和<code>{}</code>, 以下的例子都是正确的：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">x</span><span class=\"params\">(<span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x&#123;<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">name</span><span class=\"params\">(<span class=\"string\">\"Some Name\"</span>)</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> name = <span class=\"string\">\"Some Name\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> name&#123;<span class=\"string\">\"Some Name\"</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>  请务必小心列表初始化<code>{...}</code>用<code>std::initializer_list</code>构造函数初始化出的类型. 非空列表初始化就会优先调用<code>std::initializer_list</code>, 不过空列表初始化除外, 后者原则上会调用默认构造函数. 为了强制禁用<code>std::initializer_list</code>构造函数, 请改用括号.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v(<span class=\"number\">100</span>, <span class=\"number\">1</span>);  <span class=\"comment\">// 内容为 100 个 1 的向量.</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v&#123;<span class=\"number\">100</span>, <span class=\"number\">1</span>&#125;;  <span class=\"comment\">// 内容为 100 和 1 的向量.</span></span><br></pre></td></tr></table></figure>\n<p>  此外, 列表初始化不允许整型类型的四舍五入, 这可以用来避免一些类型上的编程失误.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pi</span><span class=\"params\">(<span class=\"number\">3.14</span>)</span></span>;  <span class=\"comment\">// 好 - pi == 3.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> pi&#123;<span class=\"number\">3.14</span>&#125;;  <span class=\"comment\">// 编译错误: 缩窄转换.</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"预处理指令\"><a href=\"#预处理指令\" class=\"headerlink\" title=\"预处理指令\"></a>预处理指令</h4><ul>\n<li><p>总述</p>\n<p>  预处理指令不要缩进, 从行首开始.</p>\n</li>\n<li><p>说明</p>\n<p>  即使预处理指令位于缩进代码块中, 指令也应从行首开始.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 好 - 指令从行首开始</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lopsided_score) &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> DISASTER_PENDING      <span class=\"comment\">// 正确 - 从行首开始</span></span></span><br><span class=\"line\">    DropEverything();</span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">if</span> NOTIFY               <span class=\"comment\">// 非必要 - # 后跟空格</span></span></span><br><span class=\"line\">    NotifyClient();</span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    BackToNormal();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"构造函数初始值列表\"><a href=\"#构造函数初始值列表\" class=\"headerlink\" title=\"构造函数初始值列表\"></a>构造函数初始值列表</h4><ul>\n<li><p>总述</p>\n<p>  构造函数初始化列表放在同一行或按四格缩进并排多行.</p>\n</li>\n<li><p>说明</p>\n<p>  下面两种初始值列表方式都可以接受:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果所有变量能放在同一行:</span></span><br><span class=\"line\">MyClass::MyClass(<span class=\"keyword\">int</span> var) : some_var_(var) &#123;</span><br><span class=\"line\">  DoSomething();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果不能放在同一行,</span></span><br><span class=\"line\"><span class=\"comment\">// 必须置于冒号后, 并缩进 4 个空格</span></span><br><span class=\"line\">MyClass::MyClass(<span class=\"keyword\">int</span> var)</span><br><span class=\"line\">    : some_var_(var), some_other_var_(var + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  DoSomething();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果初始化列表需要置于多行, 将每一个成员放在单独的一行</span></span><br><span class=\"line\"><span class=\"comment\">// 并逐行对齐</span></span><br><span class=\"line\">MyClass::MyClass(<span class=\"keyword\">int</span> var)</span><br><span class=\"line\">    : some_var_(var),             <span class=\"comment\">// 4 space indent</span></span><br><span class=\"line\">    some_other_var_(var + <span class=\"number\">1</span>) &#123;  <span class=\"comment\">// lined up</span></span><br><span class=\"line\">  DoSomething();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 右大括号 &#125; 可以和左大括号 &#123; 放在同一行</span></span><br><span class=\"line\"><span class=\"comment\">// 如果这样做合适的话</span></span><br><span class=\"line\">MyClass::MyClass(<span class=\"keyword\">int</span> var)</span><br><span class=\"line\">    : some_var_(var) &#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"命名空间格式化\"><a href=\"#命名空间格式化\" class=\"headerlink\" title=\"命名空间格式化\"></a>命名空间格式化</h4><ul>\n<li><p>总述</p>\n<p>  命名空间内容不缩进.</p>\n</li>\n<li><p>说明</p>\n<p>  命名空间 不要增加额外的缩进层次, 例如:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;  <span class=\"comment\">// 正确. 命名空间内没有额外的缩进.</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace</span></span><br></pre></td></tr></table></figure>\n<p>  不要在命名空间内缩进:</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 错, 缩进多余了.</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace</span></span><br></pre></td></tr></table></figure>\n<p>  声明嵌套命名空间时, 每个命名空间都独立成行.</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> foo &#123;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> bar &#123;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"水平留白\"><a href=\"#水平留白\" class=\"headerlink\" title=\"水平留白\"></a>水平留白</h4><ul>\n<li><p>总述</p>\n<p>  水平留白的使用根据在代码中的位置决定. 永远不要在行尾添加没意义的留白.</p>\n</li>\n<li><p>说明</p>\n<ul>\n<li><p>通用</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">bool</span> b)</span> </span>&#123;  <span class=\"comment\">// 左大括号前总是有空格.</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;  <span class=\"comment\">// 分号前不加空格.</span></span><br><span class=\"line\"><span class=\"comment\">// 列表初始化中大括号内的空格是可选的.</span></span><br><span class=\"line\"><span class=\"comment\">// 如果加了空格, 那么两边都要加上.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> x[] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x[] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承与初始化列表中的冒号前后恒有空格.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> :</span> <span class=\"keyword\">public</span> Bar &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"comment\">// 对于单行函数的实现, 在大括号内加上空格</span></span><br><span class=\"line\">  <span class=\"comment\">// 然后是函数实现</span></span><br><span class=\"line\">  Foo(<span class=\"keyword\">int</span> b) : Bar(), baz_(b) &#123;&#125;  <span class=\"comment\">// 大括号里面是空的话, 不加空格.</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Reset</span><span class=\"params\">()</span> </span>&#123; baz_ = <span class=\"number\">0</span>; &#125;  <span class=\"comment\">// 用括号把大括号与实现分开.</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>  添加冗余的留白会给其他人编辑时造成额外负担. 因此, 行尾不要留空格. 如果确定一行代码已经修改完毕, 将多余的空格去掉; 或者在专门清理空格时去掉（尤其是在没有其他人在处理这件事的时候).</p>\n</li>\n<li><p>循环和条件语句</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (b) &#123;          <span class=\"comment\">// if 条件语句和循环语句关键字后均有空格.</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;          <span class=\"comment\">// else 前后有空格.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (test) &#123;&#125;   <span class=\"comment\">// 圆括号内部不紧邻空格.</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (i) &#123;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> ( i ) &#123;    <span class=\"comment\">// 循环和条件语句的圆括号里可以与空格紧邻.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( test ) &#123;     <span class=\"comment\">// 圆括号, 但这很少见. 总之要一致.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i ) &#123;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( ; i &lt; <span class=\"number\">5</span> ; ++i) &#123;  <span class=\"comment\">// 循环里内 ; 后恒有空格, ;  前可以加个空格.</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (i) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>:         <span class=\"comment\">// switch case 的冒号前无空格.</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">break</span>;  <span class=\"comment\">// 如果冒号有代码, 加个空格.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>操作符</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 赋值运算符前后总是有空格.</span></span><br><span class=\"line\">x = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其它二元操作符也前后恒有空格, 不过对于表达式的子式可以不加空格.</span></span><br><span class=\"line\"><span class=\"comment\">// 圆括号内部没有紧邻空格.</span></span><br><span class=\"line\">v = w * x + y / z;</span><br><span class=\"line\">v = w*x + y/z;</span><br><span class=\"line\">v = w * (x + z);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在参数和一元操作符之间不加空格.</span></span><br><span class=\"line\">x = <span class=\"number\">-5</span>;</span><br><span class=\"line\">++x;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (x &amp;&amp; !y)</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模板和转换</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 尖括号(&lt; and &gt;) 不与空格紧邻, &lt; 前没有空格, &gt; 和 ( 之间也没有.</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; x;</span><br><span class=\"line\">y = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">char</span>*&gt;(x);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在类型与指针操作符之间留空格也可以, 但要保持一致.</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span> *&gt; x;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"垂直留白\"><a href=\"#垂直留白\" class=\"headerlink\" title=\"垂直留白\"></a>垂直留白</h4><ul>\n<li><p>总述</p>\n<p>  垂直留白越少越好.</p>\n</li>\n<li><p>说明</p>\n<p>  这不仅仅是规则而是原则问题了: 不在万不得已, 不要使用空行. 尤其是: 两个函数定义之间的空行不要超过 2 行, 函数体首尾不要留空行, 函数体中也不要随意添加空行.</p>\n<p>  基本原则是: 同一屏可以显示的代码越多, 越容易理解程序的控制流. 当然, 过于密集的代码块和过于疏松的代码块同样难看, 这取决于你的判断. 但通常是垂直留白越少越好.</p>\n<p>  下面的规则可以让加入的空行更有效:</p>\n<ul>\n<li>函数体内开头或结尾的空行可读性微乎其微.</li>\n<li>在多重 if-else 块里加空行或许有点可读性.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>对于代码格式, 因人, 系统而异各有优缺点, 但同一个项目中遵循同一标准还是有必要的;</li>\n<li>行宽原则上不超过 80 列, 把 22 寸的显示屏都占完, 怎么也说不过去;</li>\n<li>80 行限制事实上有助于避免代码可读性失控, 比如超多重嵌套块, 超多重函数调用等等.</li>\n<li>尽量不使用非 ASCII 字符, 如果使用的话, 参考 UTF-8 格式 (尤其是 UNIX/Linux 下, Windows 下可以考虑宽字符), 尽量不将字符串常量耦合到代码中, 比如独立出资源文件, 这不仅仅是风格问题了;</li>\n<li>UNIX/Linux 下无条件使用空格, MSVC 的话使用 Tab 也无可厚非;</li>\n<li>函数参数, 逻辑条件, 初始化列表: 要么所有参数和函数名放在同一行, 要么所有参数并排分行;</li>\n<li>除函数定义的左大括号可以置于行首外, 包括函数/类/结构体/枚举声明, 各种语句的左大括号置于行尾, 所有右大括号独立成行;</li>\n<li>Google 强调有一对 if-else 时, 不论有没有嵌套, 都要有大括号</li>\n<li><code>.</code>/<code>-&gt;</code> 操作符前后不留空格, <code>*</code>/<code>&amp;</code> 不要前后都留, 一个就可, 靠左靠右依各人喜好;</li>\n<li>预处理指令/命名空间不使用额外缩进, 类/结构体/枚举/函数/语句使用缩进;</li>\n<li>初始化用<code>=</code>还是<code>()</code>依个人喜好, 统一就好;</li>\n<li><code>return</code>不要加<code>()</code>;</li>\n<li>水平/垂直留白不要滥用, 怎么易读怎么来.</li>\n</ul>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Sep 10 2018 21:18:11 GMT+0800 (中国标准时间)","title":"Google C++ 编程风格","path":"Google C++ Code Style/","eyeCatchImage":null,"excerpt":"<h1 id=\"Google-C-Code-Style\"><a href=\"#Google-C-Code-Style\" class=\"headerlink\" title=\"Google C++ Code Style\"></a>Google C++ Code Style</h1><p>C++ 是 Google 大部分开源项目的主要编程语言。正如每个 C++ 程序员都知道的， C++ 有很多强大的特性， 但这种强大不可避免的导致它走向复杂，使代码更容易产生 bug， 难以阅读和维护。</p>\n<p>本指南的目的是通过详细阐述 C++ 注意事项来驾驭其复杂性。这些规则在保证代码易于管理的同时， 也能高效使用 C++ 的语言特性。</p>","date":"2018-04-25T16:00:00.000Z","pv":0,"totalPV":0,"categories":"编码技能","tags":["代码风格","C++"],"internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[],"PostCategory":[{"post_id":"cjlwefucg0000qbrtvrsnycih","category_id":"cjlwefucn0004qbrt538j6bf5","_id":"cjlwefuct000cqbrt9julwbpm"},{"post_id":"cjlwefuck0002qbrto8fghd3x","category_id":"cjlwefucn0004qbrt538j6bf5","_id":"cjlwefucu000eqbrtfex40f59"},{"post_id":"cjlwefuco0006qbrtu26bbmcv","category_id":"cjlwefuct000bqbrtmajo2tm5","_id":"cjlwefucv000iqbrt949enhwo"},{"post_id":"cjlwefucp0007qbrtviwe6bqv","category_id":"cjlwefucu000fqbrtjal3oypf","_id":"cjlwefucv000lqbrtph6ww353"},{"post_id":"cjlwefuih000oqbrtq2kv5y4o","category_id":"cjlwefuik000pqbrtook74o7s","_id":"cjlwefuil000sqbrt5t19zapt"},{"post_id":"cjlwefulq000tqbrtmg14cuqa","category_id":"cjlwefucn0004qbrt538j6bf5","_id":"cjlwefuls000vqbrtehcjdbo3"},{"post_id":"cjlwefulz000xqbrtit2vrw86","category_id":"cjlwefucu000fqbrtjal3oypf","_id":"cjlwefum0000zqbrtx509fafu"},{"post_id":"cjlwefum70012qbrt9jilw3sw","category_id":"cjlwefucu000fqbrtjal3oypf","_id":"cjlwefum80014qbrtyzpcfp6h"}],"PostTag":[{"post_id":"cjlwefucg0000qbrtvrsnycih","tag_id":"cjlwefuco0005qbrtrgl7c0pp","_id":"cjlwefucs000aqbrta3u08gco"},{"post_id":"cjlwefuck0002qbrto8fghd3x","tag_id":"cjlwefucr0009qbrttw2i944c","_id":"cjlwefucv000hqbrtabcerc5b"},{"post_id":"cjlwefuck0002qbrto8fghd3x","tag_id":"cjlwefucu000dqbrtw7z5m6hw","_id":"cjlwefucv000jqbrtyfcs2em0"},{"post_id":"cjlwefucp0007qbrtviwe6bqv","tag_id":"cjlwefucu000gqbrthek9f75m","_id":"cjlwefucw000mqbrt1mc4tm64"},{"post_id":"cjlwefucp0007qbrtviwe6bqv","tag_id":"cjlwefucv000kqbrtgl4v2ofb","_id":"cjlwefucw000nqbrtxzmu7mj5"},{"post_id":"cjlwefuih000oqbrtq2kv5y4o","tag_id":"cjlwefuik000qqbrt8ur3u5dp","_id":"cjlwefuil000rqbrt13whhgy9"},{"post_id":"cjlwefulq000tqbrtmg14cuqa","tag_id":"cjlwefuls000uqbrthkkw4um6","_id":"cjlwefult000wqbrtnvyx6h55"},{"post_id":"cjlwefulz000xqbrtit2vrw86","tag_id":"cjlwefucu000gqbrthek9f75m","_id":"cjlwefum00010qbrt71ljrarz"},{"post_id":"cjlwefulz000xqbrtit2vrw86","tag_id":"cjlwefum0000yqbrthp24466y","_id":"cjlwefum10011qbrtezgm9mrq"},{"post_id":"cjlwefum70012qbrt9jilw3sw","tag_id":"cjlwefum80013qbrtu2d2r0rt","_id":"cjlwefum80015qbrtxqlij833"},{"post_id":"cjlwefum70012qbrt9jilw3sw","tag_id":"cjlwefum0000yqbrthp24466y","_id":"cjlwefum80016qbrtskj2bh1h"}],"Tag":[{"name":"Git","_id":"cjlwefuco0005qbrtrgl7c0pp"},{"name":"Markdown","_id":"cjlwefucr0009qbrttw2i944c"},{"name":"入门","_id":"cjlwefucu000dqbrtw7z5m6hw"},{"name":"Python","_id":"cjlwefucu000gqbrthek9f75m"},{"name":"设计模式","_id":"cjlwefucv000kqbrtgl4v2ofb"},{"name":"算法","_id":"cjlwefuik000qqbrt8ur3u5dp"},{"name":"CMake","_id":"cjlwefuls000uqbrthkkw4um6"},{"name":"代码风格","_id":"cjlwefum0000yqbrthp24466y"},{"name":"C++","_id":"cjlwefum80013qbrtu2d2r0rt"}]}}